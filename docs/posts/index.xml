<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 四時随順</title>
        <link>http://minorugh.github.io/posts/</link>
        <description>Recent content in Posts on 四時随順</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <lastBuildDate>Wed, 12 Oct 2022 17:09:25 +0900</lastBuildDate>
        <atom:link href="http://minorugh.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>EmacsからQiitaの記事投稿用にAtomic Chromeを再導入</title>
            <link>http://minorugh.github.io/posts/atomic-chrome/</link>
            <pubDate>Wed, 12 Oct 2022 17:09:25 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/atomic-chrome/</guid>
            <description>久しぶりにQiitaに投稿しようとしたら以前は出来たコピペができなくなっている。 Emacsのクリップボードの設定ミスを疑って調べたけれど問題</description>
            <content type="html"><![CDATA[<p>久しぶりにQiitaに投稿しようとしたら以前は出来たコピペができなくなっている。</p>
<p>Emacsのクリップボードの設定ミスを疑って調べたけれど問題ない。仕様が変更されたのかどうかはわからないが、ダイレクトで記事を書くなんてことは考えられない。みんなどうしてるんだろう？</p>
<p>はてさてと悩んで、前に使った <code>atomic-chrome</code> を再導入してみた。結果はGood！
Chrome側の拡張機能は、atomic-chrome-extensions だったと記憶していたのだけれど見当たらず、
<a href="https://chrome.google.com/webstore/detail/ghosttext/godiecgffnchndlihlpaajjcplehddca">Gost Text</a> に置き換わったみたい。このあたりは下記Tipsに詳しい。</p>
<ul>
<li><a href="https://qiita.com/iwaokimura/items/4932e0f8dcfd55c4556c">atomic-chrome再訪</a></li>
</ul>
<h2 id="emacsの設定">Emacsの設定</h2>
<p>取り急ぎ下記の設定で試したところ快適にコピペ出来た。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; atomic-chrome</span>
(leaf atomic-chrome
  :ensure <span style="color:#66d9ef">t</span>
  :hook (after-init-hook <span style="color:#f92672">.</span> atomic-chrome-start-server)
  :custom (atomic-chrome-buffer-open-style <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;full</span>))
</code></pre></div><p>結構起動時間を消費するので、<code>after-init-hook</code> で遅延起動している。また、Splitバッファーで表示されるデフォルトのスタイルが気に入らなかったので <code>full window</code> に変更している。</p>
]]></content>
        </item>
        
        <item>
            <title>Google-translateからDeepl-translateに乗り換えた話</title>
            <link>http://minorugh.github.io/posts/deeple-translate/</link>
            <pubDate>Wed, 12 Oct 2022 13:21:38 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/deeple-translate/</guid>
            <description>Emacsから翻訳するのにGoogle-translateを愛用していたが、Slackのemacs-jpでGoogleよりも高性能だと評判の</description>
            <content type="html"><![CDATA[<p>Emacsから翻訳するのにGoogle-translateを愛用していたが、Slackのemacs-jpでGoogleよりも高性能だと評判の
<a href="https://www.deepl.com/ja/translator">DeePL</a>
を知ったので、早速導入してみた。</p>
<h2 id="emacsからdeeplを使う">EmacsからDeePLを使う</h2>
<p>&ldquo;EmacsからDeePLを使う&rdquo; で調べると下記3種類のTipsが見つかった。いづれもリージョン選択範囲を翻訳させるものである。</p>
<h3 id="1-masatoideeplel">1. masatoi/deepl.el</h3>
<ul>
<li><a href="https://qiita.com/masatoi0/items/26c7384749393a1bf8fb">https://qiita.com/masatoi0/items/26c7384749393a1bf8fb</a></li>
</ul>
<p>翻訳結果はミニバッファーに表示され、同じ内容がクリップボードにコピーされる。</p>
<p>オリジナルのコード
（<a href="https://gist.github.com/masatoi/ec90d49331e40983427025f8167d01ee">deepl.el</a> ）
は、<code>load-file</code> して使う仕様になっていたので、<code>el-get</code> でパッケージインストールできるようにアレンジしたものを自分のGitHubに置いている。DeePLにユーザー登録してAPIキーの取得が必要。</p>
<ul>
<li><a href="https://github.com/minorugh/deepl-translate">minorugh/deepl-translate</a></li>
</ul>
<h3 id="2-lorniugo-translateel">2. lorniu/go-translate.el</h3>
<ul>
<li><a href="https://hangstuck.com/emacs-deepl/">https://hangstuck.com/emacs-deepl/</a></li>
</ul>
<p>翻訳結果は、ウインドウ分割でOther-window-bufferに表示される。Google-translateとの同時使用が可能なので比較して選べる。</p>
<p>buffer表示のほかにposframeやpopup-windowなどカスタマイズできる。
Melpaからパッケージインストールできるが、こちらもDeePLユーザー登録してAPIキーの取得が必要。</p>
<h3 id="3-kdmsnrdeepl-translateel">3. kdmsnr/deepl-translate.el</h3>
<ul>
<li><a href="https://gist.github.com/kdmsnr/7209a98e9ccacec449011e11f46fdcf7">https://gist.github.com/kdmsnr/7209a98e9ccacec449011e11f46fdcf7</a></li>
</ul>
<p>brows-urlを使ってWEB版のDeePL翻訳を表示させるもの。リージョン選択範囲が自動で貼り付けられる。
パッケージツールではないので、設定コードを<code>init.el</code> に貼り付けるだけで良く、APIキーも不要。</p>
<h2 id="deepl-apiの認証キーの取得">DeepL APIの認証キーの取得</h2>
<p>EmacsからDeePLを使うためには、ユーザー登録をしてAPI認証キーを取得する必要がある。手順は下記の通り。
詳細は、<a href="https://hangstuck.com/emacs-deepl/#toc4">こちら</a> がわかりやすい。</p>
<ul>
<li>公式サイトにアクセスします。
<a href="https://www.deepl.com/translator">DeepL</a></li>
<li>サイトの上の方に「API」と書いてあるところがあるのでそこをクリックします。</li>
<li>無料で登録するをクリックしてアカウント登録を済ませます。</li>
<li>登録後ログインしてアカウント情報を見るとAPI認証キーも表示されるのでコピーします。</li>
</ul>
<h2 id="emacsの設定">Emacsの設定</h2>
<p>とりあえず全部設定して使い分けてみることにした。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Deepl translation appears in minibuffer.</span>
<span style="color:#75715e">;; Also, the same content is copied to the clipboard</span>
(leaf deepl-translate
  :el-get minorugh/deepl-translate
  :bind (<span style="color:#e6db74">&#34;C-t&#34;</span> <span style="color:#f92672">.</span> deepl-translate)
  :custom (deepl-auth-key <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX:XX&#34;</span>))


<span style="color:#75715e">;; Deepl translate with go-translate</span>
(leaf go-translate
  :ensure <span style="color:#66d9ef">t</span>
  :bind (<span style="color:#e6db74">&#34;C-c t&#34;</span> <span style="color:#f92672">.</span> gts-do-translate)
  :config
  (setq gts-translate-list <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;en&#34;</span> <span style="color:#e6db74">&#34;ja&#34;</span>) (<span style="color:#e6db74">&#34;ja&#34;</span> <span style="color:#e6db74">&#34;en&#34;</span>)))
  (setq gts-default-translator
		(gts-translator
		 :picker (gts-noprompt-picker)
		 :engines (<span style="color:#a6e22e">list</span>
				   (gts-deepl-engine :auth-key <span style="color:#e6db74">&#34;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX:XX&#34;</span> :pro <span style="color:#66d9ef">nil</span>)
				   (gts-google-engine))
 		 :render (gts-buffer-render))))


<span style="color:#75715e">;; Deepl translation on web page</span>
(leaf my:deeple-traqslate
  :bind (<span style="color:#e6db74">&#34;C-c d&#34;</span> <span style="color:#f92672">.</span> my:deepl-translate)
  :preface
  (defun my:deepl-translate (<span style="color:#66d9ef">&amp;optional</span> <span style="color:#a6e22e">string</span>)
	(interactive)
	(setq <span style="color:#a6e22e">string</span>
          (cond ((<span style="color:#a6e22e">stringp</span> <span style="color:#a6e22e">string</span>) <span style="color:#a6e22e">string</span>)
				((use-region-p)
				 (<span style="color:#a6e22e">buffer-substring</span> (<span style="color:#a6e22e">region-beginning</span>) (<span style="color:#a6e22e">region-end</span>)))
				(<span style="color:#66d9ef">t</span>
				 (save-excursion
				   (let (s)
					 (<span style="color:#a6e22e">forward-char</span> <span style="color:#ae81ff">1</span>)
					 (backward-sentence)
					 (setq s (<span style="color:#a6e22e">point</span>))
					 (forward-sentence)
					 (<span style="color:#a6e22e">buffer-substring</span> s (<span style="color:#a6e22e">point</span>)))))))
	(run-at-time <span style="color:#ae81ff">0.1</span> <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#39;deactivate-mark</span>)
	(browse-url
	 (<span style="color:#a6e22e">concat</span>
      <span style="color:#e6db74">&#34;https://www.deepl.com/translator#en/ja/&#34;</span>
      (url-hexify-string <span style="color:#a6e22e">string</span>)
      ))))
</code></pre></div><h2 id="評価">評価</h2>
<ol>
<li>
<p>の<code>deepl.el</code> は、設定ファイルなどに書く短いコメント類の翻訳に適している。結果が気に入ればそのまま即yankで貼り付けできるので便利だ。自分的には、一番利用機会が多い。</p>
</li>
<li>
<p>の<code>go-tranlate.el</code> は、Google-translateと併用表示させて、気に入ったほうを採用する…という感じに使える。
buffer表示できるので長文の場合でも見やすい。カスタマイズ性が高く自分好みにアレンジできる点も優れている。</p>
</li>
<li>
<p>の<code>my:deepl-translate</code> は、brows-urlでDeePLサイトを表示させるもので、心なしかレスポンスも悪い。何らかのトラブルでAPIアクセスができなくなったときの予備的な位置づけになるかと思う。</p>
</li>
</ol>
<p>蛇足だが、<a href="https://www.deepl.com/ja/chrome-extension">DeepLのChrome拡張機能</a>を追加して有効化しておくと Chrome画面上でリージョン選択後、右クリックで「選択したテキストで翻訳」からも利用できて便利だ。</p>
]]></content>
        </item>
        
        <item>
            <title>Dockerを利用してCGI/SSI が動作するWEBサーバーを構築</title>
            <link>http://minorugh.github.io/posts/docker-webcgi/</link>
            <pubDate>Wed, 05 Oct 2022 14:08:49 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/docker-webcgi/</guid>
            <description>Dockerの勉強を兼ねてCGI動作確認用のローカルWEBサーバーを構築してみた。 Docker Web サーバーの構築例は、nginx を使ったものが多かったが</description>
            <content type="html"><![CDATA[<p>Dockerの勉強を兼ねてCGI動作確認用のローカルWEBサーバーを構築してみた。</p>
<p>Docker Web サーバーの構築例は、<code>nginx</code> を使ったものが多かったが、自分が利用しているレンタルサーバー（xserver）の環境にあわせる必要があったので <code>Apache</code> で構成することにした。多くのTipsのうち偶然見つけた下記の記事がわかりやすく比較的楽に導入に成功した。</p>
<ul>
<li><a href="https://getpocket.com/read/3714179719">Docker Desktop for Windows＝CGIお試し開発環境＝</a></li>
</ul>
<h2 id="dockerインストール">dockerインストール</h2>
<p>自分の環境（Debian11）へのDockerインストールの手順は、下記<code>makefile</code> の通り。
ついでにdocker-composeもインストールして使えるようにした。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#75715e">## makefile
</span><span style="color:#75715e"></span><span style="color:#a6e22e">docker</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Install docker
</span><span style="color:#75715e"></span>	sudo apt-get install ca-certificates lsb-release
	curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
	echo <span style="color:#e6db74">&#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian  </span>$$<span style="color:#e6db74">(lsb_release -cs) stable&#34;</span> | sudo tee /etc/apt/sources.list.d/docker.list
	sudo apt update
	sudo apt install docker-ce docker-ce-cli containerd.io

<span style="color:#a6e22e">docker-compose</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Install docker-compose
</span><span style="color:#75715e"></span>	sudo curl -L <span style="color:#e6db74">&#34;https://github.com/docker/compose/releases/download/v2.0.1/docker-compose-</span><span style="color:#66d9ef">$(</span>uname -s<span style="color:#66d9ef">)</span><span style="color:#e6db74">-</span><span style="color:#66d9ef">$(</span>uname -m<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> -o /usr/local/bin/docker-compose
	sudo chmod +x /usr/local/bin/docker-compose
</code></pre></div><h2 id="dockerコマンドをsudoなしで実行できるようにする">dockerコマンドをsudoなしで実行できるようにする</h2>
<p>dockerコマンドを入力するたびにsudoをつけるのは面倒なので下記の設定を行う。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># dockerグループを作る</span>
$ sudo groupadd docker
<span style="color:#75715e"># dockerを操作するユーザ(ここでは今のユーザ)をdockerグループに所属させる</span>
$ sudo gpasswd -a $USER docker
<span style="color:#75715e"># dockerデーモンを再起動する</span>
$ sudo restart docker
<span style="color:#75715e"># 再ログインすると反映される</span>
$ exit
<span style="color:#75715e"># Dockerをブート時に自動起動させる</span>
$ sudo systemctl enable --now docker
</code></pre></div><p>頻繁の使うことになるコマンドは、<code>zshrc</code> (または<code>bashrc</code>)に、aliasを設定しておくと更に便利</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zshrc" data-lang="zshrc"><span style="color:#75715e"># zshrc</span>
<span style="color:#75715e"># For docker-compose</span>
alias dcbd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;docker-compose up -d --build&#34;</span>
alias dcup<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;docker-compose up -d&#34;</span>
alias dcdn<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;docker-compose down -v&#34;</span>
alias dcps<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;docker-compose ps&#34;</span>
alias dcex<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;docker container exec -it &lt;コンテナ名&gt; bash&#34;</span>
</code></pre></div><h2 id="dockerファイル構成">dockerファイル構成</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">webcgi
├──server
│    ├──apache
│    │    └──000-default.conf
│    ├──php
│    │    └──php.ini
│    └──Dockerfile
├──www
│    └──html
│        ├──index.html
│        ├──info.php
│        ├──index.pl
│        ├──index.py
│        └──index.rb
└──docker-compose.yml
</code></pre></div><h2 id="how-to-use">How to use</h2>
<ol>
<li>download ZIP &amp;&amp; unzip</li>
<li>mv docker-webcgi-main YOUR_PROJECT_NAME</li>
<li>cd YOUR_PROJECT_NAME</li>
<li>docker-compose up -d &ndash;build</li>
</ol>
<h2 id="files">files</h2>
<h3 id="docker-composeyml">docker-compose.yml</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">version: <span style="color:#e6db74">&#39;3&#39;</span>
services:
  webcgi:
    container_name: webcgi

    build: ./server
    ports:
     - 80:80
    restart: always

    volumes:
       - ./www:/var/www
</code></pre></div><h3 id="serverapache000-defaultconf">server/apache/000-default.conf</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Alias /html/ <span style="color:#e6db74">&#34;/var/www/html/&#34;</span>
&lt;Directory <span style="color:#e6db74">&#34;/var/www/html&#34;</span>&gt; 
   AllowOverride All
   Options +ExecCGI +Includes
   AddType text/html .html
   AddHandler server-parsed .html
   AddHandler cgi-script .cgi .pl .py .rb
&lt;/Directory&gt;
</code></pre></div><h3 id="serverphpphpini">server/php/php.ini</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#f92672">[</span>Date<span style="color:#f92672">]</span>
date.timezone <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>
<span style="color:#f92672">[</span>mbstring<span style="color:#f92672">]</span>
mbstring.internal_encoding <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;UTF-8&#34;</span>
mbstring.language <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Japanese&#34;</span>
<span style="color:#f92672">[</span>error<span style="color:#f92672">]</span>
display_errors <span style="color:#f92672">=</span> Off
display_startup_errors <span style="color:#f92672">=</span> Off
</code></pre></div><h3 id="serverdockerfile">server/dockerfile</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># dockerイメージの指定</span>
FROM php:7.4-apache

<span style="color:#75715e"># 設定ファイルをdockerコンテナ内のPHPとApacheに読み込ませる</span>
COPY ./php/php.ini /usr/local/etc/php/
COPY ./apache/000-default.conf /etc/apache2/conf-available/

<span style="color:#75715e"># インストール</span>
<span style="color:#75715e"># `apt-get install`で任意の自身に必要なミドルウェアを指定しインストールする</span>
<span style="color:#75715e"># `a2enmod rewrite`でApacheの設定を.htaccessで上書きできるようにしている</span>

RUN apt-get update <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> apt-get install -y --no-install-recommends <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>git <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>zip <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>unzip <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>nano <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>python3 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>ruby <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> apt-get -y clean <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> rm -rf /var/lib/apt/lists/* <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> a2enmod cgid <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> a2enmod include <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> a2enmod rewrite <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> a2enconf 000-default

RUN useradd -o -U -m -u <span style="color:#ae81ff">1000</span> minoru
WORKDIR /var/www
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>XserverにNextcloudを導入</title>
            <link>http://minorugh.github.io/posts/nextcloud/</link>
            <pubDate>Thu, 22 Sep 2022 22:48:31 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/nextcloud/</guid>
            <description>WEBサイトを運用するためにXserverレンタルサーバーを利用している。 月額1,000円ほどのスタンダード契約なんだけれど300GBのNV</description>
            <content type="html"><![CDATA[<p>WEBサイトを運用するためにXserverレンタルサーバーを利用している。</p>
<p>月額1,000円ほどのスタンダード契約なんだけれど300GBのNVMeが割り当てられている。
メインの俳句サイトや個人ブログ、息子や娘のWordpressサイトなど複数ドメインで利用しているが、せいぜい30GBほどの消費で、将来的な増加を配慮したとしてもなお200GB超の余裕がある。</p>
<p>せっかくなので勉強を兼ねてNextcloudを導入してみた。
Dropboxも無料で16GBのスペースを確保できているので実用上は困っていないのだけれど、他に活用できるかもと思って導入してみた。
手順は、下記サイトのTipsを参考にした。</p>
<ul>
<li><a href="https://tech.cmd08.com/nextcloud-xserver">Nextcloudをエックスサーバーにインストールして自分専用のクラウドストレージを構築する</a></li>
</ul>
<h2 id="1-導入手順">1. 導入手順</h2>
<p>参考サイトに詳しく説明があるが、要はWordpressをインストールするのと同じだと考えれば良い。</p>
<h3 id="11-インストールする場所を決める">1.1 インストールする場所を決める</h3>
<p>サブドメインでも構わない。
自分は、サーバーを契約したときに自動的に割り当てられる独自ドメイン <code>minorugh.xsrv.jp</code>
が使わずに残っていたのでそれを使いました。</p>
<ul>
<li>Nextcloud本体を<code>home/minorugh/minorugh.xsrv.jp/public_html/nextcloud</code> へインストールします。</li>
<li>データー保存用には、非公開ディレクトリ<code>home/minorugh/data/nextcloud</code>を作成しておきます。</li>
</ul>
<pre><code>📁 home/minorugh
|--📁 minorugh.xsrve.jp
|   |--📁 ...
|   └--📁 public_html
|       └--📁 nextcloud
└--📁 data
    └--📁 nextcloud
</code></pre><h3 id="12-データーベースの準備">1.2 データーベースの準備</h3>
<p>Nextcloud用にあたらしくデータベースを作成し、ユーザーを追加します。</p>
<p>エックスサーバーのサーバーパネル(MySQL設定)にて</p>
<ul>
<li>新規データベースの作成</li>
<li>必要があれば新規ユーザー作成</li>
<li>アクセス権所有の設定</li>
</ul>
<h3 id="2-インストーラーのダウンロード">2. インストーラーのダウンロード</h3>
<p><a href="https://nextcloud.com/install/#instructions-server">Nextcloud Install</a> へアクセス、
DOWNLOAD Server &gt; Community projects &gt; Web installer をクリック、
setup-nextcloud.phpをダウンロードします。今回はサーバーへの転送を省くために直接サーバーにダウンロードします。</p>
<p>エックスサーバーにSSH接続して以下のコマンドを実行します</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd ~/minorugh.xsrv.jp/public_html/nextcloud

$ wget https://download.nextcloud.com/server/installer/setup-nextcloud.php
......
...... <span style="color:#e6db74">`</span>setup-nextcloud.php<span style="color:#960050;background-color:#1e0010">&#39;</span> へ保存完了
</code></pre></div><h3 id="3-インストール">3. インストール</h3>
<p><code>minorug.xsrv.jp/nextcloud/setup-nextcloud.php</code> へアクセスしてインストールします。</p>
<p>インストールディレクトリの指定に「.」を入力してカレントディレクトリに展開します。以上でインストールが完了してセットアップに移るのですが、エックスサーバーではこの記事公開時点で 500 Internal Server Errorが出ます。</p>
<p>minorugh.xsrv.jp/nextcloud/.htaccessの該当箇所を下記のように修正します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-.htaccess" data-lang=".htaccess"><span style="color:#f92672">&lt;IfModule</span> <span style="color:#e6db74">pagespeed_module</span><span style="color:#f92672">&gt;</span>
<span style="color:#75715e">#  ModPagespeed Off コメントアウト</span>
<span style="color:#f92672">&lt;/IfModule&gt;</span>
</code></pre></div><h2 id="4-セットアップ">4. セットアップ</h2>
<p><code>.htaccess</code> の修正が終わったら再度<code>minorugh.xsrver.jp/nextcloud</code> へアクセスしてセットアップを終了させます。</p>
<h3 id="41-ユーザー名">4.1 ユーザー名</h3>
<p>ユーザー名兼ユーザーIDになります。ここで入力した文字列(ユーザーID。最大64文字)がWebDAVアクセスへのURLとして使用されます。ユーザー名の変更は後からも可能ですが、IDは変更できません。</p>
<h3 id="42-データフォルダー">4.2 データフォルダー</h3>
<p>準備で作成したディレクトリパスを入力します。</p>
<h3 id="43-ユーザー作成インストール">4.3 ユーザー作成(インストール)</h3>
<p>その他の入力も済まし、インストールをクリックします。次ページの推薦アプリはキャンセルをクリックします。</p>
<h2 id="5-クライアントアプリをインストール">5. クライアントアプリをインストール</h2>
]]></content>
        </item>
        
        <item>
            <title>Debian 11 bullseye 〜Wifiを使ったネットインストール</title>
            <link>http://minorugh.github.io/posts/install-debian11/</link>
            <pubDate>Thu, 22 Sep 2022 22:09:24 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/install-debian11/</guid>
            <description>Debian10をインストールしてから最近11にアップデートしたのだけれど、いろいろ試行錯誤して触りまくっていたのでなんとなく安定しないので</description>
            <content type="html"><![CDATA[<p>Debian10をインストールしてから最近11にアップデートしたのだけれど、いろいろ試行錯誤して触りまくっていたのでなんとなく安定しないので、思い切ってクリーンインストールすることにした。</p>
<p>Dotfilesのお陰でさほど苦労もなくdebian11をクリーンインストールして動作も安定し心なしかフットワークもかるくなった気がする。一年に一度くらいはメンテナンスを兼ねてクリーンインストールするのもいいかなと思った。基本的に下記のTipsの通りの作業であるが、何箇所か躓いているので備忘録を記す。</p>
<ul>
<li><a href="https://www.linux-setting.tokyo/2021/08/debian-11-bullseye-stable-wifi.html?utm_source=pocket_mylist">Debian 11 “bullseye” stable 〜Wifiを使ったネットインストール方法</a></li>
</ul>
<h2 id="non-free-firmwareを含んだdebianインストールメディア">non-free-firmwareを含んだdebianインストールメディア</h2>
<p>というのも見つけたので試したが、自分のThinkpadではだめだった。結局上記Tipsのとおりに、下記のfirmwareセットをダウンロードして上手く行った。</p>
<ul>
<li><a href="https://cdimage.debian.org/cdimage/unofficial/non-free/firmware/stable/11.0.0/">Debian 11のfirmwareセット（zip形式）</a></li>
</ul>
<h2 id="デスクトップ環境のリストア">デスクトップ環境のリストア</h2>
<p>パネル関係を再構築するのに結構手間取った。</p>
<p>どうバックしておいたら簡単にリストアできるのかわからなくて対策していなかったのだけれど、${HOME}/.config/xfce4フォルダーをバックしておくといい感じであった。次回は、これで試せるようにmakefileを修正しておいた。</p>
<h2 id="live版のインストールメディア">Live版のインストールメディア</h2>
<p>こちらも試して見た。インストールは簡単に出来てデスクトップ表示まではOKだったが、そこからインストールを選ぶとWiFiで躓く。
Live版にfirmwareを反映させる方法がわからないので諦めた。</p>
]]></content>
        </item>
        
        <item>
            <title>Git と Dropbox の連携</title>
            <link>http://minorugh.github.io/posts/github-dropbox/</link>
            <pubDate>Thu, 22 Sep 2022 21:41:06 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/github-dropbox/</guid>
            <description>重要なファイル群をDropboxに配置し複数端末で共有している。Dropbox だけでも多少の履歴は辿れるけれど、さらに保険をかける意味でGi</description>
            <content type="html"><![CDATA[<p>重要なファイル群をDropboxに配置し複数端末で共有している。Dropbox だけでも多少の履歴は辿れるけれど、さらに保険をかける意味でGitHubにもリポジトリを作ってみようと思った。</p>
<p>Dropbox内にgitツリーを置くとややこしくなろそうなのでDropbox外の別デレクトリにtreeをおくというTipsを見つけて真似してみた。</p>
<ul>
<li><a href="https://amano41.hatenablog.jp/entry/syncing-git-with-dropbox-but-working-tree-only?utm_source=pocket_mylist">Dropbox で Git のワークツリーのみを同期する</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd ~/Dropbox/project

$ git init --separate-git-dir /path/to/project.git
Initialized empty Git repository in /path/to/project.git/
</code></pre></div><p>上記を実行すると、Dropboxデレクトリにあった <code>.git</code> デレクトリは、/path/to/project.git に移動し、もとのデレクトリには、以下の内容の <code>.git</code> というファイルが生成される。内容はリンク先を書いただけのテキストファイルなのだが、Dropboxデレクトリでは普通に <code>magit-status</code>できる。</p>
<pre><code>gitdir: /path/to/project.git
</code></pre><h2 id="リストアするとき">リストアするとき</h2>
<p>もし、将来ローカルリポジトリのPCをクリーン再インスールするケースを想定してテスト用のリポジトリで試してみた。</p>
<p><code>mkdir /path/to &amp;&amp; cd /path/to</code> して<code>git clone priject.git</code>する。
データリポジトリは、Dropboxをインストールして同期すれば、自動的にリストアできるので、<code>.git</code>デレクトリのみ残してデータは削除して良い。</p>
]]></content>
        </item>
        
        <item>
            <title>競合コピーが生じないようにemacs-mozc辞書を共有する方法</title>
            <link>http://minorugh.github.io/posts/mozc-dictionary-sharing/</link>
            <pubDate>Thu, 22 Sep 2022 14:22:20 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/mozc-dictionary-sharing/</guid>
            <description>Mozc辞書をDropboxに置いて、そのシンボリックをそれぞれの各端末に貼って辞書共有をしている人は多いと思います。 リアルタイムで同時使用</description>
            <content type="html"><![CDATA[<p>Mozc辞書をDropboxに置いて、そのシンボリックをそれぞれの各端末に貼って辞書共有をしている人は多いと思います。</p>
<p>リアルタイムで同時使用はしない…という使い方であれば何も問題ないのですが、
自分の場合は、基本メイン機のEmacsは起動しっぱなし（蓋閉じでSleep）なので、その状態でサブ機のEmacsを立ち上げると、mozcのON/OFFとは関係なく<code>~/Dropbox/mozc/.mozc/</code> に競合コピーが量産されます。</p>
<p>そこで、簡単な回避方法を考えてみました。大げさなタイトルですが、Tipsといえるほどのものではありません。</p>
<h2 id="ファイル体系">ファイル体系</h2>
<p>くどくど説明するより下図を見ていただければ、&ldquo;な〜んだ&rdquo; と理解いただけると思います。</p>
<p>メイン機の <code>.mozc/</code> は、Dropboxに保存してシンボリックリンクで使い、サブ機で使うときはEmacsを起動するたびにDropboxにある最新の <code>.mozc/</code> をコピーして使うという仕組みです。</p>
<pre><code>※ maine-machine
~/.mozc &lt;-- symbolic link -- ~/Dropbox/mozc/.mozc
　                               | Copy latest every time
※ sub-mchine                    |
~/.mozc &lt;-- symbolic link -- ~/Dropbox/backup/mozc/.mozc
</code></pre><h2 id="emacsの設定">Emacsの設定</h2>
<p>emacsの設定ファイルはメイン機とサブ機で共有しているので、<code>uname -n</code> を条件子としてメイン機（自分の場合はe590）でない場合（サブ機のとき）は、emacsを起動したときにmozc辞書をコピーしています。シンボリックリンクは、一度貼っておけばコピーのたびに貼り直さなくても大丈夫です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Clone the mozc dictionary placed in Dropbox to Nextcloud.</span>
(defun mozc-copy ()
 <span style="color:#e6db74">&#34;Copy mozc for submachine.&#34;</span>
 (interactive)
 (unless (<span style="color:#a6e22e">string-match</span> <span style="color:#e6db74">&#34;e590&#34;</span> (shell-command-to-string <span style="color:#e6db74">&#34;uname -n&#34;</span>))
	 (compile <span style="color:#e6db74">&#34;cp -rf ~/Dropbox/mozc/.mozc ~/Dropbox/backup/mozc&#34;</span>)))
(add-hook <span style="color:#e6db74">&#39;emacs-startup-hook</span> <span style="color:#e6db74">&#39;mozc-copy</span>)
</code></pre></div><h2 id="使い方">使い方</h2>
<p>Dropboxに配置したmozc辞書は、メイン機での単語登録や入力履歴を記憶し常に最新の状態でバックアップされます。
サブマシーンの場合は、emacsを起動するたびに最新の辞書をコピーしてそれを使うという簡単な割り切りです。</p>
<p>サブマシーンで単語登録したら、元辞書へ書き戻すという仕組みも考えれますが、結局は、競合コピーをどう回避するかという課題になると思うので割り切ることにしました。良い方法があれば教えてください。</p>
<p>メイン機、サブ機の定義は特にありません。使用頻度の高い方をメイン機として構成すればいいかなと思います。</p>
]]></content>
        </item>
        
        <item>
            <title>Windows11 非対応 CPU&#43;TPM&#43;セキュアブート回避最強編</title>
            <link>http://minorugh.github.io/posts/windows11-upgrade/</link>
            <pubDate>Mon, 31 Jan 2022 19:20:43 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/windows11-upgrade/</guid>
            <description>Windows11を導入するためには３つの条件が必須になっています。 １． CPU ※ Intelの Coreシリーズは第8世代以降（Core i3/i5/</description>
            <content type="html"><![CDATA[<p>Windows11を導入するためには３つの条件が必須になっています。</p>
<pre><code>１． CPU
     ※ Intelの Coreシリーズは第8世代以降（Core i3/i5/i7の8000以降）
     ※ AMDの Ryzenシリーズは第2世代以降（Ryzen 5 2600以降）
２． TPM1.2/2.0
３． UEFI/セキュアブート（boot）
</code></pre><p>我が家で家族が使っているマシン5台について、Windows11へのアップグレードを試みましたがいづれもシステムチェックで引っかかりアウトでした。</p>
<p>まず最初に見つけた Tipsでレジストリを編集して3台は成功しました。</p>
<ul>
<li><a href="https://atmarkit.itmedia.co.jp/ait/articles/2110/13/news014.html">【 Microsoft公式情報＋α】互換性チェックを回避して Windows 11にアップグレードする方法</a></li>
</ul>
<p>しかし残りの2台（Thinkpad X220、L540）は、セキュアブートでひっかかって駄目。</p>
<p>こちらもレジストリ編集でいけたという Tipsもあったので試しましたがアウトでした。</p>
<p>諦めるのは癪なので、ググって「最強編」なる Tipsを見つけました。</p>
<ul>
<li><a href="https://www.broadcreation.com/blog/news/86520.html?utm_source=pocket_mylist">Windows11 非対応 CPU+TPM+セキュアブート回避の簡単まとめ（手っ取り早く導入する最強編）</a></li>
</ul>
<p>インスール用の ISOファイルを USBにコピーして、sourcesフォルダ内にある appraiserres.dllを削除してインストールするというものでした。
ただし、その手順にやや注意事項があるようなので転載しておきます。</p>
<h2 id="1-appraiserresdllを削除">1. appraiserres.dllを削除</h2>
<p>ダウンロードした ISOファイルを直接編集して appraiserres.dllを削除しよとしてもできませんでしたので、一度 USBにコピーして作業しました。
削除でもリネームでも構わないようで、念の為に Windows10の appraiserres.dllと差し替えるという方もいましたが、私の場合は削除で問題なくインストールできました。</p>
<h2 id="2-isoファイルから起動">2. ISOファイルから起動</h2>
<p>ISOファイルをダブルクリックすると下記の通りマウントされるので setup.exeを実行すます。</p>
<p><img src="https://live.staticflickr.com/65535/51853953653_7236caf098_o.jpg" alt="Alt Text"></p>
<h2 id="3-セットアップ画面">3. セットアップ画面</h2>
<p>ISOファイル中の setup.exeを実行すると、何度か画面が変遷して下記の画面で入力まちになります。</p>
<p><img src="https://live.staticflickr.com/65535/51853909983_83318d2014_o.jpg" alt="Alt Text"></p>
<p>ここでのポイントは、必ず</p>
<pre><code>「セットアップでの更新プログラムのダウンロード方法の変更」
</code></pre><p>をクリックしてインストールしなければいけません。</p>
<p>そのまま次へを押してしまいますとすステムチェックされてインストール出来ません。</p>
<h2 id="4-更新プログラムの入手は今は実行しないを選ぶ">4. 更新プログラムの入手は「今は実行しない」を選ぶ</h2>
<p>続いて次の画面に代わります。</p>
<p><img src="https://live.staticflickr.com/65535/51854155839_5045731520_o.jpg" alt="Alt Text"></p>
<p>ここでも大事なポイントがあり、</p>
<pre><code>今は実行しない
</code></pre><p>にチェックを入れて「次へ」を押します。</p>
<p>この方法で残り2台も無事 Windows11へアップグレードできました。</p>
<h2 id="5-この手法の問題点">5. この手法の問題点</h2>
<p>先人の Tipsによるとこの最強編でインストールしたら日々のアップデートを自動でしてくれないとのことでした。</p>
<p>けれども私の場合は、今のところ2台共その心配はなく機嫌よく動いて、自動アップデートにも対応しているようです。</p>
<p>2台共 Windows10 Proだったのでそのへんが関係しているのかもされえません。</p>
<p>まだ、完全に安心はできないですが暫く様子を見てみましょう。</p>
<p>でも Micro Softが、どうな目算があってこんな意地悪な制限をするのか不可解、単なるパソコンメーカー販促への義理だてとしか思えない。</p>
]]></content>
        </item>
        
        <item>
            <title>SlackAppを最小化状態で自動起動する for Linux</title>
            <link>http://minorugh.github.io/posts/slack-in-minimized/</link>
            <pubDate>Wed, 26 Jan 2022 10:29:22 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/slack-in-minimized/</guid>
            <description>元ネタ SlackAppを最小化状態で自動起動する SlackAppを自動起動にしている場合は ~/.config/autostart/slack.desktop と言うファイルがあります。 私の環境では、slac</description>
            <content type="html"><![CDATA[<p>元ネタ
<a href="https://bre.is/tEgwhUeT">SlackAppを最小化状態で自動起動する</a></p>
<p>SlackAppを自動起動にしている場合は <code>~/.config/autostart/slack.desktop</code> と言うファイルがあります。 私の環境では、<code>slack.desktop</code> は <code>/usr/share/applications/slack.desktop</code> に存在していました。 なので、編集するには `sudo`` が必要です。</p>
<pre><code class="language-conf" data-lang="conf">[Desktop Entry]
Name=Slack
StartupWMClass=Slack
Comment=Slack Desktop
GenericName=Slack Client for Linux
Exec=/usr/bin/slack %U
Icon=/usr/share/pixmaps/slack.png
Type=Application
StartupNotify=true
Categories=GNOME;GTK;Network;InstantMessaging;
MimeType=x-scheme-handler/slack;
</code></pre><p>Exec が実際に実行するコマンドを指定しています。<code>/usr/bin/slack</code> が本体なので、この直後に <code>--startup</code> を挿入すれば最小化状態で自動起動するようになります。</p>
<pre><code class="language-conf" data-lang="conf">Exec=/usr/bin/slack --startup %U
</code></pre><p>おそらく、SlackAppをアップデートすると <code>/usr/share/applications/slack.desktop</code> は上書きされて <code>--startup</code> が消えるので、<code>~/.config/autostart/</code> にはシンボリックリンクではなく、コピーを置くなどのしたほうがいいです。</p>
]]></content>
        </item>
        
        <item>
            <title>Sylpheedをログイン時に最小化起動させる</title>
            <link>http://minorugh.github.io/posts/minimize-startup-sylpheed/</link>
            <pubDate>Wed, 26 Jan 2022 10:19:14 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/minimize-startup-sylpheed/</guid>
            <description>元ネタは下記 Sylpheedをログイン時に最小化起動する方法 Devil&amp;rsquo;s Pieのインストール sudo apt install devilspie 設定ファイルの作成 ~/.devilspie/に設定</description>
            <content type="html"><![CDATA[<p>元ネタは下記</p>
<ul>
<li><a href="https://bre.is/Vf9rwzFo">Sylpheedをログイン時に最小化起動する方法</a></li>
</ul>
<h2 id="devils-pieのインストール">Devil&rsquo;s Pieのインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"> sudo apt install devilspie
</code></pre></div><h2 id="設定ファイルの作成">設定ファイルの作成</h2>
<p>~/.devilspie/に設定ファイル sylpheed.dsを以下の内容で作成する。　ファイル名は拡張子が.dsならアプリケーション名でなくてもいいようだ。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"> <span style="color:#f92672">(</span><span style="color:#66d9ef">if</span>
 <span style="color:#f92672">(</span>is <span style="color:#f92672">(</span>application_name<span style="color:#f92672">)</span> <span style="color:#e6db74">&#34;sylpheed&#34;</span><span style="color:#f92672">)</span>
 <span style="color:#f92672">(</span>begin <span style="color:#f92672">(</span>minimize<span style="color:#f92672">))</span>
 <span style="color:#f92672">)</span>
</code></pre></div><h2 id="devils-pie起動終了スクリプトの作成">Devil&rsquo;s Pie起動＆終了スクリプトの作成</h2>
<p>/usr/local/bin/あたりにシェルスクリプト minimize_sylpheed.shを以下の内容で作成する。　ファイル名は任意、実行権限を忘れずに付与しておくこと。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"> <span style="color:#75715e">#!/bin/bash</span>
 devilspie &amp;
 sylpheed &amp;
 sleep 5s
 killall -9 devilspie
</code></pre></div><p>devilspieは常駐監視するタイプのツールなので、5秒で強制終了させている。　 Sylpheedが最小化しないときは時間を延ばしてみる。</p>
<h2 id="シェルスクリプトを自動開始アプリケーションに登録する">シェルスクリプトを自動開始アプリケーションに登録する</h2>
<p>Debian場合は「設定マネージャー」→「セッションと起動」→「自動開始アプリケーション」
Sylpheedの設定「新着メールを自動チェックする（○分ごと）」「起動時に新着メールをチェックする」を利用するとバックグラウンドでメールチェックしてくれて便利。</p>
]]></content>
        </item>
        
        <item>
            <title>GUIの起動時にパスフレーズを自動入力して ssh-add を実行させる</title>
            <link>http://minorugh.github.io/posts/autostartssh/</link>
            <pubDate>Sun, 23 Jan 2022 12:10:02 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/autostartssh/</guid>
            <description>Emacsを作業テーブルとして常用的に SSHを使うので、ログイン時にパスフレーズを自動入力させて ssh-addを実行させるように環境構築した</description>
            <content type="html"><![CDATA[<p>Emacsを作業テーブルとして常用的に SSHを使うので、ログイン時にパスフレーズを自動入力させて ssh-addを実行させるように環境構築したので備忘録を残しておく。</p>
<p>Debian Linux環境であるので他の環境の場合は、それぞれに応じた工夫がいるかと思う。</p>
<ol>
<li>autologin.sh の設定（shell script）</li>
<li>autostart.desktop の設定（Linuxの自動起動）</li>
</ol>
<h2 id="autologinsh">autologin.sh</h2>
<p>expectを利用した標準的なスクリプトです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/usr/bin/expect
</span><span style="color:#75715e"></span><span style="color:#75715e"># Run ssh-add with passphrase auto input at GUI startup</span>
<span style="color:#75715e"># Look ${PWD}/.config/autostart/autologin.desktop</span>

<span style="color:#75715e"># Include Password</span>
source ~/Dropbox/backup/zsh/env.sh

spawn ssh-add /home/minoru/.ssh/id_rsa
expect <span style="color:#e6db74">&#34;Enter passphrase for /home/minoru/.ssh/id_rsa:&#34;</span>
send <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PW<span style="color:#e6db74">}</span><span style="color:#e6db74">\n&#34;</span>;
interact
</code></pre></div><p>autologin.sh はどこに配置してもよいのですが、私の場合は、ホームデレクトリに置きました。</p>
<p>作成後、動作権限の付与を忘れないように。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ chmod <span style="color:#ae81ff">600</span> autologin.sh
</code></pre></div><p>スクリプトは GitHubで公開しているので passphraseは直接書かないで別ファイルとしてインクルードしている。</p>
<p>include するファイルは下記のような内容である。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">## Password file to include in ~/.autologin.sh</span>
set PW <span style="color:#e6db74">&#34;&lt;your passphrase&gt;&#34;</span>
</code></pre></div><p><code>your passphrase</code> には、秘密鍵 id_rsa の作成時に設定したパスワードを書きます。パスワードは長いほど解読されにくくて安全なのですが、長すぎると暗号化や復号処理に過大な負荷がかかります。私の場合は安全を考えて４０桁にしましたが今の所無理なく機能しているようです。</p>
<h2 id="autostartdesktop">autostart.desktop</h2>
<p>GUIログイン時に autologin.shが自動起動されるように設定します。</p>
<p>debian Linuxの GUI「セッションと起動」に直接設定してもいいのですが、下記のような autostart.desktopファイル作成したほうが簡単です。</p>
<pre><code class="language-conf" data-lang="conf">[Desktop Entry]
 Version=1.0
 Name=AutoLogin
 Comment=Run ssh-add with passphrase auto input at GUI startup
 Exec=gnome-terminal -- zsh -c &quot;expect $HOME/.autologin.sh&quot;
 Icon=utilities-terminal
 Terminal=false
 Type=Application
 Categories=Application;
</code></pre><p>これを、<code>~/.config/autostart</code> フォルダーに保存します。上記の設定の場合、gnome-terminal は、コマンド実行後すぐに閉じます。</p>
<p>上記ファイルを保存してログインし直すと瞬間的に実行される様子が分かります。メニューから「設定」→「セッションと起動」と開き、「自動開始アプリケーション」のタブを開くと設定が反映されているのを確認できます。</p>
]]></content>
        </item>
        
        <item>
            <title>UpFtpを改造して UpSFTPを作った</title>
            <link>http://minorugh.github.io/posts/upsftp/</link>
            <pubDate>Wed, 19 Jan 2022 19:43:07 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/upsftp/</guid>
            <description>ホームページを更新するのに結城浩さん作の upftp.plを FTPSモードで使っていたが SFTPで使えるようにしたいと思い試してみました。 upftp.pl N</description>
            <content type="html"><![CDATA[<p>ホームページを更新するのに結城浩さん作の upftp.plを FTPSモードで使っていたが SFTPで使えるようにしたいと思い試してみました。</p>
<ul>
<li><a href="https://gist.github.com/hyuki0000/f58ccabccba37b93dbb5823d4f019341">upftp.pl</a></li>
</ul>
<p>Net::SFTPを入れようとトライしたのですがうまくいかず、Perlでは Net::SFTP::Foreignを使うという情報を見つけたので cpamで入れてみたらあっさり認識してくれました。IO::Ptyも入れるようにメッセージがでたのでこれも installしました。</p>
<p>私の利用している xserverの場合、SFTPの標準ポート22では使えなかったのでオプションで指定しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e">#!/usr/bin/perl</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># This is UpSFTP, Version 1.0</span>
<span style="color:#75715e"># Copyright (C) 2022, by Minoru Yamada.</span>
<span style="color:#75715e"># This program is a modification of Hiroshi Yuki&#39;s upftp.pl for use with SFTP.</span>
<span style="color:#75715e"># https://minorugh.xsrv.jp/post/2022/0119-upsftp/</span>
<span style="color:#75715e"># https://github.com/minorugh/upsftp</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># This program is free software; you can redistribute it and/or</span>
<span style="color:#75715e"># modify it under the same terms as Perl itself.</span>
<span style="color:#75715e">#</span>
<span style="color:#66d9ef">use</span> strict;
<span style="color:#66d9ef">use</span> warnings;
<span style="color:#66d9ef">use</span> Net::SFTP::Foreign;

<span style="color:#75715e">########################################</span>
<span style="color:#75715e"># Configuration</span>
<span style="color:#75715e">########################################</span>
<span style="color:#75715e"># Show debug info: 0 (nodebug), 1 (terse), 2 (verbose)</span>
<span style="color:#66d9ef">my</span> $debug <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
<span style="color:#75715e"># Show update info.</span>
<span style="color:#66d9ef">my</span> $show_update <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
<span style="color:#75715e"># Your SFTP host name.</span>
<span style="color:#66d9ef">my</span> $hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;yoursftp.doain&#39;</span>;
<span style="color:#75715e"># Your SFTP port.</span>
<span style="color:#66d9ef">my</span> $portnumber <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;portnumber&#39;</span>;
<span style="color:#75715e"># Your SFTP user name.</span>
<span style="color:#66d9ef">my</span> $username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;yourname&#39;</span>;
<span style="color:#75715e"># Optional settings</span>
<span style="color:#66d9ef">my</span> $moreoptions <span style="color:#f92672">=</span> [ <span style="color:#f92672">-</span>o <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;StrictHostKeyChecking no&#39;</span> ];
<span style="color:#75715e"># Remote root directory (in fullpath)</span>
<span style="color:#66d9ef">my</span> $remoterootdir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/home/youraccount/public_html&#39;</span>;
<span style="color:#75715e"># Local root directory (in fullpath)</span>
<span style="color:#66d9ef">my</span> $localrootdir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/usr/home/myname&#34;</span>;
<span style="color:#75715e"># File list (in fullpath)</span>
<span style="color:#66d9ef">my</span> $filelist <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/usr/home/myname/filelist.txt&#34;</span>;

<span style="color:#75715e">########################################</span>
<span style="color:#75715e"># End of configuration.</span>
<span style="color:#75715e">########################################</span>
<span style="color:#66d9ef">my</span> $sftp;
<span style="color:#66d9ef">my</span> @newfilelist;

<span style="color:#f92672">&amp;</span>upsftp;
exit(<span style="color:#ae81ff">0</span>);

<span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">upsftp</span> {
    <span style="color:#66d9ef">if</span> ($debug) {
		<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Simulation only, I do not transfer any file.\n&#34;</span>;
    }
    <span style="color:#66d9ef">unless</span> ($hostname) {
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;\$hostname is empty, abort.\n&#34;</span>;
        <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#66d9ef">unless</span> ($username) {
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;\$username is empty, abort.\n&#34;</span>;
        <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#66d9ef">unless</span> ($portnumber) {
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;\$hostport is empty, abort.\n&#34;</span>;
        <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#66d9ef">unless</span> ($remoterootdir) {
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;\$remoterootdir is empty, abort.\n&#34;</span>;
        <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#66d9ef">unless</span> ($localrootdir) {
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;\$localrootdir is empty, abort.\n&#34;</span>;
        <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#66d9ef">unless</span> ($filelist) {
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;\$filelist is empty, abort.\n&#34;</span>;
        <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;filelist is $filelist\n&#34;</span> <span style="color:#66d9ef">if</span> ($debug);
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>open(FILELIST, $filelist)) {
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;$filelist is not found.\n&#34;</span>;
        <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#66d9ef">while</span> (<span style="color:#e6db74">&lt;FILELIST&gt;</span>) {
        chomp;
        <span style="color:#66d9ef">next</span> <span style="color:#66d9ef">if</span> (<span style="color:#e6db74">/^#/</span>);
        <span style="color:#66d9ef">my</span> ($filename, $updatetime) <span style="color:#f92672">=</span> split(<span style="color:#e6db74">/,/</span>);
        $updatetime <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">not</span> defined($updatetime) <span style="color:#f92672">or</span> $updatetime <span style="color:#f92672">eq</span> <span style="color:#e6db74">&#34;&#34;</span>);
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;$filename = $updatetime\n&#34;</span> <span style="color:#66d9ef">if</span> ($debug <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>);
        <span style="color:#66d9ef">my</span> $mtime <span style="color:#f92672">=</span> (stat(<span style="color:#e6db74">&#34;$localrootdir/$filename&#34;</span>))[<span style="color:#ae81ff">9</span>];
        $mtime <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">not</span> defined($mtime) <span style="color:#f92672">or</span> $mtime <span style="color:#f92672">eq</span> <span style="color:#e6db74">&#34;&#34;</span>);
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;mtime = $mtime\n&#34;</span> <span style="color:#66d9ef">if</span> ($debug <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>);
        <span style="color:#66d9ef">if</span> (defined($mtime) <span style="color:#f92672">and</span> $mtime <span style="color:#f92672">&gt;</span> $updatetime) {
            <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Update $filename\n&#34;</span> <span style="color:#66d9ef">if</span> ($debug <span style="color:#f92672">or</span> $show_update);
			<span style="color:#f92672">&amp;</span>sftp_put(<span style="color:#e6db74">&#34;$localrootdir/$filename&#34;</span>, <span style="color:#e6db74">&#34;$remoterootdir/$filename&#34;</span>);
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Skip $filename\n&#34;</span> <span style="color:#66d9ef">if</span> ($debug);
        }
        <span style="color:#66d9ef">my</span> $curtime <span style="color:#f92672">=</span> time;
        push(@newfilelist, <span style="color:#e6db74">&#34;$filename,$curtime\n&#34;</span>);
    }
    close(FILELIST);
	<span style="color:#f92672">&amp;</span>sftp_close;
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>open(FILELIST, <span style="color:#e6db74">&#34;&gt; $filelist&#34;</span>)) {
        <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;$filelist: Cannot create.\n&#34;</span>;
        exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
    }
    <span style="color:#66d9ef">print</span> FILELIST @newfilelist;
    close(FILELIST);
}

<span style="color:#75715e"># Put $localfile to $remotefile.</span>
<span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">sftp_put</span> {
    <span style="color:#66d9ef">my</span> ($localfile, $remotefile) <span style="color:#f92672">=</span> @_;
    $sftp <span style="color:#f92672">=</span> Net::SFTP::Foreign<span style="color:#f92672">-&gt;</span><span style="color:#66d9ef">new</span>($hostname,
									port<span style="color:#f92672">=&gt;</span> $portnumber,
									user<span style="color:#f92672">=&gt;</span> $username,
									more<span style="color:#f92672">=&gt;</span> $moreoptions);
    $sftp<span style="color:#f92672">-&gt;</span>put($localfile, $remotefile);
}

<span style="color:#75715e"># Closing the connection to the remorte server</span>
<span style="color:#66d9ef">sub</span> <span style="color:#a6e22e">sftp_clode</span> {
	undef $sftp;
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Disconnecting from remote server\n&#34;</span>;
}
<span style="color:#ae81ff">1</span>;
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>iframeの高さを取得し自動調整する</title>
            <link>http://minorugh.github.io/posts/auto-height-of-iframe/</link>
            <pubDate>Thu, 30 Dec 2021 12:03:29 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/auto-height-of-iframe/</guid>
            <description>レスポンシブ Webデザインでは、iframeの高さが PCとスマホ・タブレットで結構変わってしまうことも多くて事前に高さを決め打ちで指定できま</description>
            <content type="html"><![CDATA[<p>レスポンシブ Webデザインでは、iframeの高さが PCとスマホ・タブレットで結構変わってしまうことも多くて事前に高さを決め打ちで指定できません。</p>
<p>そこで、JavaScript（jQuery）を使って iframeの高さを自動的に設定してくれるスクリプトを探しました。</p>
<p>親ページと子ページのそれぞれで設定の必要な Tipsが多い中、
親ページの設定のみで動作するものを見つけて試したところ実に快適だったのでこのスクリプトを採用することにした。</p>
<h2 id="htmlで準備すること">HTMLで準備すること</h2>
<p>高さを自動調整したい iframeの classに「autoHeight」を付けるだけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.example.com/&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;autoHeight&#34;</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;
</code></pre></div><h2 id="iframeの高さを自動的に調整してくれるスクリプト">iframeの高さを自動的に調整してくれるスクリプト</h2>
<p>jQueryを読み込んだ状態で以下のスクリプトを実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">(<span style="color:#66d9ef">function</span>(window, <span style="color:#a6e22e">$</span>){
	<span style="color:#a6e22e">$</span>(window).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;load&#34;</span>,<span style="color:#66d9ef">function</span>(){
		<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;iframe.autoHeight&#39;</span>).<span style="color:#a6e22e">each</span>(<span style="color:#66d9ef">function</span>(){
			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">D</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#66d9ef">this</span>).<span style="color:#a6e22e">get</span>(<span style="color:#ae81ff">0</span>).<span style="color:#a6e22e">contentWindow</span>.document;
			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">innerHeight</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">max</span>(
				<span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">scrollHeight</span>, <span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">scrollHeight</span>,
				<span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">offsetHeight</span>, <span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">offsetHeight</span>,
				<span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">clientHeight</span>, <span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">clientHeight</span>
				);
			<span style="color:#a6e22e">$</span>(<span style="color:#66d9ef">this</span>).<span style="color:#a6e22e">removeAttr</span>(<span style="color:#e6db74">&#34;height&#34;</span>).<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#39;height&#39;</span>, <span style="color:#a6e22e">innerHeight</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;px&#39;</span>);
		});
	});
})(window, <span style="color:#a6e22e">jQuery</span>);
</code></pre></div><p>ページに配置された画像などの読み込みが完了した時点で iframeの高さを調整します。</p>
<p>同じページ内に複数の iframeがあっても、正常に高さを設定できます。</p>
<p><code>class=&quot;autoHeight&quot;</code> と書くだけで <code>scrolling=&quot;no&quot; frameborder=&quot;no&quot;</code> とかを書く必要なくとてもシンプルな優れものでした。</p>
<h2 id="参考サイト">参考サイト</h2>
<ul>
<li><a href="https://jdash.info/archives/jQuery_iframe_auto_height_script">【 jQuery】 iframeの高さを取得し自動調整するスクリプト（Microsoft Edgeにも対応）</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Linuxbrewで Github CLI（gh）を install</title>
            <link>http://minorugh.github.io/posts/github-cli/</link>
            <pubDate>Thu, 25 Nov 2021 12:01:10 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/github-cli/</guid>
            <description>先の Linuxbrewさえうまくインストールできれば、brewで ghを installするのは実に簡単。 install % brew install gh とするだけ。 コマンドラインで</description>
            <content type="html"><![CDATA[<p>先の Linuxbrewさえうまくインストールできれば、brewで ghを installするのは実に簡単。</p>
<h2 id="install">install</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% brew install gh
</code></pre></div><p>とするだけ。</p>
<p>コマンドラインで使えるように <code>.zshrc</code> に下記の設定を書く。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zshrc" data-lang="zshrc"><span style="color:#75715e"># GitHub CLI</span>
eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>gh completion -s zsh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><p>bashなら <code>.bashrc</code>に書く。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>gh completion -s bash<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><h2 id="auth-login">auth login</h2>
<p>次のように <code>gh auth login</code> と入力しあとは terminal画面の指示通りに進めて完了させれば、ghコマンドが使えるようになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% gh auth login
? What account <span style="color:#66d9ef">do</span> you want to log into? GitHub.com
- Logging into github.com
? How would you like to authenticate? Login with a web browser
! First copy your one-time code: ****-****
<span style="color:#75715e">#👇Enterキーを押すとブラウザから認証作業ができます(下の図参照)。</span>
- Press Enter to open github.com in your browser...
<span style="color:#75715e">#👇ブラウザでの作業完了後に表示されます。</span>
✓ Authentication complete. Press Enter to <span style="color:#66d9ef">continue</span>...
? Choose default git protocol HTTPS
- gh config set -h github.com git_protocol https
✓ Configured git protocol
✓ Logged in as ***********
</code></pre></div><p>認証後正常にログインできるようになっていると、ステータスが正常に跳ね返ってきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% gh auth status                                                                                                        <span style="color:#f92672">[</span>~<span style="color:#f92672">][</span>master<span style="color:#f92672">]</span>
github.com
  ✓ Logged in to github.com as minorugh <span style="color:#f92672">(</span>/home/minoru/.config/gh/hosts.yml<span style="color:#f92672">)</span>
  ✓ Git operations <span style="color:#66d9ef">for</span> github.com configured to use https protocol.
  ✓ Token: *******************
</code></pre></div><h2 id="write-automation-commands-in-zshrc">Write automation commands in zshrc</h2>
<p>現状、ghコマンドで複雑なことをするつもりはないので、新規リポジトリ作成と cloneだけを.zshrcに設定した。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zshrc" data-lang="zshrc"><span style="color:#75715e"># Create a new repository and first commit</span>
<span style="color:#66d9ef">function</span> gh-new<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    echo <span style="color:#e6db74">&#34;Type repository name: &#34;</span> <span style="color:#f92672">&amp;&amp;</span> read name;
	echo <span style="color:#e6db74">&#34;# </span><span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt;&gt; README.md
    git init <span style="color:#f92672">&amp;&amp;</span> git add README.md <span style="color:#f92672">&amp;&amp;</span> git commit -m <span style="color:#e6db74">&#34;First commit&#34;</span>
    gh repo create <span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span>
	git branch -M main
	git remote rm origin
    git remote add origin git@github.com:minorugh/<span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span>.git
    git push -u origin main;
<span style="color:#f92672">}</span>

<span style="color:#75715e"># Cloning a repository</span>
<span style="color:#66d9ef">function</span> gh-clone<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    echo <span style="color:#e6db74">&#34;Type repository name: &#34;</span> <span style="color:#f92672">&amp;&amp;</span> read name;
    gh repo clone <span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span>
</code></pre></div><p>ローカルリポジトリ用のデレクトリを作成し、そのデレクトリをカレントとして <code>gh-new</code> コマンドを打てばあとは全自動でローカルレポジトリとの同期まで完了する。</p>
<p>cloneも同様に、作成したローカルリポジトリ用のデレクトリで <code>gh-clone</code> を打つだけ。</p>
]]></content>
        </item>
        
        <item>
            <title>Debian11 (bullseye)に Linuxbrewを install</title>
            <link>http://minorugh.github.io/posts/linuxbrew/</link>
            <pubDate>Thu, 25 Nov 2021 10:16:28 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/linuxbrew/</guid>
            <description>GitHub CLIツール ghをインストールするのに brewの方が簡単だったので Debianに Linuxbrewをインストールすることにした。 Mac時代</description>
            <content type="html"><![CDATA[<p>GitHub CLIツール ghをインストールするのに brewの方が簡単だったので Debianに Linuxbrewをインストールすることにした。
Mac時代に慣れ親しんだ Homebrewが Linuxからも使えるのは感動でした。</p>
<h2 id="install">install</h2>
<p>brewインストールの前に依存ツールをダウンロードしておきます。私の場合は、既にインストール済みだったので省略しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% sudo apt install build-essential curl file git
</code></pre></div><p>つづいて公式にあるように下記でインストールできます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% sh -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><h2 id="warning-at-install">warning at install</h2>
<p>install時に <code>Warning: /home/linuxbrew/.linuxbrew/bin is not in your PATH.</code> パスがないと怒られますので、<code>.bashrc</code> or <code>.zshrc</code> に PATHを追加します。私の場合は、zshなので下記のようになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% echo <span style="color:#e6db74">&#39;export PATH=&#34;/home/linuxbrew/.linuxbrew/bin:$PATH&#34;&#39;</span> &gt;&gt;  ~/.zshrc
% source ~/.zshrc
</code></pre></div><h2 id="confirmation-after-install">Confirmation after install</h2>
<p>brewが正常に installされたことを確認しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% which brew
/home/linuxbrew/.linuxbrew/bin/brew
</code></pre></div><p>PATHが通っていることが確認できました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% brew help
Example usage:
  brew search TEXT|/REGEX/
  brew info <span style="color:#f92672">[</span>FORMULA|CASK...<span style="color:#f92672">]</span>
  brew install FORMULA|CASK...
  brew update
  brew upgrade <span style="color:#f92672">[</span>FORMULA|CASK...<span style="color:#f92672">]</span>
  brew uninstall FORMULA|CASK...
  brew list <span style="color:#f92672">[</span>FORMULA|CASK...<span style="color:#f92672">]</span>

Troubleshooting:
  brew config
  brew doctor
  brew install --verbose --debug FORMULA|CASK

Contributing:
  brew create URL <span style="color:#f92672">[</span>--no-fetch<span style="color:#f92672">]</span>
  brew edit <span style="color:#f92672">[</span>FORMULA|CASK...<span style="color:#f92672">]</span>

Further help:
  brew commands
  brew help <span style="color:#f92672">[</span>COMMAND<span style="color:#f92672">]</span>
  man brew
  https://docs.brew.sh
</code></pre></div><p>helpコマンドが表示されたら正常です。つづいて update確認しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% brew update
Already up-to-date.
</code></pre></div><p>最後に <code>brew doctor</code> を実行します。</p>
<p>私の場合は、あれこれと Warningが出たので、指示されたものを順次削除しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% brew doctor
Your system is ready to brew.
</code></pre></div><p>ここまでこぎつければ Linuxbrewのインストールは完了です。</p>
]]></content>
        </item>
        
        <item>
            <title>pangu-spacing.el : 全角と半角の間に自動でスペースを入れる</title>
            <link>http://minorugh.github.io/posts/pangu-spacing/</link>
            <pubDate>Thu, 18 Nov 2021 08:41:01 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/pangu-spacing/</guid>
            <description>pangu-spacing.el : 全角と半角の間に自動でスペースを入れる新実装 上記の Tipsを参考にして、markdown-modeに導入してみた。 日本語においては、いわ</description>
            <content type="html"><![CDATA[<ul>
<li><a href="http://emacs.rubikitch.com/pangu-spacing/">pangu-spacing.el : 全角と半角の間に自動でスペースを入れる新実装</a></li>
</ul>
<p>上記の Tipsを参考にして、markdown-modeに導入してみた。</p>
<p>日本語においては、いわゆる半角文字と全角文字の間にスペースを入れた方が見やすいと言われていて、<code>pangu-spacing.el</code> はそれを自動で行ってくれるというものです。</p>
<p>ただ、「Google日本語入力」などと書くときに「Google 日本語入力」ではおかしくなるし、なんとなく間延びした感じになるのが好みではなかったので
アルファベット文字列の右端だけにスペースが入るようにカスタマイズした。</p>
<p><code>pangu-spacing.el</code>のコードを見るとデフォルトでは、正規表現で [a-zA-Z0-9] なっているので半角数字の場合にも同様に処理されてしまう。
数字にも半角スペースが有効になると、[2021 年 11 月 16 日] という感じになるので、日付表示のケースでは面白くない。
そこで、正規表現の記述を [a-zA-Z] に変更して半角数字は対象外としアルファベットのみが pangu-spacingの対象となるようにしている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(leaf pangu-spacing
  :ensure <span style="color:#66d9ef">t</span>
  :hook ((markdown-mode-hook text-mode-hook) <span style="color:#f92672">.</span> pangu-spacing-mode)
  :config
  (setq pangu-spacing-real-insert-separtor <span style="color:#66d9ef">t</span>)
  (setq pangu-spacing-include-regexp
		(rx (or (and (or (group-n <span style="color:#ae81ff">3</span> (any <span style="color:#e6db74">&#34;。，！？；：「」（）、&#34;</span>))
						 (group-n <span style="color:#ae81ff">1</span> (or (category japanese))))))
			(group-n <span style="color:#ae81ff">2</span> (in <span style="color:#e6db74">&#34;a-zA-Z&#34;</span>)))))
</code></pre></div><p>上記の例では、markdown-mode と text-modeに導入している。</p>
]]></content>
        </item>
        
        <item>
            <title>ac-mozc : モードレス日本語入力を試してみた</title>
            <link>http://minorugh.github.io/posts/ac-mozc/</link>
            <pubDate>Sat, 13 Nov 2021 20:20:44 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/ac-mozc/</guid>
            <description>随分前に一度試してみたが、mozc.elと併用する時に若干変換ルールに違いがあって使いにくく、そのうち使わなくなっていた。 その後、elisp</description>
            <content type="html"><![CDATA[<p>随分前に一度試してみたが、mozc.elと併用する時に若干変換ルールに違いがあって使いにくく、そのうち使わなくなっていた。
その後、elispの勉強も進み Emacsのスキルも多少向上したので、再度工夫して試してみることにした。</p>
<p>mozc.el導入時には、ローマ字テーブルに azik を使っていたが、これが曲者だということに最近気づいた。結局、標準の mozc.elの romotableを使って、azikのうち手慣れたものだけ追加して試してみたところ、快適に使えるようになったので備忘録に残しておくことにした。</p>
<p>アルファベットと日本語との間に半角スペースを空けるかどうかについては諸論あるけれど、見やすさを優先した。</p>
<p>pangu-spacing.elというパッケージを使うときは自動的に処理してくれるのでいのだけれど、数字にも反応するので日付表示のときはどうにも間の抜けた感じになる。
なので数字には対応させないようにした。</p>
<h2 id="使ってみた感想">使ってみた感想</h2>
<p>スムーズに変換できているときにはとても効率がいいのだけれど、一度ミスタイプになったものを修正しようとするとおかしな変換になるときがあり、
修正するときは mozc-modeにして対応するということが多い。結局、どちらが快適という点はよくわからない。</p>
<p>変換スピードがもう少し改善されたら更に使いやすくなると思うので、誰か companyと連携した ac-mozc作ってくれないかしらと思う。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"> <span style="color:#75715e">;; ac-mozc with extended auto-complete</span>
  (leaf auto-complete
	:ensure <span style="color:#66d9ef">t</span>
	:bind (:ac-completing-map
		   (<span style="color:#e6db74">&#34;&lt;tab&gt;&#34;</span> <span style="color:#f92672">.</span> ac-next)
		   (<span style="color:#e6db74">&#34;&lt;backtab&gt;&#34;</span> <span style="color:#f92672">.</span> ac-previous))
	:hook ((text-mode-hook markdown-mode-hook) <span style="color:#f92672">.</span> auto-complete-mode)
	:custom (ac-comphist-file <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;~/.emacs.d/tmp/ac-comphist.dat&#34;</span>)
	:config
	(leaf ac-mozc
	  :ensure <span style="color:#66d9ef">t</span>
	  :hook ((text-mode-hook markdown-mode-hook) <span style="color:#f92672">.</span> my-ac-mozc-setup)
	  :config
	  (add-to-list <span style="color:#e6db74">&#39;ac-modes</span> <span style="color:#f92672">&#39;</span>(text-mode <span style="color:#f92672">.</span> markdown-mode))
	  (bind-key* <span style="color:#e6db74">&#34;&lt;henkan&gt;&#34;</span> <span style="color:#e6db74">&#39;ac-complete-mozc</span> ac-mode-map)
	  (defun my-ac-mozc-setup ()
		(setq ac-sources
			  <span style="color:#f92672">&#39;</span>(ac-source-mozc ac-source-ascii-words-in-same-mode-buffers))
		(<span style="color:#a6e22e">set</span> (<span style="color:#a6e22e">make-local-variable</span> <span style="color:#e6db74">&#39;ac-auto-show-menu</span>) <span style="color:#ae81ff">0.2</span>)))
	<span style="color:#75715e">;; auto add space between Japanese and English characters.</span>
	(leaf pangu-spacing
	  :ensure <span style="color:#66d9ef">t</span>
	  :hook (markdown-mode-hook <span style="color:#f92672">.</span> pangu-spacing-mode)
	  :custom (pangu-spacing-real-insert-separtor <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>)))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Debian でコンソール画面の解像度を変更する</title>
            <link>http://minorugh.github.io/posts/debian-consol/</link>
            <pubDate>Sun, 26 Sep 2021 07:24:50 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/debian-consol/</guid>
            <description>高解像度の pcで Debianを使うと GRUBの起動画面がとても小さくて見にくいので解像度を 800x600に変更した。 # /etc/default/grub # コメントアウトを外</description>
            <content type="html"><![CDATA[<p>高解像度の pcで Debianを使うと GRUBの起動画面がとても小さくて見にくいので解像度を 800x600に変更した。</p>
<pre><code># /etc/default/grub
</code></pre><pre><code># コメントアウトを外して好みの解像度に
GRUB_GFXMODE=800x600
# こちらは追記
GRUB_GFXPAYLOAD_LINUX=keep
</code></pre><pre><code># update-grub2
# reboot
</code></pre><h2 id="参考">参考</h2>
<p><a href="https://bre.is/bJdJJa6E">Debian でコンソール画面の解像度を変更する</a></p>
]]></content>
        </item>
        
        <item>
            <title>Emacs : Open Last Closed Buffer</title>
            <link>http://minorugh.github.io/posts/open-last-closed-buffer/</link>
            <pubDate>Fri, 17 Sep 2021 14:24:33 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/open-last-closed-buffer/</guid>
            <description>darkroom-modeを使うときは、Syntax Highlightが邪魔なので、どのモードのファイルであっても強制的に text-mode</description>
            <content type="html"><![CDATA[<p>darkroom-modeを使うときは、Syntax Highlightが邪魔なので、どのモードのファイルであっても強制的に text-modeで開くように設定している。
当然ながら darkuroom-modeから抜けるときにはもとのモードに戻す必要がある。</p>
<p>もとの major-modeを記憶させておいて restoreすればいいのだが、
auto-save-buffers-enhanced で自動保存しているので、回りくどいことをしなくても一度 Kill-bufferして再び読み込めばよい。</p>
<p>いろいろググって下記の Tipsを見つけた。</p>
<ul>
<li><a href="https://getpocket.com/read/1325332326">Emacs: Open Last Closed File</a></li>
</ul>
<p>原案では、多機能で長いコードになっていましたが、私には必要のない部分は削って dietしました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Open last closed file</span>
(defvar my:recently-closed-buffers <span style="color:#66d9ef">nil</span>)

(defun my:close-current-buffer ()
  <span style="color:#e6db74">&#34;Close the current buffer.&#34;</span>
  (interactive)
  (setq my:recently-closed-buffers
		(<span style="color:#a6e22e">cons</span> (<span style="color:#a6e22e">cons</span> (<span style="color:#a6e22e">buffer-name</span>) (<span style="color:#a6e22e">buffer-file-name</span>)) my:recently-closed-buffers))
  (<span style="color:#a6e22e">kill-buffer</span> (<span style="color:#a6e22e">current-buffer</span>)))

(defun my:open-last-closed ()
  <span style="color:#e6db74">&#34;Open the last closed file.&#34;</span>
  (interactive)
  (find-file (<span style="color:#a6e22e">cdr</span> (pop my:recently-closed-buffers))))
</code></pre></div><p>ようは、<code>kill-buffer</code> の代りに <code>my:close-current-buffer</code> を使い、再読込したいときに <code>my:open-last-closed</code> すればよいことになる。</p>
<p>darkroom-modeの in/out 設定は以下のようになった。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(leaf darkroom
  :ensure <span style="color:#66d9ef">t</span>
  :bind (<span style="color:#e6db74">&#34;&lt;f12&gt;&#34;</span> <span style="color:#f92672">.</span> my:darkroom-in)
  :config
  (bind-key <span style="color:#e6db74">&#34;&lt;f12&gt;&#34;</span> <span style="color:#e6db74">&#39;my:darkroom-out</span> darkroom-mode-map)

  (defun my:darkroom-in ()
	(interactive)
	(display-line-numbers-mode <span style="color:#ae81ff">0</span>)
	(setq line-spacing <span style="color:#ae81ff">0.4</span>)
	(darkroom-tentative-mode <span style="color:#ae81ff">1</span>))


  (defun my:darkroom-out ()
	(interactive)
	(darkroom-tentative-mode <span style="color:#ae81ff">0</span>)
	(setq line-spacing <span style="color:#ae81ff">0.1</span>)
	(display-line-numbers-mode <span style="color:#ae81ff">1</span>)
	(my:close-current-buffer)
	(my:open-last-closed)))
</code></pre></div><p>つまり、darkroom-outのとき、一度 bufferを閉じて（kill-buffer）、再度読み込むという処理をしているわけである。</p>
]]></content>
        </item>
        
        <item>
            <title>Emacs : 作業目的別にテーマを切り替えて使う</title>
            <link>http://minorugh.github.io/posts/cycle-theme/</link>
            <pubDate>Thu, 16 Sep 2021 14:31:40 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/cycle-theme/</guid>
            <description>Melpaから package installできる Emacsテーマは、たくさんあってお好みで選べるようになりとても便利なのですが、一つに絞り込むのは難しい</description>
            <content type="html"><![CDATA[<p>Melpaから package installできる Emacsテーマは、たくさんあってお好みで選べるようになりとても便利なのですが、一つに絞り込むのは難しいですね。</p>
<p>私の場合、作業目的に応じて３つのテーマを切り替えて使えるようにしています。</p>
<ul>
<li><a href="https://peach-melpa.org/themes">Peach Melpa</a></li>
</ul>
<h2 id="1-iceberg-themes">1. iceberg-themes</h2>
<p>普段使いで目に優しいテーマ：iceberg-theme（自作テーマ）</p>
<p>私の Emacsは、執筆むけに使うことが多く、日本語の文章作成、編集が大半ですので、目に優しいこのテーマを愛用しています。</p>
<p>もともとは、Vim向けに開発された、目に優しいダークブルーの配色です。</p>
<ul>
<li><a href="https://cocopon.github.io/iceberg.vim/">iceberg.vim</a></li>
</ul>
<p>Emacs向けに移植されたものは、幾つか存在しますが、お好みにカスタマイズしたかったので自作しました。GitHubに置いてます。</p>
<ul>
<li><a href="https://github.com/minorugh/iceberg.emacs">minorugh/iceberg.emacs</a></li>
</ul>
<p><img src="https://live.staticflickr.com/65535/51481200845_5052d93c3a_b.jpg" alt="Alt Text"></p>
<h2 id="2-doom-doracuratheme">2. doom-doracura.theme</h2>
<p>コード編集するときのテーマ：doom-dracura.theme</p>
<p>ごくたまに Emacs-Lispや Perlスクリプトなどを編集することもあるので、そのときは視認性に優れていて多くの Emacserの間でも普及しているこのテーマを愛用しています。</p>
<p><img src="https://live.staticflickr.com/65535/51480502098_1b348ba32e_b.jpg" alt="Alt Text"></p>
<h2 id="3-doom-solarized-lighttheme">3. doom-solarized-light.theme</h2>
<p>執筆モードでリラックスできるテーマ：doom-solarized-light.theme</p>
<p>Darkroom-mode で、短い文章を書いたり、エッセイの下書き、編集などをするときに珈琲を飲みながらゆったりした気分で文字書きできるので愛用しています。メニューバーもモードライも一切なしの Fullscreen画面は白紙の上になぐり書きしているかのようで快適です。</p>
<p>別途 installしてもよかったのですが doom-themesの中に solarized-light.themeもあったので、そちらを使っています。</p>
<p><img src="https://live.staticflickr.com/65535/51481235075_cc52b356be_b.jpg" alt="Alt Text"></p>
<h2 id="4-テーマを切り替えて使うための設定">4. テーマを切り替えて使うための設定</h2>
<p>同様の趣旨で作られたものが Melpaでも見つかったのですが、私の場合うまく作動しなかったので独自に関数を作りました。</p>
<p>というより下記記事からのパクリです。</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23793288/cycle-custom-themes-w-emacs-24">Cycle Custom Themes</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(leaf doom-themes
  :ensure <span style="color:#66d9ef">t</span>
  :init
  (leaf iceberg.emacs :el-get minorugh/iceberg.emacs)
  (add-to-list <span style="color:#e6db74">&#39;custom-theme-load-path</span> <span style="color:#e6db74">&#34;~/.emacs.d/el-get/iceberg.emacs/&#34;</span>))

(leaf cycle-custom-theme
  :config
  (setq my:themes (<span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#39;iceberg</span> <span style="color:#e6db74">&#39;doom-solarized-light</span> <span style="color:#e6db74">&#39;doom-dracula</span>))
  (setq curr-theme my:themes)

  (defun cycle-custom-theme ()
	<span style="color:#e6db74">&#34;Switch themes to cycle.&#34;</span>
	(interactive)
	(disable-theme (<span style="color:#a6e22e">car</span> curr-theme))
	(setq curr-theme (<span style="color:#a6e22e">cdr</span> curr-theme))
	(if (<span style="color:#a6e22e">null</span> curr-theme) (setq curr-theme my:themes))
	(load-theme (<span style="color:#a6e22e">car</span> curr-theme) <span style="color:#66d9ef">t</span>)
	(<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;%s&#34;</span> (<span style="color:#a6e22e">car</span> curr-theme)))

  (bind-key <span style="color:#e6db74">&#34;&lt;f11&gt;&#34;</span> <span style="color:#e6db74">&#39;cycle-custom-theme</span>)
  (setq curr-theme my:themes)
  (load-theme (<span style="color:#a6e22e">car</span> curr-theme) <span style="color:#66d9ef">t</span>))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Downloadした CGI Scriptを Severへ Uploadするときは改行コードを修正する必要あり</title>
            <link>http://minorugh.github.io/posts/line-feed-code/</link>
            <pubDate>Sun, 12 Sep 2021 21:00:38 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/line-feed-code/</guid>
            <description>Windowsから Linuxに移行してから Webで Downloadした CGIスクリプトをそのまま FTPアプリでアップロードすると必ずエラーに</description>
            <content type="html"><![CDATA[<p>Windowsから Linuxに移行してから Webで Downloadした CGIスクリプトをそのまま FTPアプリでアップロードすると必ずエラーになる。
試行錯誤して原因は、主要な CGIスクリプトの改行コードが CRLFとなっていたことでした。</p>
<p>Linux環境でダウンロードして解凍するというプロセスによってそうなるのかどうかは解明できていませんが、これを LFに変えてやることで問題なくスクリプトが動作しました。</p>
<p>いつも何も考えずにアップレードして「あれ！」となるのでしっかり備忘録に記しておこうと考えた次第。そういえば、Mac環境のときもそうだった気がする。UNIX系の症状かも知れないのでもう少しググって調べてみよう…</p>
<p>たくさんファイルがある時は、いちいち Terminalを開くのは面倒なので Emacsでやっている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">  (defun convert-encode-to-utf8 ()
	<span style="color:#e6db74">&#34;Convert character code of the file to utf-8.&#34;</span>
	(interactive)
	(let ((file (<span style="color:#a6e22e">buffer-file-name</span>)))
	  (if (not (use-region-p))
		  (compile (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;nkf -w -Lu --overwrite &#34;</span> file)))))

  (defun convert-encode-to-sjis ()
	<span style="color:#e6db74">&#34;Convert character code of the file to utf-8.&#34;</span>
	(interactive)
	(let ((file (<span style="color:#a6e22e">buffer-file-name</span>)))
	  (if (not (use-region-p))
		  (compile (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;nkf -s -Lu --overwrite &#34;</span> file)))))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>iframeに異なるドメイン（クロスドメイン）のコンテンツを読み込んで高さを自動調節する方法</title>
            <link>http://minorugh.github.io/posts/iframe/</link>
            <pubDate>Fri, 10 Sep 2021 14:11:41 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/iframe/</guid>
            <description>wordpressでサイトを構築したときに掲示板をつけることになりました。 bbpressをはじめ何種類かのプラグインも試しましたが、不要な機</description>
            <content type="html"><![CDATA[<p>wordpressでサイトを構築したときに掲示板をつけることになりました。
bbpressをはじめ何種類かのプラグインも試しましたが、不要な機能が多く使いづらいので、別サイトで簡易なcgi掲示板を構築してiframeで埋め込むことにしました。</p>
<p>wordpress側の負担を減らすためもあり、表示部がHTMLでサーバに負荷をかけず表示の軽い掲示板cgi<a href="https://www.kent-web.com/bbs/sunbbs.html">（kent-webの SUN BOARD）</a> を選びました。</p>
<p>表示幅を最大にしたり、スクロールバーを非表示にしたりというのは簡単にできたのですが、「高さを自動調整する」という課題に躓き、Googleで調べてTipsを見つけました。</p>
<blockquote>
<p>iframe（親）に異なるドメインのページ（子）を読み込んで、親フレームにスクロールが出ないよう、iframeの高さを子ページの高さに自動調節する</p>
</blockquote>
<ul>
<li><a href="http://tomoosuzuki.blogspot.com/2016/08/iframe.html?utm_source=pocket_mylist">iframeに異なるドメイン（クロスドメイン）のコンテンツを読み込んで高さを自動調節する方法</a></li>
</ul>
<p>親ページと子ページにそれぞれ下記をコピペするだけでうまく行きました。感謝！</p>
<h2 id="wordpress-親-側の設定">wordpress (親) 側の設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
&lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">title</span>&gt;親&lt;/<span style="color:#f92672">title</span>&gt;
    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js/jquery.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
    &lt;<span style="color:#f92672">script</span>&gt;
        window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;message&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">iframe</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#fugapage&#34;</span>);
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">eventName</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">data</span>[<span style="color:#ae81ff">0</span>];
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">data</span>[<span style="color:#ae81ff">1</span>];
        <span style="color:#66d9ef">switch</span>(<span style="color:#a6e22e">eventName</span>) {
            <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;setHeight&#39;</span><span style="color:#f92672">:</span>
                <span style="color:#a6e22e">iframe</span>.<span style="color:#a6e22e">height</span>(<span style="color:#a6e22e">data</span>);
                <span style="color:#66d9ef">break</span>;
            }
        }, <span style="color:#66d9ef">false</span>);
    &lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">body</span>&gt;
    &lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fugapage&#34;</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://fuga.com/&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;100%&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;auto&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#a6e22e">frameborder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#a6e22e">scrolling</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;no&#34;</span>&gt;&lt;/<span style="color:#f92672">frame</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;

</code></pre></div><h2 id="埋め込みたい別ドメインのページ-子">埋め込みたい別ドメインのページ （子）</h2>
<p>fuga.com</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
    &lt;<span style="color:#f92672">head</span>&gt;
        &lt;<span style="color:#f92672">title</span>&gt;子&lt;/<span style="color:#f92672">title</span>&gt;
        &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>&gt;
        window.<span style="color:#a6e22e">onload</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#34;html&#34;</span>)[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">scrollHeight</span>;
            window.<span style="color:#a6e22e">parent</span>.<span style="color:#a6e22e">postMessage</span>([<span style="color:#e6db74">&#34;setHeight&#34;</span>, <span style="color:#a6e22e">height</span>], <span style="color:#e6db74">&#34;*&#34;</span>);
        }
        &lt;/<span style="color:#f92672">script</span>&gt;
    &lt;/<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">body</span>&gt;
    ・・・
    &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Gist on Emacs</title>
            <link>http://minorugh.github.io/posts/gist-on-emacs/</link>
            <pubDate>Wed, 01 Sep 2021 12:38:38 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/gist-on-emacs/</guid>
            <description>みなさん、Emacsで Gist 使ってますか？ 私も気軽に使っているのですが GitHub Gist の Webページを開いて直接コード書き込んだりコピペするというのは何げに</description>
            <content type="html"><![CDATA[<h2 id="みなさんemacsで-gist-使ってますか">みなさん、Emacsで Gist 使ってますか？</h2>
<p>私も気軽に使っているのですが <a href="https://note.com/ojk/n/nc18e9a15af2a">GitHub Gist</a> の Webページを開いて直接コード書き込んだりコピペするというのは何げに中途半端ですね。</p>
<p>ローカルに cloneして git管理するという Tipsも見かけましたが、そもそもバージョン管理がしたいのであればGistにこだわらず、素直にリポジトリで管理すれば済むことです。</p>
<h2 id="何がしたいのか整理してみる">何がしたいのか整理してみる</h2>
<ul>
<li>Emacsで開いている Buffer（or region）をそのまま即 gistしたい。</li>
<li>gistに成功したら、結果をブラウザで開いてほしい。</li>
<li>自分の GitHub Gist ページを一発で開きたい。</li>
</ul>
<p>試行錯誤しましたが、<code>yagist.el</code> を package installすれば簡単だと気づきました。
<code>yagist.el</code> には、いろいろ機能があるのですが、私の場合は必要な関数だけ利用しています。</p>
<ul>
<li><a href="https://github.com/mhayashi1120/yagist.el/blob/master/README.md">https://github.com/mhayashi1120/yagist.el/blob/master/README.md</a></li>
</ul>
<h2 id="ターミナルで-gist-コマンドが扱えること">ターミナルで gist コマンドが扱えること</h2>
<p>このTipsは、ターミナルからコマンドラインで gist が扱えるように設定済であることが前提です。</p>
<ul>
<li><a href="https://qiita.com/minoruGH/items/6a81af6e35a8ba896a02">コマンドラインでgistを操作できる &ldquo;gist&rdquo;</a></li>
</ul>
<p>ターミナルで <code>gist -help</code> を打つといろいろオプションパラメターがわかります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Usage: gist <span style="color:#f92672">[</span>-o|-c|-e<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-p<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-s<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-R<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-d DESC<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-u URL<span style="color:#f92672">]</span>
                          <span style="color:#f92672">[</span>--skip-empty<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-P<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-f NAME|-t EXT<span style="color:#f92672">]</span>* FILE*
       gist --login
       gist <span style="color:#f92672">[</span>-l|-r<span style="color:#f92672">]</span>

        --login                      Authenticate gist on this computer.
    -f, --filename <span style="color:#f92672">[</span>NAME.EXTENSION<span style="color:#f92672">]</span>  Sets the filename and syntax type.
    -t, --type <span style="color:#f92672">[</span>EXTENSION<span style="color:#f92672">]</span>           Sets the file extension and syntax type.
    -p, --private                    Makes your gist private.
        --no-private
    -d, --description DESCRIPTION    Adds a description to your gist.
    -s, --shorten                    Shorten the gist URL using git.io.
    -u, --update <span style="color:#f92672">[</span> URL | ID <span style="color:#f92672">]</span>        Update an existing gist.
    -c, --copy                       Copy the resulting URL to the clipboard
    -e, --embed                      Copy the embed code <span style="color:#66d9ef">for</span> the gist to the clipboard
    -o, --open                       Open the resulting URL in a browser
        --no-open
        --skip-empty                 Skip gisting empty files
    -P, --paste                      Paste from the clipboard to gist
    -R, --raw                        Display raw URL of the new gist
    -l, --list <span style="color:#f92672">[</span>USER<span style="color:#f92672">]</span>                List all gists <span style="color:#66d9ef">for</span> user
    -r, --read ID <span style="color:#f92672">[</span>FILENAME<span style="color:#f92672">]</span>         Read a gist and print out the contents
        --delete <span style="color:#f92672">[</span> URL | ID <span style="color:#f92672">]</span>        Delete a gist
    -h, --help                       Show this message.
    -v, --version                    Print the version.
</code></pre></div><h2 id="emacsの設定">Emacsの設定</h2>
<h3 id="1-yagist-region-or-buffer">1. yagist-region-or-buffer</h3>
<p>名前の通り Emacsで開いている Buffer（or region）を POSTしてくれます。</p>
<h3 id="2-open-gist-web-page">2. open-gist-web-page</h3>
<p>プラウザで自分のGistページを開くための設定です。<!-- raw HTML omitted --> に自分のユーザー名をいれます。</p>
<h3 id="3-open-lepton">3. open-lepton</h3>
<p>クライアントアプリ Leptonを開くための設定です。</p>
<h3 id="4-initel-の設定">4. init.el の設定</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(leaf yagist
  :ensure <span style="color:#66d9ef">t</span>
  :bind ((<span style="color:#e6db74">&#34;C-c y&#34;</span> <span style="color:#f92672">.</span> yagist-region-or-buffer)
         (<span style="color:#e6db74">&#34;C-c g&#34;</span> <span style="color:#f92672">.</span> open-gist-web-page)
         (<span style="color:#e6db74">&#34;C-c l&#34;</span> <span style="color:#f92672">.</span> open-lepton))
  :config
  <span style="color:#75715e">;; automatically use `browse-url&#39; to view gists after they&#39;reposted.</span>
  (setq yagist-view-gist <span style="color:#66d9ef">t</span>)

  (defun open-gist-web-page ()
    <span style="color:#e6db74">&#34;Open GitHub Gist page with chrome.&#34;</span>
    (interactive)
    (browse-url <span style="color:#e6db74">&#34;https://gist.github.com/&lt;gist-user&gt;&#34;</span>))

  (defun open-lepton ()
	<span style="color:#e6db74">&#34;Open keepassxc withe auto passwd input.&#34;</span>
	(interactive)
	(compile <span style="color:#e6db74">&#34;lepton&#34;</span>)
	(delete-other-windows)))
</code></pre></div><h2 id="クライアントアプリの紹介">クライアントアプリの紹介</h2>
<p>ローカルでビジュアルにGistを管理したいという方には、マルチプラートホームで利用可能な <a href="https://github.com/hackjutsu/Lepton">Lepton</a> というクライアントアプリがお薦めです。</p>
<p>WEBページよりは見やすいですし、編集、削除も可能です。New fileをコピペして投稿することもできます。</p>
<p>ただ新規POSTは、上述した <code>yagist-buffer-or-region</code> の方が遥かに便利です。</p>
<ul>
<li><a href="https://github.com/hackjutsu/Lepton#readme">https://github.com/hackjutsu/Lepton#readme</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>GitHub Pagesにサイトを開設</title>
            <link>http://minorugh.github.io/posts/jekyll-rtd-theme/</link>
            <pubDate>Sun, 29 Aug 2021 07:31:24 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/jekyll-rtd-theme/</guid>
            <description>Emacsの設定に関する情報を備忘録としてまとめたので GitHub Pagesに置くことにした。 GitHub Pagesの場合は Jekyllプロジェクトを pushす</description>
            <content type="html"><![CDATA[<p>Emacsの設定に関する情報を備忘録としてまとめたので GitHub Pagesに置くことにした。</p>
<p>GitHub Pagesの場合は Jekyllプロジェクトを pushするだけで HTMLに変換してくれるらしい…ということなので試してみたらすんなり成功した。</p>
<ul>
<li><a href="https://minorugh.github.io/">minorugh.github.io</a></li>
</ul>
<p><img src="https://live.staticflickr.com/65535/51408876556_2d6460a776_b.jpg" alt="Alt Text"></p>
<p>jekyllには、sphinx_rtd_theme に似た <a href="https://jamstackthemes.dev/theme/jekyll-rtd-theme/">jekyll-rtd-theme</a> があるのでこれを採用した。</p>
<h2 id="deplpy環境">Deplpy環境</h2>
<p>この themeは特殊なのか、設定がまちがっているのかよくわからなかったが、ローカルでのプレビューはエラーが出てうまく行かなかった。</p>
<p>結局、git pushするだけになったので <code>deploy.sh</code> と <code>makefile</code> を書いて自動化しました。deployに成功すると自動的にプラウザーで GitHub Pqgesを開くというものです。markdownファイルの編集が終わったら <code>make k</code> するだけで自動処理します。</p>
<h2 id="deploysh">deploy.sh</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>git checkout master
git add -A
git commit -m <span style="color:#e6db74">&#34;Update blog&#34;</span>
git push origin master
</code></pre></div><h2 id="makefile">makefile</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">a.out</span><span style="color:#f92672">:</span> github

<span style="color:#a6e22e">github</span><span style="color:#f92672">:</span>
	~/src/github.com/minorugh/minorugh.github.io/deploy.sh
	chromium https://minorugh.github.io
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Debian 10(buster) を 11(bullseye)へ更新</title>
            <link>http://minorugh.github.io/posts/debian-update-10-to-11/</link>
            <pubDate>Mon, 23 Aug 2021 08:21:40 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/debian-update-10-to-11/</guid>
            <description>Debian 11.0 was released on August 14th, 2021. The release included many major changes, described in our press release and the Release Notes. ということで、取り急ぎ更新してみました。 参考にしたのは、下記のTipsです。というよりそのまま</description>
            <content type="html"><![CDATA[<pre><code>Debian 11.0 was released on August 14th, 2021. 
The release included many major changes, described in our press release and the Release Notes.
</code></pre><p>ということで、取り急ぎ更新してみました。</p>
<p>参考にしたのは、下記のTipsです。というよりそのままのコピーです(^^)</p>
<ul>
<li><a href="https://izaten.fc2.net/blog-entry-325.html?utm_source=pocket_mylist">Debian 10(buster)から11(bullseye)への更新メモ</a></li>
</ul>
<h2 id="sourceslistの書き換え">sources.listの書き換え</h2>
<ul>
<li>アップデートに先立って現状のbusterを最新版に更新（update/upgrade）しておきます。</li>
<li>次に、/etc/apt/sources.list を下記のとうりに書き換えます。</li>
</ul>
<pre><code>deb http://ftp.jp.debian.org/debian/ bullseye main contrib non-free
deb-src http://ftp.jp.debian.org/debian/ bullseye main contrib non-free

deb http://ftp.jp.debian.org/debian/ bullseye-updates main contrib non-free
deb-src http://ftp.jp.debian.org/debian/ bullseye-updates main contrib non-free

deb http://security.debian.org/ bullseye-security main
deb-src http://security.debian.org/ bullseye-security main
</code></pre><p>要は、buster の部分が bullseye に変わるだけです。</p>
<h2 id="更新">更新</h2>
<ul>
<li>まずは <code># apt update &amp;&amp; apt upgrade</code> を実行して最小限のアップグレードを行ったあと、問題がないことを確認します。</li>
<li>その後 <code># apt full-upgrade</code> または <code># apt dist-upgrade</code> を実行して最後の更新をします。</li>
</ul>
<p>途中、いろいろ問い合わせがあるので注意して選択します。私の場合、<code>sudoers</code> ファイルの扱いについて問い合わせ確認があったので、&ldquo;既存のまま残す&rdquo; を選択しました。</p>
<p>処理時間は、WiFi環境によって異なると思いますが、私の場合(5G環境)でおおよそ30分ほどでした。</p>
<h2 id="確認">確認</h2>
<p>Debianのバージョンとカーネルのバージョン確認しておきます。</p>
<h3 id="debianのバージョン">Debianのバージョン</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cat /etc/debian_version
11.0
</code></pre></div><h3 id="カーネルのバージョン">カーネルのバージョン</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ uname -a
Linux e590 5.10.0-8-amd64 <span style="color:#75715e">#1 SMP Debian 5.10.46-4 (2021-08-03) x86_64 GNU/Linux</span>
</code></pre></div><p>※ 上記の e590 というのは、私のマシン名です。</p>
<h2 id="スクリーンショット">スクリーンショット</h2>
<p>Debian 11 xface4 のデスクトップ画面のスクショです。だいぶん垢抜けしてきました(^^)</p>
<p><img src="https://live.staticflickr.com/65535/51395292747_c52f2dc3e8_b.jpg" alt="Alt Text"></p>
]]></content>
        </item>
        
        <item>
            <title>Emacs27.2をInstall</title>
            <link>http://minorugh.github.io/posts/install-emacs27.2/</link>
            <pubDate>Sat, 21 Aug 2021 17:34:15 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/install-emacs27.2/</guid>
            <description>Emacs27.2の安定版がリリースされたのでInstallした。 私の場合は、makefileを下記のように修正してmakeコマンドを実行す</description>
            <content type="html"><![CDATA[<p>Emacs27.2の安定版がリリースされたのでInstallした。</p>
<p>私の場合は、makefileを下記のように修正してmakeコマンドを実行するだけで簡単にInstallできるようにしている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#75715e">## makefile
</span><span style="color:#75715e"></span><span style="color:#a6e22e">emacs-latest</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Install latest version of emacs
</span><span style="color:#75715e"></span>	cd <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/src;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	wget https://ftp.gnu.org/pub/gnu/emacs/emacs-27.2.tar.gz;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	tar -xzvf emacs-27.2.tar.gz;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	cd emacs-27.2;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	./configure;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	make;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	sudo make install;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ make emacs-latest

</code></pre></div><h2 id="スクリーンショット">スクリーンショット</h2>
<p>Emacs27.2を起動し、Dashboard画面を表示させたスクショです。</p>
<p><img src="https://live.staticflickr.com/65535/51396304028_74698110f6_b.jpg" alt="Alt Text"></p>
<ul>
<li>Debianも10（buster）から11（bullseye）になったみたいなのでアップデートする予定。</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>ゆっくりと終活 : カメラ機材を処分</title>
            <link>http://minorugh.github.io/posts/end-of-life/</link>
            <pubDate>Wed, 12 May 2021 10:37:15 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/end-of-life/</guid>
            <description>コロナ禍が原因というわけでもないが、趣味や活動の形も変わってきたのでまじめに断捨離に取り組むことにした。 特別深刻な話ではなく、楽しみながら…</description>
            <content type="html"><![CDATA[<p>コロナ禍が原因というわけでもないが、趣味や活動の形も変わってきたのでまじめに断捨離に取り組むことにした。</p>
<p>特別深刻な話ではなく、楽しみながら…</p>
<p><img src="https://live.staticflickr.com/65535/51172675702_49a4afe6c7_b.jpg" alt="Alt Text"></p>
<h2 id="カメラ機材を処分">カメラ機材を処分</h2>
<p>一時期カメラに凝って、フルサイズの FX機まで手を広げた時期があった。結局、重量級の機材を担いで撮影に出かけるのがだんだん億劫になり、高級機材を手入れしながらただ所有感に浸るというだけの虚しい日々になってしまった。</p>
<p>これでは意味がないと悟って、マイクロフォーサーズへの移行を決断して機材の軽量化を図った。計画を実行に移し、もう一度新たなカメラライフをと考えていた矢先にコロナ禍となり、出かけることのできない毎日にうんざり、そのうちカメラへの意欲も一気に萎えてしまった。</p>
<p>ブログに貼る写真や孫たちの成長記録などは、スマホで十分だと考えてカメラ機材をすべてオークションに出して処分した。投資した額の半分にもならないけれど、多少でも楽しんだ分は月謝、いずれゴミになるくらいなら価値観のあるうちに処分して孫の玩具代になれば十分だと考えた。</p>
<p>手軽なので愛用していた SONYのコンデジ RX100 だけは手元に残した。空き家同然になった防湿庫に忽然と鎮座している。防湿庫も処分したかったけれど大きすぎて宅配では扱えそうにないので諦めたけど、欲しいという人が現れたらあげようと思う。</p>
<p><img src="https://lh3.googleusercontent.com/Q9s-DXyPzCDQp860gPKSRRUu0AZFobEF3P6ugx4hJqO3BUbeHBdRoN0oEQ2rKbdbE9yy70kSFGxDWac7_DVd0ws2tOX8fmEioDAH4oE5WqENLPbQcbAfv44iA9RBgLt5qX8AiDM1mdA=w2400" alt="Alt Text"></p>
]]></content>
        </item>
        
        <item>
            <title>他社SIMで楽天リンクを使えるようにする</title>
            <link>http://minorugh.github.io/posts/pixel5/</link>
            <pubDate>Tue, 04 May 2021 16:01:14 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/pixel5/</guid>
            <description>Pixel3の性能には何一つ不満はなくとても快適だったが、なにもせずに置いているだけでもみるみるバッテリーが減っていくので唯一それがストレス</description>
            <content type="html"><![CDATA[<p>Pixel3の性能には何一つ不満はなくとても快適だったが、なにもせずに置いているだけでもみるみるバッテリーが減っていくので唯一それがストレスだった。Pixel6が発売されるまでは様子を見ようと思っていたのだけれど辛抱できず、pixel5をポチってしまった。</p>
<p><img src="https://live.staticflickr.com/65535/51158000785_199f1a94ec_o.png" alt="Alt Text"></p>
<h2 id="dual-sim-を試す">Dual SIM を試す</h2>
<p>楽天アンリミっとが一年間無料というキャペーンをしていたので早速使っていたが、私の地域ではまだ楽天回線がつながらずパートナー回線になるので使いづらかったので、別途、OCN-ONEを申し込んだ。３GBで税込み990円/月、これまでは、2000円くらいだったので半額以下。ありがたい時代になったものだ。</p>
<p>楽天は、一年間無料の期間にいろいろ試して遊びたかったのでMNPせずに残し、OCNは新しい番号を取得した。pxel5は、Dual SIM対応なんだけれど一つはeSIMなため、OCNをnanoSIMにし、楽天をeSIMに交換してもらった。楽天のSIM変更は無料になったので気軽に試すことができる。</p>
<p>斯くしてあっけなくDual SIM環境が出来上がり、電話とSMSは楽天SIMでつかい、データー回線をOCNのSIMに設定した。</p>
<h2 id="ocn-simはバッテリ消費が大きいという問題">OCN SIMはバッテリ消費が大きい…という問題</h2>
<p>この情報がWEB上で氾濫していたので躊躇していた。原因は諸説あって解決策は見つからなかったが、楽天Casa導入時にお世話になったバイク野郎さんのブログで確かな情報が得られたので試してみた。</p>
<ul>
<li><a href="https://bike8615.blogspot.com/2020/10/ocnone-sim.html">続：OCNモバイルONE の SIM はバッテリー消費が尋常ではないといわれている件</a></li>
</ul>
<p>つまり、OCNのSIMは、４Gのほかに３Gの電波も探しに行くという仕様のため、セルスタンバイが生じて電池を食う。対策としては、LTE only にする必要があるとのことであったので、そのように設定した処、異常にバッテリーが消費するという現象は再現しなかった。</p>
<h2 id="他社simで楽天リンクを使えるようにする">他社SIMで楽天リンクを使えるようにする。</h2>
<p>youtubeで以下の情報を見つけたので試すことにした。</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>pixel5で楽天リンクを認証させるために、使わなくなった古い楽天SIMをさして電話番号入力、SMS認証まで進めると、HUAWEIのほうにコードがSMSで届く。
それをpixel5に入力して、確認ボタンを押す前にSIMをOCNに交換する。電源が入ったままでのSIM交換なのでリスクが伴うから、あくまで自己責任の行為である。</p>
<p>SIMを交換してから、確認ボタンを押すとあっさり認証されて、OCNのSIMしか入っていないpixel5で楽天リンクが使えるという仕組みが完成した。ただ楽天リンクは認証されたスマホでのみつかえるという仕様なので、当然ながらこの段階で楽天SIMがさしてあるHUAWEIのスマホから楽天リンクを使うことはできない。</p>
<p>楽天SIMで楽天リンクを使う場合は、データ回線は消費しない仕様ですが、OCNのSIMで楽天リンクを使うと、OCNのデータ回線を消費するのだと思います。もっとも最近はもっぱらLINE電話がメインで電話機能を使うことはないのでどうでもいいことかもしれませんが、SIM一枚で楽天の電番でもOCNの電番でも対応できるというのは便利です。</p>
<p>このようにすることで楽天SIMをデータ回線専用として自由に活用できるようになる。楽天SIMをさしたHUAEIのスマホはこれといって使いみちはないので、タブレットにさして使ってみたいと考えている。残念ながらいまは、WiFi仕様のものしか持っていないので、お手頃価格の中古 iPad miniを物色中。</p>
]]></content>
        </item>
        
        <item>
            <title>外部モニター Dell U2421Eを購入</title>
            <link>http://minorugh.github.io/posts/u2421e/</link>
            <pubDate>Mon, 03 May 2021 20:40:09 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/u2421e/</guid>
            <description>愛用の外部モニターが大分老朽化してきたので、コロナ補助金の10万円で新しいモニター Dell U2421Eを買った。初代と同じ Dell製品。 選択条件と</description>
            <content type="html"><![CDATA[<p>愛用の外部モニターが大分老朽化してきたので、コロナ補助金の10万円で新しいモニター Dell U2421Eを買った。初代と同じ Dell製品。</p>
<p>選択条件として、まず Thinkpad E590と USB-Cケーブル1本でつなぎたかったので USBハブモニターであること。最近の24インチモニターは、大半が16:9（1980☓1080）というアスペクト比である。私の場合は、縦置きで使うことも考えて、16:10（1980☓1200）がほしかったので、結果的にこれになった。</p>
<p>Dellのノートは安いけれど故障率も高いという印象だったけどモニターの評価は悪くない。</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/lOxl9KQHZrI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<hr>
<p>先代と比べてベゼルの幅が圧倒的に細くてかっこいい。実際使ってみると実に快適で、2台並べて使ってみたいという衝動にかられる。台座と支柱がシルバーなのがちょっと嫌だったけれどブラックの選択肢はなかった。</p>
]]></content>
        </item>
        
        <item>
            <title>Googleのスマホ Pixel3 を買った</title>
            <link>http://minorugh.github.io/posts/pixel3/</link>
            <pubDate>Wed, 24 Mar 2021 20:46:49 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/pixel3/</guid>
            <description>本気で写真を撮るときは、一眼レフを使うので、スマホのカメラ性能云々など眼中になかった。 ところが、歳をとってカメラを持ち出すのがだんだん億劫に</description>
            <content type="html"><![CDATA[<p>本気で写真を撮るときは、一眼レフを使うので、スマホのカメラ性能云々など眼中になかった。</p>
<p>ところが、歳をとってカメラを持ち出すのがだんだん億劫になり、娘や息子たちが iPhoneで素敵な写真をSNSにアップして楽しそうに共有しているのを見て羨ましくなりました。余生の身分でいまさら iPhoneに10万円以上も投資するのは馬鹿らしく逡巡としていたが、Google製の Pixelの写真もなかなかのものだと知りました。でも、iPhoneほどではないけれど Pixelもまた最新機種はいい値段で年金生活者にとっては気軽に手が届かない。</p>
<!-- raw HTML omitted -->
<p>いろいろ情報を集めていると、二世代前の Pixel3が手頃な値段でかなりの数出回っており、美品クラスならまだまだ現役で使えそうだと見込んで買ってみました。スマホの場合は、バッテリーは消耗品なので、バッテリーを取り替える覚悟でしたが、想像以上の良品にあたったようでフル充電してやれば、丸一日は大丈夫みたいなので、しばらくこのまま使うことにした。</p>
<p><img src="https://live.staticflickr.com/65535/51065498271_47695419c2_b.jpg" alt="勿忘草"></p>
<p>吐き出す写真は想像を超えるもので、すっかりハマってしまいました。子どもたちに負けない写真を撮って張り合いたいと思う。</p>
]]></content>
        </item>
        
        <item>
            <title>Xfce4のパネルが突然表示されなくなった時の対処法</title>
            <link>http://minorugh.github.io/posts/xface4-panel-not-display/</link>
            <pubDate>Wed, 03 Mar 2021 21:22:54 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/xface4-panel-not-display/</guid>
            <description>問題 デスクトップにパネルが表示されません。 解決方法 ${HOME}/.cache/sessions ディレクトリを削除し、ログインし直します。これで、初期状態でパネルが表示されます。 パネル</description>
            <content type="html"><![CDATA[<h2 id="問題">問題</h2>
<p>デスクトップにパネルが表示されません。</p>
<h2 id="解決方法">解決方法</h2>
<p><code>${HOME}/.cache/sessions</code> ディレクトリを削除し、ログインし直します。これで、初期状態でパネルが表示されます。</p>
<p>パネル表示の不具合のほかにも初期画面のおかしいときには、この方法で解決できる。</p>
]]></content>
        </item>
        
        <item>
            <title>EmacsのときにXIMを無効化する</title>
            <link>http://minorugh.github.io/posts/disable-xim-on-emacs/</link>
            <pubDate>Wed, 09 Sep 2020 21:18:55 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/disable-xim-on-emacs/</guid>
            <description>emacs-mozcを使っているときは、紛らわしいのでfcitxをOFFにしておきたい…と、あれこれ悩んでいたのですが、「Emacs利用時に</description>
            <content type="html"><![CDATA[<p>emacs-mozcを使っているときは、紛らわしいのでfcitxをOFFにしておきたい…と、あれこれ悩んでいたのですが、「Emacs利用時にはXIMを無効にする」というのはが常識だったようで今更ながら ~/.Xresources を設定しました。これを設定すると何故かEmacsの起動も若干早くなる。不思議</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">!~/.Xresources
! Emacs XIMを無効化
Emacs*useXIM: false

</code></pre></div><p>私の場合、fcitxのON/OFFをWindowsにあわせて <code>hiragana-katakana</code> に設定しているのですが、
上記を設定することでEmacs利用時にはこのキーが空いてくるので、emacs-mozcのON/OFFも <code>hiragana-katakana</code> に割り当てることにしました。</p>
<p>ようするに、emacs利用時でもそうでないときでも同じキーでFEPのON/OFFが可能となりました。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="http://linux.ikoinoba.net/index.php?UID=1336059496">http://linux.ikoinoba.net/index.php?UID=1336059496</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Table-of-Resources.html#Table-of-Resources">https://www.gnu.org/software/emacs/manual/html_node/emacs/Table-of-Resources.html#Table-of-Resources</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>HUGOブログテーマをMainroadに変更</title>
            <link>http://minorugh.github.io/posts/change-hugo-theme-to-mainroad/</link>
            <pubDate>Wed, 15 Jul 2020 10:38:24 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/change-hugo-theme-to-mainroad/</guid>
            <description>Emacsライフの備忘録として使っていたブログを、俳句サイトのシステム管理ノートとしても使うためにテーマを変更しました。 Emacs関連のTi</description>
            <content type="html"><![CDATA[<p>Emacsライフの備忘録として使っていたブログを、俳句サイトのシステム管理ノートとしても使うためにテーマを変更しました。
Emacs関連のTipsについては、Qiitaがメインになりつつあるので、今後、ここには主にWEBサイトに関するものを記録していくことにするつもり。</p>
<h2 id="mainroad-theme">mainroad-theme</h2>
<p>HUGOテーマはオーソドックスな２カラムの <code>Mainroad</code> にした。</p>
<ul>
<li><a href="https://github.com/vimux/mainroad/">Mainroad | Hugo Theme</a></li>
</ul>
<h2 id="customcss">custom.css</h2>
<p>スタイルシートは、Emacsプラミングの師匠でもある、Takaaki ISHIKAWAさんのカスタマイズされたものをパクった。</p>
<ul>
<li><a href="https://pxaka.tokyo/blog/">IMADENALE：たか＠いまでねーる</a></li>
</ul>
<p>Emacsに使っているiceberg-themeと色合いがよくにているので気に入っている。</p>
<h2 id="lunr-search">lunr search</h2>
<p>lunr &amp; lunr-language による全文検索もすんなり動いてくれた。導入の顛末は別記事で残しておくつもり。</p>
]]></content>
        </item>
        
        <item>
            <title>apt installを使わずにTeXLiveを導入する</title>
            <link>http://minorugh.github.io/posts/install-texlive-without-apt/</link>
            <pubDate>Mon, 10 Feb 2020 09:09:09 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/install-texlive-without-apt/</guid>
            <description>TeX ディストリビューション Linux で TeX 環境を構築するには，2つの方法があります． 使用している Linux ディストリビューションのパッケージ管理システムから TeX Live</description>
            <content type="html"><![CDATA[<h2 id="tex-ディストリビューション">TeX ディストリビューション</h2>
<p>Linux で TeX 環境を構築するには，2つの方法があります．</p>
<ol>
<li>使用している Linux ディストリビューションのパッケージ管理システムから TeX Live のパッケージをインストールする．</li>
<li>TeX Live のインストーラを使ってインストールする．</li>
</ol>
<ul>
<li><a href="https://texwiki.texjp.org/?Linux">https://texwiki.texjp.org/?Linux</a></li>
</ul>
<p>前者の場合は，他のパッケージと同様に統一的な管理ができますが，ディストリビューションによっては提供されているパッケージのバージョンが古いことがあります． 後者の場合は，パッケージ管理システムによる管理からは外れてしまいますが，tlmgr を使って最新の状態にアップデートし続けることが可能です．</p>
<h2 id="tex-live-のインストール-">TeX Live のインストール †</h2>
<p>TeX Live のインストールガイド</p>
<ul>
<li><a href="http://www.tug.org/texlive/quickinstall.html">http://www.tug.org/texlive/quickinstall.html</a></li>
<li><a href="http://www.tug.org/texlive/doc/texlive-en/texlive-en.html#installation">http://www.tug.org/texlive/doc/texlive-en/texlive-en.html#installation</a></li>
<li><a href="http://www.tug.org/texlive/doc/texlive-ja/texlive-ja.pdf#c">http://www.tug.org/texlive/doc/texlive-ja/texlive-ja.pdf#c</a></li>
</ul>
<p>に従えばよいですが，このページでもネットワークインストーラを使う場合について簡単に説明します．</p>
<p>まず，ミラーサイトから install-tl-unx.tar.gz をダウンロードします．</p>
<h3 id="-wget-を使用する場合">※ wget を使用する場合</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
</code></pre></div><h3 id="-curl-を使用する場合">※ curl を使用する場合</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl -O http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
</code></pre></div><p>install-tl-unx.tar.gz を展開します．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ tar xvf install-tl-unx.tar.gz
</code></pre></div><p>展開したインストーラのディレクトリに移動します．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd install-tl*
</code></pre></div><p>root 権限でインストーラを実行します． オプションでダウンロードするリポジトリを指定できます．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo ./install-tl -no-gui -repository http://mirror.ctan.org/systems/texlive/tlnet/

...
Actions:
 &lt;I&gt; start installation to hard disk
 &lt;H&gt; help
 &lt;Q&gt; quit
Enter command: I
</code></pre></div><p>I を入力してインストールを開始します． サーバーの接続エラーが発生したり，何らかの理由により取得したアーカイブに問題があったりした場合はインストールが途中でストップします． この場合は，以下のコマンドで途中から再開できたりできなかったりします．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo ./install-tl -no-gui -profile installation.profile

ABORTED INSTALLATION FOUND: installation.profile
Do you want to <span style="color:#66d9ef">continue</span> with the exact same settings as before <span style="color:#f92672">(</span>y/N<span style="color:#f92672">)</span>: y
</code></pre></div><p>再開できない場合は接続先を変更するか，または ISO ファイルをミラーサイトからダウンロードしてインストールしてください．</p>
<p>インストールが終了したら /usr/local/bin ディレクトリ配下にシンボリックリンクを追加します．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo /usr/local/texlive/????/bin/*/tlmgr path add
</code></pre></div><h3 id="アップデート-">アップデート †</h3>
<p>アップデートは</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo tlmgr update --self --all
</code></pre></div><p>を実行すれば OK です．</p>
<p>ただし，アップデートのタイミングによっては，今まで動いていたものが動かなくなったりすることがあるかもしれません．</p>
<ul>
<li>/usr/local/texlive/????/tlpkg/backups</li>
</ul>
<p>にパッケージのバックアップが保存されています． アップデートによって動作しなくなった場合は</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo tlmgr restore （パッケージ名） （リビジョン番号）
</code></pre></div><p>とすることで以前のバージョンに戻すことができます．</p>
<h3 id="-my-styを追加する場所">※ My-styを追加する場所</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"> /usr/local/texlive/????/texmf-dist/tex/platex
</code></pre></div><p>Dropboxからシンボリックを貼る</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo ln -s /home/minoru/Dropox/dotfiles/tex/platex/my-sty /usr/local/texlive/????/texmf-dist/tex/platex 
</code></pre></div><p>そのあと、<code>sudo mktexlsr</code> する。</p>
]]></content>
        </item>
        
        <item>
            <title>Scratch bufferを付箋として使う</title>
            <link>http://minorugh.github.io/posts/scratch-for-sticky-note/</link>
            <pubDate>Wed, 04 Sep 2019 17:03:29 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/scratch-for-sticky-note/</guid>
            <description>Emacsのscratchバッファーを簡易メモとして使うために作られたパッケージはいくつかありますが、設定だけで実現できる簡単なものを紹介し</description>
            <content type="html"><![CDATA[<p><img src="https://live.staticflickr.com/65535/48753577921_70897ea372_b.jpg" alt="Alt Text"></p>
<p>Emacsのscratchバッファーを簡易メモとして使うために作られたパッケージはいくつかありますが、設定だけで実現できる簡単なものを紹介します。必要な手順は以下の通りです。</p>
<ol>
<li>Scratch buffer を kill させない。</li>
<li>Scratch buffer の内容を記憶させる。</li>
<li>ワンキーで Scratch bufferを表示させる。</li>
</ol>
<h2 id="scratch-buffer-を-kill-させない">Scratch buffer を kill させない</h2>
<p>特にpackageを導入せずともemacsの標準機能で実現できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; Set buffer that can not be killed.</span>

(with-current-buffer <span style="color:#e6db74">&#34;*scratch*&#34;</span>
  (emacs-lock-mode <span style="color:#e6db74">&#39;kill</span>))
</code></pre></div><p>設定反映後、scratch bufferを <code>kill-buffer</code> すると <code>Buffer &quot;*scratch*&quot; is locked and cannot be killed</code> とmessageがでます。</p>
<h2 id="scratch-buffer-の内容を記憶させる">Scratch buffer の内容を記憶させる</h2>
<p><code>persistent-scratch</code> というpackageもありますが、大方のemacserは使っていると思う <code>auto-save-buffers-enhanced</code> の設定で実現できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; auto-save-buffers-enhanced</span>

(setq auto-save-buffers-enhanced-quiet-save-p <span style="color:#66d9ef">t</span>)
<span style="color:#75715e">;; scratch bufferを `~/.emacs.d/scratch` に保存</span>
(setq auto-save-buffers-enhanced-save-scratch-buffer-to-file-p <span style="color:#66d9ef">t</span>)
(setq auto-save-buffers-enhanced-file-related-with-scratch-buffer
      (locate-user-emacs-file <span style="color:#e6db74">&#34;scratch&#34;</span>))
(auto-save-buffers-enhanced <span style="color:#66d9ef">t</span>)
</code></pre></div><h2 id="ワンキーで-scratch-bufferを表示させる">ワンキーで Scratch bufferを表示させる</h2>
<p>popwinの機能を使います。<code>my:pop-scratch</code> を起動するとscratch bufferがpopupします。メモしたあと <code>C-g</code> で隠せるので便利です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; Popup the scratch buffer</span>

(bind-key
 <span style="color:#e6db74">&#34;s-x&#34;</span>
 (defun my:pop-scratch ()
   <span style="color:#e6db74">&#34;Popup the scratch buffer.&#34;</span>
   (interactive)
   (setq popwin:special-display-config <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;*scratch*&#34;</span>))
   (display-buffer <span style="color:#e6db74">&#34;*scratch*&#34;</span>)))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>mac⌘英かな.appをEmacs専用に使う</title>
            <link>http://minorugh.github.io/posts/eikana-app/</link>
            <pubDate>Tue, 03 Sep 2019 14:56:12 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/eikana-app/</guid>
            <description>macのkeyboard customizerとしては、 Karabiner-Element が有名ですが、Emacs専用として使うなら ⌘英かな.app が超簡単でおすすめです。 Download</description>
            <content type="html"><![CDATA[<p>macのkeyboard customizerとしては、
<a href="https://pqrs.org/osx/karabiner/">Karabiner-Element</a> が有名ですが、Emacs専用として使うなら
<a href="https://beadored.com/command-ei-kana-the-savior-of-macos-sierra-of-the-us-keyboard-users/">⌘英かな.app</a> が超簡単でおすすめです。</p>
<ul>
<li><a href="https://ei-kana.appspot.com/">Download ⌘英かな.app</a></li>
</ul>
<h2 id="コンセプト">コンセプト</h2>
<p>通常は、他のキーと組み合わせて機能させる修飾キー、<code>Command_L</code> <code>command_R</code> <code>Option_L</code> <code>Fn</code> <code>かな</code> は単独では何も仕事をしません。そこで、⌘英かな.appを使ってEmacsのキーバインドを割り当てようというものです。</p>
<p>比較的頻繁に操作するキーバインドを以下のように設定すればワンキー操作で動きます。いづれもFunctionキーに割り当てるという発想もありますが、手近な修飾キーを利用することでより便利に操作できます。</p>
<h4 id="キーリマップ">キーリマップ</h4>
<table>
<thead>
<tr>
<th>key</th>
<th>remap</th>
<th>command</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command_L</td>
<td>C-g</td>
<td>keyboard-quit</td>
</tr>
<tr>
<td>Command_R</td>
<td>s-m</td>
<td>mozc-temp-convert</td>
</tr>
<tr>
<td>Option_L</td>
<td>s-n</td>
<td>neo-tree-toggle</td>
</tr>
<tr>
<td>Fn</td>
<td>C-j</td>
<td>emmet-expand-line</td>
</tr>
<tr>
<td>かな</td>
<td>s-j</td>
<td>toggle-input-method</td>
</tr>
</tbody>
</table>
<h2 id="設定法">設定法</h2>
<p><!-- raw HTML omitted --></p>
]]></content>
        </item>
        
        <item>
            <title>EmacsのFunction key設定を公開</title>
            <link>http://minorugh.github.io/posts/set-functoin-key-on-emacs/</link>
            <pubDate>Sun, 01 Sep 2019 22:46:23 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/set-functoin-key-on-emacs/</guid>
            <description>あまり役に立つTipsではありませんが、自分の設定を公開します。みなさんの「私の場合は…」というのを教えていただけると嬉しいです。 F1：he</description>
            <content type="html"><![CDATA[<p>あまり役に立つTipsではありませんが、自分の設定を公開します。みなさんの「私の場合は…」というのを教えていただけると嬉しいです。</p>
<h3 id="f1help-command">F1：help-command</h3>
<p>F1は、Deaultでいろんなhelp-commadへのprifixとして設定されているのでそのまま使います。which-key.el を導入することで各コマンドのガイドがミニバファーに表示されるので便利です。
<img src="https://live.staticflickr.com/65535/48658798686_6c5227888f_b.jpg" alt="Alt Text"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; which-key</span>
(require <span style="color:#e6db74">&#39;which-key</span>)
(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#a6e22e">#&#39;</span>which-key-mode)
</code></pre></div><h3 id="f2hydra-compile">F2：hydra-compile</h3>
<p>一般的には此処に、<code>M-x compile</code>を割り当てている人が多いと思います。私はいろんな作業をmakefaileで自動化しているので目的に応じてコマンドが使えるようにhydraでメニューを設定して割り当てています。</p>
<p><img src="https://live.staticflickr.com/65535/48663159803_02857a9beb_b.jpg" alt="Alt Text"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; compile</span>

(bind-key
 [f2]
 (defhydra hydra-compile (:color red :hint <span style="color:#66d9ef">nil</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74"> 🗿 Compile: make _k_  _a_ll  _u_pftp  _m_ove  _b_klog  _g_it  _c_lean   🐾 &#34;</span>
   (<span style="color:#e6db74">&#34;k&#34;</span> my:make-k :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;a&#34;</span> my:make-all :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;u&#34;</span> my:make-upftp :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;m&#34;</span> my:make-move :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;g&#34;</span> my:make-git :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;b&#34;</span> my:make-bklog :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;c&#34;</span> my<span style="color:#960050;background-color:#1e0010">−</span>make-clean)))
</code></pre></div><ul>
<li><a href="https://github.com/minorugh/emacs.d/blob/master/inits/08_compile.el">hydra-compile の詳細設定はこちら</a></li>
</ul>
<h3 id="f3iconify-or-deiconify-frame">F3：iconify-or-deiconify-frame</h3>
<p>emacsclient使用時という条件下でフレームのポップアップ/最小化をtoggleさせます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; iconify-or-deiconify-frame</span>

(bind-key <span style="color:#e6db74">&#34;&lt;f3&gt;&#34;</span> <span style="color:#e6db74">&#39;iconify-or-deiconify-frame</span>)
</code></pre></div><h3 id="f4toggle-current-buffer-and-scratch-buffer">F4：Toggle current buffer and <em>scratch</em> buffer.</h3>
<p>カレントバッファーとScrtchバッファーとをtoggleさせます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; Toggle current buffer and `*scratch*` buffer</span>

(defvar toggle-scratch-prev-buffer <span style="color:#66d9ef">nil</span>)
(defun toggle-scratch()
  <span style="color:#e6db74">&#34;Toggle current buffer and *scratch* buffer.&#34;</span>
  (interactive)
  (if (not (string= <span style="color:#e6db74">&#34;*scratch*&#34;</span> (<span style="color:#a6e22e">buffer-name</span>)))
      (progn
	(setq toggle-scratch-prev-buffer (<span style="color:#a6e22e">buffer-name</span>))
	(switch-to-buffer <span style="color:#e6db74">&#34;*scratch*&#34;</span>))
    (switch-to-buffer toggle-scratch-prev-buffer)))
(bind-key <span style="color:#e6db74">&#34;&lt;f4&gt;&#34;</span> <span style="color:#e6db74">&#39;toggle-scratch</span>)
</code></pre></div><h3 id="f5quickrun">F5：quickrun</h3>
<p>ごくたまに <code>perl</code> や <code>ruby</code> などのミニスクリプトを自作することもあるのでquickrunで簡単に試運転できるようにしています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; quickrun</span>
(require <span style="color:#e6db74">&#39;quickrun</span>)
(bind-key [f5] <span style="color:#e6db74">&#39;quickrun</span>)
</code></pre></div><h3 id="f6counsel-commands">F6：counsel commands</h3>
<p>多機能なcounselのコマンド群をキーバインドしてもとても覚えきれませんね。
よく使う主要コマンドだけキーバインドし、あとはF6を叩くとcounsel-M-xが勝手に絞り込んでくれるので必要なコマンドを絞り込んでセレクトできます。
<img src="https://live.staticflickr.com/65535/48659043901_ed297c5081_b.jpg" alt="Alt Text"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; counsel</span>

(bind-key <span style="color:#e6db74">&#34;&lt;f6&gt;&#34;</span> (lambda ()
		   (interactive)
		   (counsel-M-x <span style="color:#e6db74">&#34;^counsel &#34;</span>)))

</code></pre></div><ul>
<li><a href="https://github.com/minorugh/emacs.d/blob/master/inits/04_counsel.el">counsel の詳細設定はこちら</a></li>
</ul>
<h3 id="f7calendar">F7：calendar</h3>
<p>リタイアしてからは、EmacsでのGTDはやめてしまいましたが、作業中にカレンダーをチラ見したいときもあります。Calfwまでは必要ないので標準機能のcalendarを使っています。F7を押すことで、表示/非表示をトグルします。</p>
<p><img src="https://live.staticflickr.com/65535/48659029836_932b26293e_b.jpg" alt="Alt Text"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; Calendar</span>

(use-package calendar
  :commands calendar
  :bind ((<span style="color:#e6db74">&#34;&lt;f7&gt;&#34;</span> <span style="color:#f92672">.</span> calendar)
	 :map calendar-mode-map
	 (<span style="color:#e6db74">&#34;n&#34;</span> <span style="color:#f92672">.</span> calendar-forward-day)
	 (<span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#f92672">.</span> calendar-backward-day)
	 (<span style="color:#e6db74">&#34;&lt;f7&gt;&#34;</span> <span style="color:#f92672">.</span> calendar-exit))
  :config
  (setq calendar-mark-holidays-flag <span style="color:#66d9ef">t</span>))

</code></pre></div><ul>
<li><a href="https://github.com/minorugh/emacs.d/blob/master/inits/10_ui.el">calendar の詳細設定はこちら</a></li>
</ul>
<h3 id="f8neotree-toggle">F8：neotree-toggle</h3>
<p>定番の設定ですね。</p>
<p><img src="https://live.staticflickr.com/65535/48663514508_0498d52ca2_b.jpg" alt="Alt Text"></p>
<ul>
<li><a href="https://github.com/minorugh/emacs.d/blob/master/inits/30_neotree.el">neotree の詳細設定はこちら</a></li>
</ul>
<h3 id="f9display-line-numbers-mode">F9：display-line-numbers-mode</h3>
<p>linum-modeは重いので使ってなかったのですが、Emacs26以降になって動作の軽い <code>display-line-numbers-mode</code>が使えるようになったので、F9でtoggleしています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; Display-line-numbers-mode (Emacs 26.0.50 and newer versions)</span>

(add-hook <span style="color:#e6db74">&#39;prog-mode-hook</span> <span style="color:#e6db74">&#39;display-line-numbers-mode</span>)
(add-hook <span style="color:#e6db74">&#39;text-mode-hook</span> <span style="color:#e6db74">&#39;display-line-numbers-mode</span>)
(bind-key [f9] <span style="color:#e6db74">&#39;display-line-numbers-mode</span>)
</code></pre></div><h3 id="f10dashboard">F10：dashboard</h3>
<p>私のEmacsはkillすることがないので、起動画面にしているdashoardも消さないようにして、Emacsでの作業をリセットするときはdashboardに戻るようにしています。また戻るときには併せてkill-other-bufferしてます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; unkillable-scratch</span>
(require <span style="color:#e6db74">&#39;unkillablr-scratch</span>)
(setq unkillable-buffers <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;^\\*scratch*\\*$&#34;</span> <span style="color:#e6db74">&#34;^\\*Messages\\*$&#34;</span> <span style="color:#e6db74">&#34;^\\*dashboard\\*$&#34;</span>))
(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#e6db74">&#39;unkillable-scratch</span> <span style="color:#ae81ff">1</span>)
</code></pre></div><p><img src="https://live.staticflickr.com/65535/48645786476_70d4295c83_b.jpg" alt="Alt Text"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(bind-key
 <span style="color:#e6db74">&#34;&lt;f10&gt;&#34;</span>
 (defun my:dashboard ()
  <span style="color:#e6db74">&#34;Switch buffer to Dashboard.&#34;</span>
  (interactive)
  (switch-to-buffer <span style="color:#e6db74">&#34;*dashboard*&#34;</span>)
  (kill-other-buffers)))
</code></pre></div><ul>
<li><a href="https://github.com/minorugh/emacs.d/blob/master/inits/01_dashboard.el">dashboard の詳細設定はこちら</a></li>
</ul>
<h3 id="f11undo-tree-visualize">F11：undo-tree-visualize</h3>
<p>undo/redoは、いろいろ試しましたが直感的なundo-treeが一番使いやすいと私は思います。
<code>undo-tree-undo</code> <code>undo-tree-redo</code> をそれぞれキーバインドし、F11で <code>undo-tree-visualize</code> をtoggleしています。</p>
<p><img src="https://live.staticflickr.com/65535/48668689381_8603349e37_b.jpg" alt="Alt Text"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; undo-tree</span>

(use-package undo-tree
  :bind ((<span style="color:#e6db74">&#34;C-_&#34;</span> <span style="color:#f92672">.</span> undo-tree-undo)
	 (<span style="color:#e6db74">&#34;M-_&#34;</span> <span style="color:#f92672">.</span> undo-tree-redo)
	 (<span style="color:#e6db74">&#34;&lt;f11&gt;&#34;</span> <span style="color:#f92672">.</span> undo-tree-visualize)
	 :map undo-tree-visualizer-mode-map
	 (<span style="color:#e6db74">&#34;&lt;f11&gt;&#34;</span> <span style="color:#f92672">.</span> undo-tree-visualizer-quit))
  :hook (after-init <span style="color:#f92672">.</span> global-undo-tree-mode)
  :init
  (setq undo-tree-visualizer-timestamps <span style="color:#66d9ef">t</span>
	undo-tree-visualizer-diff <span style="color:#66d9ef">t</span>
	undo-tree-enable-undo-in-region <span style="color:#66d9ef">nil</span>
	undo-tree-auto-save-history <span style="color:#66d9ef">nil</span>
	undo-tree-history-directory-alist
	<span style="color:#f92672">`</span>((<span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">concat</span> user-emacs-directory <span style="color:#e6db74">&#34;undo-tree-hist/&#34;</span>))))
  :config
  <span style="color:#75715e">;; FIXME: `undo-tree-visualizer-diff&#39; is a local variable in *undo-tree* buffer.</span>
  (defun undo-tree-visualizer-show-diff (<span style="color:#66d9ef">&amp;optional</span> node)
    <span style="color:#75715e">;; show visualizer diff display</span>
    (setq-local undo-tree-visualizer-diff <span style="color:#66d9ef">t</span>)
    (let ((buff (with-current-buffer undo-tree-visualizer-parent-buffer
		  (undo-tree-diff node)))
	  (display-buffer-mark-dedicated <span style="color:#e6db74">&#39;soft</span>)
	  win)
      (setq win (split-window))
      (<span style="color:#a6e22e">set-window-buffer</span> win buff)
      (shrink-window-if-larger-than-buffer win)))
  (defun undo-tree-visualizer-hide-diff ()
    <span style="color:#75715e">;; hide visualizer diff display</span>
    (setq-local undo-tree-visualizer-diff <span style="color:#66d9ef">nil</span>)
    (let ((win (<span style="color:#a6e22e">get-buffer-window</span> undo-tree-diff-buffer-name)))
      (when win (with-selected-window win (kill-buffer-and-window))))))

</code></pre></div><h3 id="f12darkroom-mode">F12：darkroom-mode</h3>
<p>私のEmacsは文章書きがメインなのでDarkroom-modeをF12のtoggleで使っています。darkroom-mode時は、<code>flycheck-mode</code> <code>git-gutter-mode</code> をOFFにします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style="color:#75715e">;; Darkroom</span>

(use-package darkroom
  :bind (([f12] <span style="color:#f92672">.</span> my:darkroom-mode-in)
	 :map darkroom-mode-map
	 ([f12] <span style="color:#f92672">.</span> my:darkroom-mode-out ))
  :config
  (defun my:darkroom-mode-in ()
    <span style="color:#e6db74">&#34;Darkroom mode in.&#34;</span>
    (interactive)
    (display-line-numbers-mode <span style="color:#ae81ff">0</span>)
    (flycheck-mode <span style="color:#ae81ff">0</span>)
    (git-gutter-mode <span style="color:#ae81ff">0</span>)
    (darkroom-mode <span style="color:#ae81ff">1</span>))
  (defun my:darkroom-mode-out ()
    <span style="color:#e6db74">&#34;Darkroom mode out.&#34;</span>
    (interactive)
    (darkroom-mode <span style="color:#ae81ff">0</span>)
    (git-gutter-mode <span style="color:#ae81ff">1</span>)
    (flycheck-mode <span style="color:#ae81ff">1</span>)
    (display-line-numbers-mode <span style="color:#ae81ff">1</span>)))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hide .DS_Store file from Emacs</title>
            <link>http://minorugh.github.io/posts/hide-ds_store-from-emacs/</link>
            <pubDate>Thu, 08 Aug 2019 12:18:18 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/hide-ds_store-from-emacs/</guid>
            <description>.DS_StoreファイルをMacから削除する…というTipsは山ほどあるのですが、いづれもいつの間にかまた復活してしまいます。なので私の場</description>
            <content type="html"><![CDATA[<p><code>.DS_Store</code>ファイルをMacから削除する…というTipsは山ほどあるのですが、いづれもいつの間にかまた復活してしまいます。なので私の場合は、Emacsの各シーンで非表示になるように設定しています。</p>
<h2 id="counsel">counsel</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(setq counsel-find-file-ignore-regexp (regexp-opt <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;.DS_Store&#34;</span>)))
</code></pre></div><h2 id="dired">dired</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; omit .DS_Store</span>
(require <span style="color:#e6db74">&#39;dired-x</span>)
(setq-default dired-omit-files-p <span style="color:#66d9ef">t</span>)
(setq dired-omit-files <span style="color:#e6db74">&#34;^\\.DS_Store&#34;</span>)
</code></pre></div><h2 id="neotree">neotree</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Patched to allow everything but .DS_Store</span>
<span style="color:#75715e">;; Tips from https://github.com/syl20bnr/spacemacs/issues/2751</span>
(with-eval-after-load <span style="color:#e6db74">&#39;neotree</span>
  (defun neo-util--walk-dir (path)
    <span style="color:#e6db74">&#34;Return the subdirectories and subfiles of the PATH.&#34;</span>
    (let* ((full-path (neo-path--file-truename path)))
      (condition-case <span style="color:#66d9ef">nil</span>
	  (<span style="color:#a6e22e">directory-files</span>
	   path <span style="color:#e6db74">&#39;full</span> <span style="color:#e6db74">&#34;^\\([^.]\\|\\.[^D.][^S]\\).*&#34;</span>)
	(<span style="color:#e6db74">&#39;file-error</span>
	 (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;Walk directory %S failed.&#34;</span> path)
	 <span style="color:#66d9ef">nil</span>)))))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>view-modeを超えるhydra-pinkyの設定</title>
            <link>http://minorugh.github.io/posts/hydra-pinky/</link>
            <pubDate>Thu, 01 Aug 2019 12:27:34 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/hydra-pinky/</guid>
            <description>私のEmacs設定は、プログラマー masasamさんのブログ「 Solist Work Blog」から多くのことを吸収して日々成長しています。 そのブログの中にある</description>
            <content type="html"><![CDATA[<p>私のEmacs設定は、プログラマー <a href="https://github.com/masasam">masasam</a>さんのブログ「 <a href="https://solist.work/blog/">Solist Work Blog</a>」から多くのことを吸収して日々成長しています。
そのブログの中にある<a href="https://solist.work/blog/page/3/">Emacs Pinkyをhydraで解決する</a> の記事からhydra-pinkyの設定を参考にして更に使いやすくカスタマイズしてみました。</p>
<h2 id="screen-shot">Screen Shot</h2>
<p><img src="https://live.staticflickr.com/65535/48441308482_2210006a97_b.jpg" alt="hydra-pinky"></p>
<p>hydra-pinky を発動するとミニバッファーに赤文字のメニューがでてきます。 hydra発動中はこの表示が続くのでわかりやすいです。 赤い表示のキーをタイプしている間はいつまでたってもhydraは解除されません。
hydraが終了する条件は、定義された赤いキー以外をタイプするか、青文字の &ldquo;q&rdquo;：quit を押した場合です。</p>
<p>つまりhydra-pinkyは、発動中はvew-modeに似た動作をし、そこから抜けると普通の編集モードに戻る…という仕組みです。
複雑なキーバインドを覚える必要もなくGUIでスピーディーにキー操作できるのはとてもありがたいです。
私自身はもともとブラインドタッチを使えないのでEmacs-pinkyの他にもいろいろhydraを活用しています。</p>
<p><a href="https://qiita.com/minoruGH/items/3776090fba46b1f9c228">HydraでEmacsのキーバインド問題を解消</a></p>
<h2 id="sequential-command">sequential-command</h2>
<p><a href="https://github.com/rubikitch/sequential-command">rubikitch/sequential-command</a></p>
<p>Emacsを再起動して、C-a C-a C-aすると、行頭にいって、バッファーの頭にいって、元に戻る。
また、C-e C-e C-eすると行頭にいって、バッファーの頭にいって、元に戻るというシンプルな機能ですが、なにげに便利です。</p>
<p>pinkyでは、&ldquo;a&rdquo;,&ldquo;e&quot;キーに割り当てています。</p>
<h2 id="window-toggle-division">window-toggle-division</h2>
<p>Windowの縦分割、横分割をtoggleで切り替えします。</p>
<h2 id="iflipbバッファー移動">iflipb：バッファー移動</h2>
<p>バッファー移動は、<code>next-buffer</code> <code>previous-buffer</code> を使ってもいいのですが、不要なbufferはignoreしてくれるfilipbを使います。
<a href="https://qiita.com/minoruGH/items/aa96e92c1434f87940d6">Emacs:タブを使わない究極のバッファー移動</a></p>
<h2 id="矢印キーの扱い">矢印キーの扱い</h2>
<p>Emacserの方から見ると邪道だと言われそうですが、私はカーソル移動に矢印キーを使うことも多いです。基本は、h,j,k,lを使うようにしていてもうっかり矢印キーに触れるとhydra-pinkyが消えてしまうので、pinky発動中は矢印関係の操作で消えないようにしています。</p>
<h2 id="設定">設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; sequential-command</span>
(use-package sequential-command-config
  :commands sequential-command-setup-keys
  :hook (after-init <span style="color:#f92672">.</span> sequential-command-setup-keys))

<span style="color:#75715e">;; other-window-or-split</span>
(bind-key
 <span style="color:#e6db74">&#34;C-q&#34;</span>
 (defun other-window-or-split ()
   <span style="color:#e6db74">&#34;If there is one window, open split window.
</span><span style="color:#e6db74">If there are two or more windows, it will go to another window.&#34;</span>
   (interactive)
   (when (one-window-p)
     (split-window-horizontally))
   (other-window <span style="color:#ae81ff">1</span>)))

<span style="color:#75715e">;; window-toggle-division</span>
(defun window-toggle-division ()
  <span style="color:#e6db74">&#34;Replace vertical &lt;-&gt; horizontal when divided into two.&#34;</span>
  (interactive)
  (unless (<span style="color:#a6e22e">=</span> (count-windows <span style="color:#ae81ff">1</span>) <span style="color:#ae81ff">2</span>)
    (<span style="color:#a6e22e">error</span> <span style="color:#e6db74">&#34;Not divided into two!&#34;</span>))
  (let ((before-height)
        (other-buf (<span style="color:#a6e22e">window-buffer</span> (<span style="color:#a6e22e">next-window</span>))))
    (setq before-height (window-height))
    (delete-other-windows)
    (if (<span style="color:#a6e22e">=</span> (window-height) before-height)
        (split-window-vertically)
      (split-window-horizontally))
    (other-window <span style="color:#ae81ff">1</span>)
    (switch-to-buffer other-buf)
    (other-window <span style="color:#ae81ff">-1</span>)))

<span style="color:#75715e">;; iflipb</span>
(setq iflipb-wrap-around <span style="color:#66d9ef">t</span>)
(setq iflipb-ignore-buffers (<span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#34;^[*]&#34;</span> <span style="color:#e6db74">&#34;^magit&#34;</span> <span style="color:#e6db74">&#34;dir]$&#34;</span>))

<span style="color:#75715e">;; Hydra-pinky</span>
(bind-key [f11] <span style="color:#e6db74">&#39;hydra-pinky/body</span>)
(key-chord-define-global
 <span style="color:#e6db74">&#34;::&#34;</span>
 (defhydra hydra-pinky (:color red :hint <span style="color:#66d9ef">nil</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74"> ：_0_._1_._2_._3_._o_._S_._x_   ：_j_._k_._h_._l_._c_._a_._e_._b_._v_._SPC_._w_._s_._/_   ：_n_._p_._u_._t_   ：_&lt;_-_:_-_&gt;_   ：_q_uit&#34;</span>
   <span style="color:#75715e">;; window</span>
   (<span style="color:#e6db74">&#34;0&#34;</span> delete-window)
   (<span style="color:#e6db74">&#34;1&#34;</span> delete-other-windows)
   (<span style="color:#e6db74">&#34;2&#34;</span> split-window-below)
   (<span style="color:#e6db74">&#34;3&#34;</span> split-window-right)
   (<span style="color:#e6db74">&#34;o&#34;</span> other-window-or-split)
   (<span style="color:#e6db74">&#34;S&#34;</span> window-swap-states)
   (<span style="color:#e6db74">&#34;x&#34;</span> window-toggle-division)
   <span style="color:#75715e">;; page</span>
   (<span style="color:#e6db74">&#34;a&#34;</span> seq-home)
   (<span style="color:#e6db74">&#34;e&#34;</span> seq-end)
   (<span style="color:#e6db74">&#34;j&#34;</span> next-line)
   (<span style="color:#e6db74">&#34;k&#34;</span> previous-line)
   (<span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#a6e22e">forward-char</span>)
   (<span style="color:#e6db74">&#34;h&#34;</span> <span style="color:#a6e22e">backward-char</span>)
   (<span style="color:#e6db74">&#34;c&#34;</span> recenter-top-bottom)
   (<span style="color:#e6db74">&#34;&lt;down&gt;&#34;</span> next-line)
   (<span style="color:#e6db74">&#34;&lt;up&gt;&#34;</span> previous-line)
   (<span style="color:#e6db74">&#34;&lt;right&gt;&#34;</span> <span style="color:#a6e22e">forward-char</span>)
   (<span style="color:#e6db74">&#34;&lt;left&gt;&#34;</span> <span style="color:#a6e22e">backward-char</span>)
   (<span style="color:#e6db74">&#34;&lt;C-up&gt;&#34;</span> backward-paragraph)
   (<span style="color:#e6db74">&#34;&lt;C-down&gt;&#34;</span> forward-paragraph)
   (<span style="color:#e6db74">&#34;&lt;C-left&gt;&#34;</span> left-word)
   (<span style="color:#e6db74">&#34;&lt;C-right&gt;&#34;</span> right-word)
   (<span style="color:#e6db74">&#34;b&#34;</span> scroll-down-command)
   (<span style="color:#e6db74">&#34;v&#34;</span> scroll-up-command)
   (<span style="color:#e6db74">&#34;SPC&#34;</span> set-mark-command)
   (<span style="color:#e6db74">&#34;w&#34;</span> avy-goto-word-1)
   (<span style="color:#e6db74">&#34;s&#34;</span> swiper-isearch-region)
   <span style="color:#75715e">;; git</span>
   (<span style="color:#e6db74">&#34;n&#34;</span> git-gutter:next-hunk)
   (<span style="color:#e6db74">&#34;p&#34;</span> git-gutter:previous-hunk)
   (<span style="color:#e6db74">&#34;u&#34;</span> git-gutter:popup-hunk)
   (<span style="color:#e6db74">&#34;t&#34;</span> git-gutter:toggle-popup-hunk)
   <span style="color:#75715e">;; buffer</span>
   (<span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#a6e22e">kill-buffer</span>)
   (<span style="color:#e6db74">&#34;:&#34;</span> counsel-switch-buffer)
   (<span style="color:#e6db74">&#34;&lt;&#34;</span> iflipb-previous-buffer)
   (<span style="color:#e6db74">&#34;&gt;&#34;</span> iflipb-next-buffer)
   <span style="color:#75715e">;; quit</span>
   (<span style="color:#e6db74">&#34;q&#34;</span> <span style="color:#66d9ef">nil</span>)))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>neotreeを試してみる</title>
            <link>http://minorugh.github.io/posts/neotree/</link>
            <pubDate>Sat, 27 Jul 2019 15:51:23 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/neotree/</guid>
            <description>以下の機能を盛り込んで実用的なneotreeの設定を試してみました。 アイコン表示（use all-the-icons） 文字サイズの変更（縮小）</description>
            <content type="html"><![CDATA[<p>以下の機能を盛り込んで実用的なneotreeの設定を試してみました。</p>
<ol>
<li>アイコン表示（use all-the-icons）</li>
<li>文字サイズの変更（縮小）</li>
<li>キーマップスタイルの変更（ワンキーで使う）</li>
<li>ファイルオープン時にneotreeバッファーを隠す</li>
</ol>
<p><img src="https://live.staticflickr.com/65535/48385436792_f843793b6e_b.jpg" alt="NeoTree"></p>
<h2 id="設定">設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package neotree
  :commands (neo-smart-open neo-create-file-auto-open)
  :init
  (setq-default neo-keymap-style <span style="color:#e6db74">&#39;concise</span>)
  :config
  (setq neo-smart-open <span style="color:#66d9ef">t</span>)
  (setq neo-create-file-auto-open <span style="color:#66d9ef">t</span>)
  (setq neo-theme (if (display-graphic-p) <span style="color:#e6db74">&#39;icons</span> <span style="color:#e6db74">&#39;arrow</span>))
  (bind-key [f8] <span style="color:#e6db74">&#39;neotree-projectile-toggle</span>)
  (bind-key <span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#e6db74">&#39;neotree-hidden-file-toggle</span> neotree-mode-map)
  (bind-key <span style="color:#e6db74">&#34;&lt;left&gt;&#34;</span> <span style="color:#e6db74">&#39;neotree-select-up-node</span> neotree-mode-map))


<span style="color:#75715e">;; Change neotree&#39;s font size</span>
<span style="color:#75715e">;; from https://github.com/jaypei/emacs-neotree/issues/218(setq-default neo-show-hidden-files t)</span>
(defun neotree-text-scale ()
  <span style="color:#e6db74">&#34;Text scale for neotree.&#34;</span>
  (interactive)
  (text-scale-adjust <span style="color:#ae81ff">0</span>)
  (text-scale-decrease <span style="color:#ae81ff">1</span>)
  (<span style="color:#a6e22e">message</span> <span style="color:#66d9ef">nil</span>))
(add-hook <span style="color:#e6db74">&#39;neo-after-create-hook</span>
	  (lambda (_)
	    (<span style="color:#a6e22e">call-interactively</span> <span style="color:#e6db74">&#39;neotree-text-scale</span>)))


<span style="color:#75715e">;; Hide neotree window after open file</span>
<span style="color:#75715e">;; from https://github.com/jaypei/emacs-neotree/issues/77</span>
(add-hook <span style="color:#e6db74">&#39;neo-enter-hook</span>
          (lambda (type &amp; rest)
           (if (<span style="color:#a6e22e">equal</span> type <span style="color:#e6db74">&#39;file</span>)
               (neotree-hide))))

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>swiper-region / swiper-isearch-region</title>
            <link>http://minorugh.github.io/posts/swiper-region/</link>
            <pubDate>Thu, 11 Jul 2019 16:32:15 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/swiper-region/</guid>
            <description>swiper/swiper-isearchをregion選択からも使えるようにするための設定。isearchではmigemoも使えるようにし</description>
            <content type="html"><![CDATA[<p>swiper/swiper-isearchをregion選択からも使えるようにするための設定。isearchではmigemoも使えるようにした。</p>
<p><code>(with-eval-after-load 'ivy'</code> としているのは、<code>(use-package avy-migemo-e.g.swiper)</code>を遅延ロードさせてEmacsの起動時間を短縮するため。</p>
<h2 id="設定">設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(defun swiper-isearch-region ()
  <span style="color:#e6db74">&#34;If region is selected </span><span style="color:#e6db74">`swiper-isearch&#39;</span><span style="color:#e6db74"> with the keyword selected in region.
</span><span style="color:#e6db74">If the region isn&#39;t selected </span><span style="color:#e6db74">`swiper-isearch&#39;</span><span style="color:#e6db74">.&#34;</span>
  (interactive)
  (if (not (use-region-p))
      (swiper-isearch-migemo)
    (deactivate-mark)
    (swiper-isearch (<span style="color:#a6e22e">buffer-substring-no-properties</span>
		     (<span style="color:#a6e22e">region-beginning</span>) (<span style="color:#a6e22e">region-end</span>)))))

(defun swiper-region ()
  <span style="color:#e6db74">&#34;If region is selected </span><span style="color:#e6db74">`swiper&#39;</span><span style="color:#e6db74"> with the keyword selected in region.
</span><span style="color:#e6db74">If the region isn&#39;t selected </span><span style="color:#e6db74">`swiper&#39;</span><span style="color:#e6db74">.&#34;</span>
  (interactive)
  (if (not (use-region-p))
      (swiper)
    (deactivate-mark)
    (swiper (<span style="color:#a6e22e">buffer-substring-no-properties</span>
	     (<span style="color:#a6e22e">region-beginning</span>) (<span style="color:#a6e22e">region-end</span>)))))

(with-eval-after-load <span style="color:#e6db74">&#39;ivy</span>
  (use-package avy-migemo-e.g.swiper)
  (defun swiper-isearch-migemo ()
    <span style="color:#e6db74">&#34;Using migemo with </span><span style="color:#e6db74">`swiper-iserach&#39;</span><span style="color:#e6db74">.&#34;</span>
    (interactive)
    (avy-migemo-mode <span style="color:#ae81ff">1</span>)
    (swiper-isearch)
    (avy-migemo-mode <span style="color:#ae81ff">0</span>)))

</code></pre></div><h2 id="avy-migemo-でエラー発生">avy-migemo でエラー発生</h2>
<p>avy、swiper、counsel の最近の仕様変更により関数名などが変わったため現状ではエラーが出るようになった。その対応のために下記のPRが出されているがまだマージされていないようなので、自分で差し替えて使っている。</p>
<ul>
<li><a href="https://github.com/momomo5717/avy-migemo/pull/8">https://github.com/momomo5717/avy-migemo/pull/8</a></li>
<li><a href="https://github.com/tam17aki/avy-migemo">https://github.com/tam17aki/avy-migemo</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Macにe2psをインストールする</title>
            <link>http://minorugh.github.io/posts/e2ps/</link>
            <pubDate>Thu, 04 Jul 2019 19:13:26 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/e2ps/</guid>
            <description>WtSeries : UNIXソフトからe2psをダウンロードして解凍します。 現在の最新バージョンは、e2ps-4.34 解凍フォルダー内のps-font.cを</description>
            <content type="html"><![CDATA[<p><a href="http://wtpage.info/wtseries/unix.html">WtSeries : UNIXソフト</a>からe2psをダウンロードして解凍します。
現在の最新バージョンは、e2ps-4.34</p>
<p>解凍フォルダー内のps-font.cをエディタで開き、14~53行の行末にバックスラッシュを追加します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>gsFonts <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Times-Roman\
</span><span style="color:#e6db74">Times-Italic\
</span><span style="color:#e6db74">Times-Bold\
</span><span style="color:#e6db74">Times-BoldItalic\
</span><span style="color:#e6db74">Helvetica\
</span><span style="color:#e6db74">Helvetica-Oblique\
</span><span style="color:#e6db74">Helvetica-Bold\
</span><span style="color:#e6db74">Helvetica-BoldOblique\
</span><span style="color:#e6db74">Courier\
</span><span style="color:#e6db74">Courier-Oblique\
</span><span style="color:#e6db74">Courier-Bold\
</span><span style="color:#e6db74">Courier-BoldOblique\
</span><span style="color:#e6db74">Symbol\
</span><span style="color:#e6db74">AvantGarde-Book\
</span><span style="color:#e6db74">AvantGarde_BookOblique\
</span><span style="color:#e6db74">AvantGarde_Demi\
</span><span style="color:#e6db74">AvantGarde_DemiOblique\
</span><span style="color:#e6db74">Bookman-Light\
</span><span style="color:#e6db74">Bookman-LightItalic\
</span><span style="color:#e6db74">Bookman-Demi\
</span><span style="color:#e6db74">Bookman-DemiItalic\
</span><span style="color:#e6db74">Helvetica-Narrow\
</span><span style="color:#e6db74">Helvetica-Narrow-Oblique\
</span><span style="color:#e6db74">Helvetica-Narrow-Bold\
</span><span style="color:#e6db74">Helvetica-Narrow-BoldObliqeu\
</span><span style="color:#e6db74">NewCenturySchlbl-Roman\
</span><span style="color:#e6db74">NewCenturySchlbl-Italic\
</span><span style="color:#e6db74">NewCenturySchlbl-Bold\
</span><span style="color:#e6db74">NewCenturySchlbl-BoldItalic\
</span><span style="color:#e6db74">Palatino-Roman\
</span><span style="color:#e6db74">Palatino-Italic\
</span><span style="color:#e6db74">Palatino-Bold\
</span><span style="color:#e6db74">Palatino-BoldItalic\
</span><span style="color:#e6db74">Zapfchancery-MediumItalic\
</span><span style="color:#e6db74">ZapfDingbats\
</span><span style="color:#e6db74">Ryumin-Light.Hiragana\
</span><span style="color:#e6db74">Ryumin-Light.Katakana\
</span><span style="color:#e6db74">Gothic-Meduim.Hiragana\
</span><span style="color:#e6db74">Gothic-Medium.Katakana\
</span><span style="color:#e6db74">&#34;</span>;
</code></pre></div><p>terminalで解凍フォルダー内に移動します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd e2ps-4.34
</code></pre></div><p>続いて以下のようにmakeします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">make
sudo make install
</code></pre></div><p>/usr/local/bin に e2ps と e2lpr がインストールされていたら成功です。</p>
]]></content>
        </item>
        
        <item>
            <title>direx-project &#43; popwinで快適なディレクトリツリー環境を構築する</title>
            <link>http://minorugh.github.io/posts/direxjump-to-project-directory/</link>
            <pubDate>Mon, 08 Apr 2019 19:31:31 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/direxjump-to-project-directory/</guid>
            <description>Emacsでディレクトリツリーを表示させるパッケージにはいくつかの選択肢があります。neotreeが人気のようですが表示幅が自由にカスタマイ</description>
            <content type="html"><![CDATA[<p><img src="https://live.staticflickr.com/7901/33686197028_bbd99854f5_b.jpg" alt="Alt Text"></p>
<p>Emacsでディレクトリツリーを表示させるパッケージにはいくつかの選択肢があります。neotreeが人気のようですが表示幅が自由にカスタマイズできないのでiconモードで使うとややストレスです。私は、direxが使いやすいので愛用しています。</p>
<p>例によってパッチワークですが、設定を公開します。特徴として以下の機能を持ちます。</p>
<ul>
<li>フォルダー表示はビジュアルにしたいのでunicodeの絵文字を使う。</li>
<li>popwinを使うことで表示幅を自由に設定できる。(q または C−g で隠せる)</li>
<li>project内にいるなら、direx-projectを起動し、そうでなければ普通にdirexを起動する（これが気に入っています）</li>
<li><a href="https://blog.shibayu36.org/entry/2013/02/12/191459">https://blog.shibayu36.org/entry/2013/02/12/191459</a></li>
</ul>
<h2 id="設定">設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; direx</span>
(use-package direx)
(setq direx:leaf-icon <span style="color:#e6db74">&#34;  &#34;</span> direx:open-icon <span style="color:#e6db74">&#34;📂&#34;</span> direx:closed-icon <span style="color:#e6db74">&#34;📁&#34;</span>)
(push <span style="color:#f92672">&#39;</span>(direx:direx-mode :position left :width <span style="color:#ae81ff">35</span> :dedicated <span style="color:#66d9ef">t</span>)
      popwin:special-display-config)
<span style="color:#75715e">;; use direx-project.el</span>
<span style="color:#75715e">;; https://blog.shibayu36.org/entry/2013/02/12/191459</span>
(bind-key
 [f11]
 (defun direx:jump-to-project-directory ()
   <span style="color:#e6db74">&#34;If in project, launch direx-project otherwise start direx.&#34;</span>
  (interactive)
  (let ((result (ignore-errors
                  (direx-project:jump-to-project-root-other-window)
                  <span style="color:#66d9ef">t</span>)))
    (unless result
      (direx:jump-to-directory-other-window)))))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Emacs：複数のテーマを切り替えて使う</title>
            <link>http://minorugh.github.io/posts/cycle-custom-themes-emacs/</link>
            <pubDate>Mon, 08 Apr 2019 09:56:43 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/cycle-custom-themes-emacs/</guid>
            <description>Emacsを快適に使うためにいろいろ自分好みのテーマを模索します。私の場合、deeper-blue misterioso material と変遷し、今は doom-dracula を使っています。 それぞ</description>
            <content type="html"><![CDATA[<p>Emacsを快適に使うためにいろいろ自分好みのテーマを模索します。私の場合、deeper-blue misterioso material と変遷し、今は doom-dracula を使っています。</p>
<p>それぞれ特徴がありコードを書く時、文章を書く時等々、その時々で気分転換を兼ねて切り替えて使えたら面白いと思ってググってみたところ下記サイトのQ&amp;Aで面白いTipsを見つけたので試して見ました。結構快適で愉しいのでご紹介します。</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23793288/cycle-custom-themes-w-emacs-24">stack-overflow</a></li>
</ul>
<h2 id="設定">設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(setq my-themes (<span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#39;doom-dracula</span> <span style="color:#e6db74">&#39;material</span> <span style="color:#e6db74">&#39;misterioso</span> <span style="color:#e6db74">&#39;deeper-blue</span>)) 
(setq curr-theme my-themes)
(defun my-theme-cycle ()
  <span style="color:#e6db74">&#34;Cycle custom theme.&#34;</span>
    (interactive)
    (disable-theme (<span style="color:#a6e22e">car</span> curr-theme)) 
    (setq curr-theme (<span style="color:#a6e22e">cdr</span> curr-theme))
    (if (<span style="color:#a6e22e">null</span> curr-theme) (setq curr-theme my-themes))
    (load-theme (<span style="color:#a6e22e">car</span> curr-theme) <span style="color:#66d9ef">t</span>)
    (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;%s&#34;</span> (<span style="color:#a6e22e">car</span> curr-theme)))
(global-set-key [f7] <span style="color:#e6db74">&#39;my-theme-cycle</span>)
(setq curr-theme my-themes)
(load-theme (<span style="color:#a6e22e">car</span> curr-theme) <span style="color:#66d9ef">t</span>)

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>DashboardにQiitaの新着リスト（tag:emacs）を表示させる</title>
            <link>http://minorugh.github.io/posts/display-list-of-qiita-on-dashboard/</link>
            <pubDate>Tue, 02 Apr 2019 12:11:22 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/display-list-of-qiita-on-dashboard/</guid>
            <description>下記のTipsを参考にしてEmacsのDashboard画面にQiitaの新着一覧を表示させる事ができました。 Dashboardで起動画面を</description>
            <content type="html"><![CDATA[<p><img src="https://live.staticflickr.com/7874/32576377777_6a8b349d0b_b.jpg" alt="Alt Text"></p>
<p>下記のTipsを参考にしてEmacsのDashboard画面にQiitaの新着一覧を表示させる事ができました。</p>
<ul>
<li><a href="https://qiita.com/hyakt/items/f4468facec0478e06f7a">Dashboardで起動画面を素敵にしよう</a></li>
</ul>
<h2 id="設定">設定</h2>
<p>この設定例では、emacsタグで絞り込んだ一覧を表示するようにカスタマイズしています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Use request.el for API call</span>
(use-package request)

<span style="color:#75715e">;; Item display function</span>
(defun dashboard-qiita-insert-list (list-display-name <span style="color:#a6e22e">list</span>)
  <span style="color:#e6db74">&#34;Render LIST-DISPLAY-NAME and items of LIST.&#34;</span>
  (dashboard-insert-heading list-display-name)
  (<span style="color:#a6e22e">mapc</span> (lambda (el)
          (<span style="color:#a6e22e">insert</span> <span style="color:#e6db74">&#34;\n    &#34;</span>)
          (widget-create <span style="color:#e6db74">&#39;push-button</span>
                         :action <span style="color:#f92672">`</span>(lambda (<span style="color:#66d9ef">&amp;rest</span> ignore)
                                    (browse-url <span style="color:#f92672">,</span>(<span style="color:#a6e22e">cdr</span> (<span style="color:#a6e22e">assoc</span> <span style="color:#e6db74">&#39;url</span> el))))
                         :mouse-face <span style="color:#e6db74">&#39;highlight</span>
                         :follow-link <span style="color:#e6db74">&#34;\C-m&#34;</span>
                         :button-prefix <span style="color:#e6db74">&#34;&#34;</span>
                         :button-suffix <span style="color:#e6db74">&#34;&#34;</span>
                         :format <span style="color:#e6db74">&#34;%[%t%]&#34;</span>
                         (<span style="color:#a6e22e">decode-coding-string</span> (<span style="color:#a6e22e">cdr</span> (<span style="color:#a6e22e">assoc</span> <span style="color:#e6db74">&#39;title</span> el)) <span style="color:#e6db74">&#39;utf-8</span>))) <span style="color:#a6e22e">list</span>))

<span style="color:#75715e">;; Function to get and display articles</span>
(defun dashboard-qiita-insert (list-size)
  <span style="color:#e6db74">&#34;Add the list of LIST-SIZE items from qiita.&#34;</span>
  (request
   <span style="color:#75715e">;; (format &#34;https://qiita.com/api/v2/items?page=1&amp;per_page=%s&#34; list-size)</span>
   (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;https://qiita.com/api/v2/tags/emacs/items?page=1&amp;per_page=%s&#34;</span> list-size)
   :sync <span style="color:#66d9ef">t</span>
   :parser <span style="color:#e6db74">&#39;json-read</span>
   :success (cl-function
             (lambda (<span style="color:#66d9ef">&amp;key</span> data <span style="color:#66d9ef">&amp;allow-other-keys</span>)
               (dashboard-qiita-insert-list <span style="color:#e6db74">&#34;Qiita(emacs-tag):&#34;</span> data)))))

<span style="color:#75715e">;; add an article to the dashboard</span>
(add-to-list <span style="color:#e6db74">&#39;dashboard-item-generators</span> <span style="color:#f92672">&#39;</span>(qiita <span style="color:#f92672">.</span> dashboard-qiita-insert))
(setq dashboard-items <span style="color:#f92672">&#39;</span>((qiita <span style="color:#f92672">.</span> <span style="color:#ae81ff">15</span>)))

</code></pre></div><h2 id="参考">参考</h2>
<p>Emacs:Dashboardの詳細設定はGithubに公開しています。</p>
<ul>
<li><a href="https://github.com/minorugh/emacs.d/blob/master/inits/01_dashboard.el">github/minoruGH</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Emacsのウインドウ操作の履歴をUndo/Redoする：winner-mode</title>
            <link>http://minorugh.github.io/posts/buffer-undo-redo-with-winner-mode/</link>
            <pubDate>Thu, 28 Mar 2019 16:34:06 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/buffer-undo-redo-with-winner-mode/</guid>
            <description>emacsでいろいろ作業していると意図しない形で勝手にウインドウズが分割されたりします。設定して &amp;ldquo;C-g&amp;rdquo; で隠せるものもありますが、それも出来ないと</description>
            <content type="html"><![CDATA[<p>emacsでいろいろ作業していると意図しない形で勝手にウインドウズが分割されたりします。設定して &ldquo;C-g&rdquo; で隠せるものもありますが、それも出来ないときは、&ldquo;C-x 0&rdquo; や &ldquo;C-x 1&rdquo; のお世話になります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(winner-mode)
(bind-key <span style="color:#e6db74">&#34;C-&lt;left&gt;&#34;</span> <span style="color:#e6db74">&#39;winner-undo</span>)
(bind-key <span style="color:#e6db74">&#34;C-&lt;right&gt;&#34;</span> <span style="color:#e6db74">&#39;winner-redo</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(winner-mode)
(bind-key <span style="color:#e6db74">&#34;C-c &lt;left&gt;&#34;</span> <span style="color:#e6db74">&#39;winner-undo</span>)
(bind-key <span style="color:#e6db74">&#34;C-c &lt;right&gt;&#34;</span> <span style="color:#e6db74">&#39;winner-redo</span>)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Scratch bufferをKILLさせない：emacs-lock-mode</title>
            <link>http://minorugh.github.io/posts/dont-kill-scratch-bufffer/</link>
            <pubDate>Thu, 28 Mar 2019 16:12:24 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/dont-kill-scratch-bufffer/</guid>
            <description>わざわざscratch bufferをkillする人はいないと思いますが、&amp;ldquo;kill-other-windows&amp;rdquo; など</description>
            <content type="html"><![CDATA[<p>わざわざscratch bufferをkillする人はいないと思いますが、&ldquo;kill-other-windows&rdquo; などを定義していると、うっかりscratchも一緒に消えてしまって困ることがありますね。</p>
<p>あやまってscratch killしたら新しいscratchを自動再生してくれるとか、kill出来ないようにする…というTipsも多いのですが、そんな回りくどいことをしなくてEmacsの標準機能だけて簡単に対応できることがわかりました。</p>
<h2 id="emacs-lock-mode-を使う">emacs-lock-mode を使う##</h2>
<p>パッケージも何もいりません。下記を設定してみてください。私は <code>*Messages*</code> も一緒に設定しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Set buffer that can not be killed.</span>
(with-current-buffer <span style="color:#e6db74">&#34;*scratch*&#34;</span>
  (emacs-lock-mode <span style="color:#e6db74">&#39;kill</span>))
(with-current-buffer <span style="color:#e6db74">&#34;*Messages*&#34;</span>
  (emacs-lock-mode <span style="color:#e6db74">&#39;kill</span>))
</code></pre></div><p>この選定を有効にしたあとscratchをkill bufferしようとすると、</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">Buffer <span style="color:#e6db74">&#34;*scratch*&#34;</span> is locked and cannot be killed
</code></pre></div><p>と叱られます。つまりkillされないようにロックが掛けられるのです。
<code>emacs-lock-mode</code> というのはもともとemacsの内蔵コマンドにあるのです。</p>
<h2 id="scratchを自動保存する">Scratchを自動保存する</h2>
<p>私もそうなのですが、ちょこっとした付箋的なメモをするためにscratchを使うという人も多いと思います。そんな人には、Emacsを再起動させても終了前のscratchが復帰してほしい…というニーズがあります。こうした目的のためのパッケージも何種類かありますが、私は、auto-seve-buffers-enhanced.el の機能を流用しています。このパッケージを使っているEmacserは多いと思うので、わざわざ専用のパッケージを使わずともscratchの保存再生が可能になります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package auto-save-buffers-enhanced)
<span style="color:#75715e">;; Suppress Wrote&#39;s message</span>
(setq auto-save-buffers-enhanced-quiet-save-p <span style="color:#66d9ef">t</span>)
<span style="color:#75715e">;; Scratch buffer is also saved automatically</span>
(setq auto-save-buffers-enhanced-save-scratch-buffer-to-file-p <span style="color:#66d9ef">t</span>)
(setq auto-save-buffers-enhanced-file-related-with-scratch-buffer <span style="color:#e6db74">&#34;~/Dropbox/etc/emacs/scratch&#34;</span>)
(auto-save-buffers-enhanced <span style="color:#66d9ef">t</span>)
</code></pre></div><h2 id="scratchを瞬時にpopup表示させる">scratchを瞬時にpopup表示させる</h2>
<p><code>scratch-pop</code> という便利なパッケージもあるのですが、私にとって余り必要と思わない機能もついているのでシンプルに設定を書いてみました。</p>
<p>popwinを導入した上で下記をinitファイルに書き、適当なキーバインドを設定すると一発でscratch bufferがpopupし、&ldquo;C-g&rdquo; で隠れてくれます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(defun my:pop-scratch ()
  <span style="color:#e6db74">&#34;Popup the scratch buffer.&#34;</span>
  (interactive)
  (setq popwin:special-display-config <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;*scratch*&#34;</span>)))
  (display-buffer <span style="color:#e6db74">&#34;*scratch*&#34;</span>))
</code></pre></div><h2 id="どんな使い方をしているか">どんな使い方をしているか</h2>
<p>簡単なelispの評価にscratchを使うのは当然ですが、私の場合、なにか調べたいキーワードをscratchにちょこっと書いてsearch-webで即検索…というような使い方を良くします。参考に私のhydra-search-webの設定にリンクを張っておきます。</p>
<ul>
<li><a href="https://github.com/minorugh/emacs.d/blob/master/inits/80_search-web.el">hydra-search-web</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Emacsからカレントディレクトリでターミナルアプリを開く</title>
            <link>http://minorugh.github.io/posts/open-terminal-in-current-directory-from-emacs/</link>
            <pubDate>Tue, 26 Mar 2019 10:32:42 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/open-terminal-in-current-directory-from-emacs/</guid>
            <description>私の場合は、Emacsからターミナル作業をするときは基本eshellを使うようにしています。ただ、ごくたまに別窓でターミナルアプリを立ち上げ</description>
            <content type="html"><![CDATA[<p>私の場合は、Emacsからターミナル作業をするときは基本eshellを使うようにしています。ただ、ごくたまに別窓でターミナルアプリを立ち上げてemacsと併行して作業したいときがありますので以下のように設定しています。</p>
<p>当然ながらコマンドラインでアプリが起動できるようにbashなりzshなりで設定しておくことが前提です。</p>
<h2 id="macのitermappを起動させる設定">macのiterm.appを起動させる設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Launch iterm.app with Current buffer</span>
(defun my:iterm-app ()
  <span style="color:#e6db74">&#34;Open iterm.app with current dir.&#34;</span>
  (interactive)
  (let ((dir default-directory))
    (shell-command (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;open -a iterm.app &#34;</span> dir))))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>HydraでEmacsのキーバインド問題を解消する</title>
            <link>http://minorugh.github.io/posts/emacs-key-binding-with-hydra/</link>
            <pubDate>Mon, 25 Mar 2019 16:37:37 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/emacs-key-binding-with-hydra/</guid>
            <description>できるだけデフォルトを上書きしないようにと配慮しながらEmacsのキーバインドを考えるとなるとなかなか難しいですね。うまく割り当てできたとし</description>
            <content type="html"><![CDATA[<p>できるだけデフォルトを上書きしないようにと配慮しながらEmacsのキーバインドを考えるとなるとなかなか難しいですね。うまく割り当てできたとしてもとても覚えて使いこなすのは至難です。その問題を解消して視覚的で使いやすいUIを提供してくれるのが <code>Hydra</code> です。</p>
<p><code>Hydra</code> はとても奥が深くまだまだ使いこなせないのですが、勉強を兼ねていろいろ設定しましたので備忘録を兼ねてご紹介します。こうすればなお良い…というようなアドバイスを頂けると嬉しいです。</p>
<p>設定の大部分は、hydraの作者である<a href="https://github.com/abo-abo/hydra">abo-abo氏</a>のTipsを参考にしました。</p>
<ul>
<li><a href="https://github.com/abo-abo/hydra/wiki">Hydra Wiki</a></li>
</ul>
<h2 id="hydra-melpa">Hydra-melpa</h2>
<p><img src="https://farm8.staticflickr.com/7872/46740221354_14cd554345_b.jpg" alt="Alt Text"></p>
<p>emacsのパッケージ管理はいろいろあるようですが、私はMelpaを利用して、必要なパッケージは、<a href="https://github.com/minorugh/emacs.d/blob/master/init.el" title="init.el">init.el</a> に書いて自動インストールされるようにしているのですが、メンテナンス（package-install、update、remove） のためのコマンドをhydraで設定しています。</p>
<p><code>M-x package-list-packege</code> でリストを表示させてもいいのですが &ldquo;U&rdquo; で <code>update</code> すると全てが対象になって思わぬトラブルに遭遇することもあるので、<code>package-utils</code> というパッケージを使っています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; use package-utils.el</span>
(defhydra hydra-melpa (:color red :hint <span style="color:#66d9ef">nil</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">Package: _u_pdate  _r_emove  _i_nstall&#34;</span>
   (<span style="color:#e6db74">&#34;u&#34;</span> package-utils-upgrade-by-name)
   (<span style="color:#e6db74">&#34;r&#34;</span> package-utils-remove-by-name)
   (<span style="color:#e6db74">&#34;i&#34;</span> package-install))

</code></pre></div><h2 id="hydra-git-gutter">Hydra-git-gutter</h2>
<p><img src="https://farm8.staticflickr.com/7910/32521618977_d29bd033c3_b.jpg" alt="Alt Text"></p>
<p>emacsの設定ファイル群は、Gitで管理していますので、<code>magit</code> は必要不可欠です。</p>
<p>編集中は、git-gutterが便利なのでまとめてhydraに設定しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; 02_git.el --- 02_git.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;; (setq debug-on-error t)</span>

<span style="color:#75715e">;; magit</span>
(<span style="color:#a6e22e">autoload</span> <span style="color:#e6db74">&#39;magit-status</span> <span style="color:#e6db74">&#34;magit&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>)
(defadvice magit-status (around magit-fullscreen activate)
  <span style="color:#e6db74">&#34;Magit-status always in fullr screen.&#34;</span>
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))
(bind-key [f8] <span style="color:#e6db74">&#39;magit-status</span>)

<span style="color:#75715e">;; git-gutter</span>
(global-git-gutter-mode <span style="color:#66d9ef">t</span>)
(defun git-gutter:toggle-popup-hunk ()
  <span style="color:#e6db74">&#34;Toggle git-gutter hunk window.&#34;</span>
  (interactive)
  (if (<span style="color:#a6e22e">window-live-p</span> (git-gutter:popup-buffer-window))
      (delete-window (git-gutter:popup-buffer-window))
    (git-gutter:popup-hunk)))

<span style="color:#75715e">;; Hydra</span>
(bind-key
 <span style="color:#e6db74">&#34;s-g&#34;</span>
 (defhydra hydra-git-gutter (:color red :hint <span style="color:#66d9ef">nil</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">_m_agit  _b_lame  _d_ispatch  _t_imemachine  |  hunk: _p_revious  _n_ext  _s_tage  _r_evert  pop_u_p  _SPC_:toggle&#34;</span>
   (<span style="color:#e6db74">&#34;m&#34;</span> magit-status :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;b&#34;</span> magit-blame :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;t&#34;</span> git-timemachine :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;d&#34;</span> magit-dispatch :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;p&#34;</span> git-gutter:previous-hunk)
   (<span style="color:#e6db74">&#34;n&#34;</span> git-gutter:next-hunk)
   (<span style="color:#e6db74">&#34;s&#34;</span> git-gutter:stage-hunk)
   (<span style="color:#e6db74">&#34;r&#34;</span> git-gutter:revert-hunk)
   (<span style="color:#e6db74">&#34;u&#34;</span> git-gutter:popup-hunk)
   (<span style="color:#e6db74">&#34;SPC&#34;</span> git-gutter:toggle-popup-hunk)))

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 02_git.el ends here</span>
</code></pre></div><h2 id="hydra-counsel">Hydra-counsel</h2>
<p><img src="https://farm8.staticflickr.com/7879/40497283063_7891bbb92f_b.jpg" alt="Alt Text"></p>
<p>私のemacsの補完インターフェイスは、脱Helmにこだわっています。</p>
<ul>
<li><a href="https://qiita.com/tadsan/items/33ebb8db2271897a462b">君は誰とEmacsる？ (補完インターフェイス紹介篇)</a></li>
</ul>
<p>counselはとても優秀で便利なのですがキーバインドが覚えられないのでhydraにしました。頻繁に使うオーソドックなものは別にキーバインドするので、hydraからは除外しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 05_counsel.el --- 05_counsel.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;; (setq debug-on-error t)</span>

(ivy-mode <span style="color:#ae81ff">1</span>)
(setq ivy-use-virtual-buffers <span style="color:#66d9ef">t</span>)
(setq ivy-use-selectable-prompt <span style="color:#66d9ef">t</span>)
(setq enable-recursive-minibuffers <span style="color:#66d9ef">t</span>)
(bind-key <span style="color:#e6db74">&#34;M-:&#34;</span> <span style="color:#e6db74">&#39;ivy-switch-buffer</span>)
(bind-key <span style="color:#e6db74">&#34;M-s&#34;</span> <span style="color:#e6db74">&#39;swiper-for-region-or-swiper</span>)
(bind-key <span style="color:#e6db74">&#34;C-s&#34;</span> <span style="color:#e6db74">&#39;swiper-migemo</span>)
(bind-key <span style="color:#e6db74">&#34;M-x&#34;</span> <span style="color:#e6db74">&#39;counsel-M-x</span>)
(bind-key <span style="color:#e6db74">&#34;C-x C-f&#34;</span> <span style="color:#e6db74">&#39;counsel-find-file</span>)

<span style="color:#75715e">;; hydra-counsel</span>
(bind-key
 <span style="color:#e6db74">&#34;C-/&#34;</span>
(defhydra hydra-counsel (:hint <span style="color:#66d9ef">nil</span> :exit <span style="color:#66d9ef">t</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">Counsel: describ-_f_unction   _i_nfo-lookup-symbol    _d_iscbinds      _y_ank-pop    _l_ocate      _a_g
</span><span style="color:#e6db74">         describ-_v_ariable   find-_L_ibrary          _u_nicode-char   _m_ark-ring   _g_it-grep    _r_g&#34;</span>
(<span style="color:#e6db74">&#34;d&#34;</span> counsel-descbinds)
(<span style="color:#e6db74">&#34;y&#34;</span> counsel-yank-pop)
(<span style="color:#e6db74">&#34;m&#34;</span> counsel-mark-ring)
(<span style="color:#e6db74">&#34;f&#34;</span> counsel-describe-function)
(<span style="color:#e6db74">&#34;v&#34;</span> counsel-describe-variable)
(<span style="color:#e6db74">&#34;L&#34;</span> counsel-find-library)
(<span style="color:#e6db74">&#34;i&#34;</span> counsel-info-lookup-symbol)
(<span style="color:#e6db74">&#34;u&#34;</span> counsel-unicode-char)
(<span style="color:#e6db74">&#34;g&#34;</span> counsel-git-grep)
(<span style="color:#e6db74">&#34;i&#34;</span> counsel-git)
(<span style="color:#e6db74">&#34;a&#34;</span> counsel-ag)
(<span style="color:#e6db74">&#34;r&#34;</span> counsel-rg)
(<span style="color:#e6db74">&#34;l&#34;</span> counsel-locate)))

<span style="color:#75715e">;; swiper-for-region-or-swiper</span>
(defun swiper-for-region-or-swiper ()
  <span style="color:#e6db74">&#34;If the region is active, swiper-for-region.
</span><span style="color:#e6db74">If the region is inactive, swiper.&#34;</span>
  (interactive)
  (if (region-active-p)
      (swiper (<span style="color:#a6e22e">buffer-substring</span>
               (<span style="color:#a6e22e">region-beginning</span>) (<span style="color:#a6e22e">region-end</span>)))
    (swiper)))

<span style="color:#75715e">;; swiper-migemo</span>
(use-package avy-migemo-e.g.swiper)
(defun swiper-migemo ()
  <span style="color:#e6db74">&#34;Using migemo with Swiper.&#34;</span>
  (interactive)
  (avy-migemo-mode <span style="color:#ae81ff">1</span>)
  (swiper)
  (avy-migemo-mode <span style="color:#ae81ff">0</span>))


<span style="color:#75715e">;; counsel-tramp</span>
(setq tramp-default-method <span style="color:#e6db74">&#34;ssh&#34;</span>)

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 05_counsel.el ends here</span>
</code></pre></div><h2 id="hydra-dired">Hydra-dired</h2>
<p><img src="https://farm8.staticflickr.com/7823/46740221464_793fb5eb10_b.jpg" alt="Alt Text"></p>
<p>diredのキーバインドはよく使うのですぐに覚えますから、あえてhydraにこだわることもないでしょう。お気に入りのデレクトリを一発で開いたり、trampを起動させたり、macアプリのfinder.app（ファイラー）や iterm（ターミナルアプリ）を起動させたりというショートカット機能も加えて遊んでみました。</p>
<p>dired-modeから &ldquo;.&rdquo; でtoggle表示させているところが味噌です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 30_dired.el --- 30_dired.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;; (setq debug-on-error t)</span>

<span style="color:#75715e">;; Dired files deleted by trash and no ask recursive</span>
(setq delete-by-moving-to-trash <span style="color:#66d9ef">t</span>
      dired-recursive-copies <span style="color:#e6db74">&#39;always</span>
      dired-recursive-deletes <span style="color:#e6db74">&#39;always</span>)

(with-eval-after-load <span style="color:#e6db74">&#39;dired</span>
  (bind-key <span style="color:#e6db74">&#34;RET&#34;</span> <span style="color:#e6db74">&#39;dired-open-in-accordance-with-situation</span> dired-mode-map)
  (bind-key <span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#e6db74">&#39;wdired-change-to-wdired-mode</span> dired-mode-map)
  (bind-key <span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#e6db74">&#39;dired-view-file-other-window</span> dired-mode-map)
  (bind-key <span style="color:#e6db74">&#34;[&#34;</span> <span style="color:#e6db74">&#39;dired-hide-details-mode</span> dired-mode-map)
  (bind-key <span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#e6db74">&#39;dired-list-all-mode</span> dired-mode-map)
  (bind-key <span style="color:#e6db74">&#34;q&#34;</span> <span style="color:#e6db74">&#39;dired-dwim-quit-window</span> dired-mode-map)
  (bind-key <span style="color:#e6db74">&#34;W&#34;</span> <span style="color:#e6db74">&#39;dired-get-fullpath-filename</span> dired-mode-map)    <span style="color:#75715e">;; w:file name only</span>
  (bind-key <span style="color:#e6db74">&#34;z&#34;</span> <span style="color:#e6db74">&#39;dired-zip-files</span> dired-mode-map)    <span style="color:#75715e">;; Create an archive containing the marked files</span>
  (bind-key <span style="color:#e6db74">&#34;&lt;left&gt;&#34;</span> <span style="color:#e6db74">&#39;dired-up-alternate-directory</span> dired-mode-map)
  (bind-key <span style="color:#e6db74">&#34;&lt;right&gt;&#34;</span> <span style="color:#e6db74">&#39;dired-open-in-accordance-with-situation</span> dired-mode-map)
  (bind-key <span style="color:#e6db74">&#34;C-x C-j&#34;</span> <span style="color:#e6db74">&#39;dired-jump</span>))


<span style="color:#75715e">;; direx</span>
(setq direx:leaf-icon <span style="color:#e6db74">&#34;  &#34;</span> direx:open-icon <span style="color:#e6db74">&#34;▾ &#34;</span> direx:closed-icon <span style="color:#e6db74">&#34;▸ &#34;</span>)
(push <span style="color:#f92672">&#39;</span>(direx:direx-mode :position left :width <span style="color:#ae81ff">30</span> :dedicated <span style="color:#66d9ef">t</span>)
      popwin:special-display-config)

(bind-key [f11] <span style="color:#e6db74">&#39;direx:jump-to-project-directory</span>)
(defun direx:jump-to-project-directory ()
  <span style="color:#e6db74">&#34;If in project, launch direx-project otherwise start direx.&#34;</span>
  (interactive)
  (let ((result (ignore-errors
                  (direx-project:jump-to-project-root-other-window)
                  <span style="color:#66d9ef">t</span>)))
    (unless result
      (direx:jump-to-directory-other-window))))


<span style="color:#75715e">;; When dired opened in two windows, move or copy in the other dired</span>
(setq dired-dwim-target <span style="color:#66d9ef">t</span>)


<span style="color:#75715e">;; Recursively copy directory</span>
(setq dired-recursive-copies <span style="color:#e6db74">&#39;always</span>)


<span style="color:#75715e">;; Dired with directory first</span>
(use-package ls-lisp)
(setq ls-lisp-use-insert-directory-program <span style="color:#66d9ef">nil</span> ls-lisp-dirs-first <span style="color:#66d9ef">t</span>)


<span style="color:#75715e">;; Add [Dir] to the directory buffer</span>
(defun dired-my-append-buffer-name-hint ()
  <span style="color:#e6db74">&#34;Append a auxiliary string to a name of dired buffer.&#34;</span>
  (when (<span style="color:#a6e22e">eq</span> major-mode <span style="color:#e6db74">&#39;dired-mode</span>)
    (let* ((dir (<span style="color:#a6e22e">expand-file-name</span> list-buffers-directory))
           <span style="color:#75715e">;; Add a drive letter for Windows</span>
           (drive (if (and (<span style="color:#a6e22e">eq</span> <span style="color:#e6db74">&#39;system-type</span> <span style="color:#e6db74">&#39;windows-nt</span>)
                           (<span style="color:#a6e22e">string-match</span> <span style="color:#e6db74">&#34;^\\([a-zA-Z]:\\)/&#34;</span> dir))
                      (match-string <span style="color:#ae81ff">1</span> dir) <span style="color:#e6db74">&#34;&#34;</span>)))
      (<span style="color:#a6e22e">rename-buffer</span> (<span style="color:#a6e22e">concat</span> (<span style="color:#a6e22e">buffer-name</span>) <span style="color:#e6db74">&#34; [&#34;</span> drive <span style="color:#e6db74">&#34;dir]&#34;</span>) <span style="color:#66d9ef">t</span>))))
(add-hook <span style="color:#e6db74">&#39;dired-mode-hook</span> <span style="color:#e6db74">&#39;dired-my-append-buffer-name-hint</span>)


<span style="color:#75715e">;; Toggle listing dot files in dired</span>
<span style="color:#75715e">;; https://github.com/10sr/emacs-lisp/blob/master/docs/elpa/dired-list-all-mode-20161115.118.el</span>
(when (require <span style="color:#e6db74">&#39;dired-list-all-mode</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>)
   (setq dired-listing-switches <span style="color:#e6db74">&#34;-lhFG&#34;</span>))


<span style="color:#75715e">;; Quit-window according to screen division</span>
(defun dired-dwim-quit-window ()
  <span style="color:#e6db74">&#34;`quit-window &#39;according to screen division.&#34;</span>
  (interactive)
  (quit-window (not (<span style="color:#a6e22e">delq</span> (<span style="color:#a6e22e">selected-window</span>) (get-buffer-window-list)))))


<span style="color:#75715e">;; Get fullpath-filename with W (for file name only w)</span>
(defun dired-get-fullpath-filename ()
  <span style="color:#e6db74">&#34;Copy file name (full path) of cursor position.&#34;</span>
  (interactive)
  (kill-new (dired-get-filename))
  (<span style="color:#a6e22e">message</span> (dired-get-filename)))


<span style="color:#75715e">;; File are opened in separate buffer, directories are opened in same buffer</span>
<span style="color:#75715e">;; http://nishikawasasaki.hatenablog.com/entry/20120222/1329932699</span>
(defun dired-open-in-accordance-with-situation ()
  <span style="color:#e6db74">&#34;Files are opened in separate buffers, directories are opened in the same buffer.&#34;</span>
  (interactive)
  (let ((file (dired-get-filename)))
    (if (<span style="color:#a6e22e">file-directory-p</span> file)
        (dired-find-alternate-file)
      (dired-find-file))))


<span style="color:#75715e">;; View-file-other-window</span>
<span style="color:#75715e">;; http://y0m0r.hateblo.jp/entry/20120219/1329657774</span>
(defun dired-view-file-other-window ()
  <span style="color:#e6db74">&#34;View-file other window.&#34;</span>
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (if (<span style="color:#a6e22e">file-directory-p</span> file)
	(or (and (<span style="color:#a6e22e">cdr</span> dired-subdir-alist)
		 (dired-goto-subdir file))
	    (dired file))
      (view-file-other-window file))))


<span style="color:#75715e">;; Move to higher directory without make new buffer</span>
(defun dired-up-alternate-directory ()
   <span style="color:#e6db74">&#34;Move to higher directory without make new buffer.&#34;</span>
   (interactive)
   (let* ((dir (dired-current-directory))
          (up (<span style="color:#a6e22e">file-name-directory</span> (<span style="color:#a6e22e">directory-file-name</span> dir))))
     (or (dired-goto-file (<span style="color:#a6e22e">directory-file-name</span> dir))
         <span style="color:#75715e">;; Only try dired-goto-subdir if buffer has more than one dir.</span>
         (and (<span style="color:#a6e22e">cdr</span> dired-subdir-alist)
              (dired-goto-subdir up))
         (progn
           (find-alternate-file up)
           (dired-goto-file dir)))))


<span style="color:#75715e">;; Automatic deletion for empty files (Valid in all modes)</span>
<span style="color:#75715e">;; https://uwabami.github.io/cc-env/Emacs.html#org57f6557</span>
(defun my:delete-file-if-no-contents ()
  <span style="color:#e6db74">&#34;Automatic deletion for empty files.&#34;</span>
  (when (and (<span style="color:#a6e22e">buffer-file-name</span> (<span style="color:#a6e22e">current-buffer</span>))
             (<span style="color:#a6e22e">=</span> (<span style="color:#a6e22e">point-min</span>) (<span style="color:#a6e22e">point-max</span>)))
    (<span style="color:#a6e22e">delete-file</span>
     (<span style="color:#a6e22e">buffer-file-name</span> (<span style="color:#a6e22e">current-buffer</span>)))))
(if (not (<span style="color:#a6e22e">memq</span> <span style="color:#e6db74">&#39;my:delete-file-if-no-contents</span> after-save-hook))
    (setq after-save-hook
          (<span style="color:#a6e22e">cons</span> <span style="color:#e6db74">&#39;my:delete-file-if-no-contents</span> after-save-hook)))


<span style="color:#75715e">;; Hide .DS_Store when dotfiles listed</span>
(when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;darwin</span>)
(use-package dired-x)
(setq dired-omit-mode <span style="color:#66d9ef">t</span>)
(setq-default dired-omit-files-p <span style="color:#66d9ef">t</span>)
(setq dired-omit-files <span style="color:#e6db74">&#34;^\\.DS_Store\\|^\\.dropbox&#34;</span>))


<span style="color:#75715e">;; zip file can be expanded with Z key</span>
(eval-after-load <span style="color:#e6db74">&#34;dired-aux&#34;</span>
   <span style="color:#f92672">&#39;</span>(add-to-list <span style="color:#e6db74">&#39;dired-compress-file-suffixes</span>
                 <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;\\.zip\\&#39;&#34;</span> <span style="color:#e6db74">&#34;.zip&#34;</span> <span style="color:#e6db74">&#34;unzip&#34;</span>)))


<span style="color:#75715e">;; Create an archive containing the marked files</span>
<span style="color:#75715e">;; https://stackoverflow.com/questions/1431351/how-do-i-uncompress-unzip-within-emacs</span>
(defun dired-zip-files (zip-file)
  <span style="color:#e6db74">&#34;Create an archive containing the marked files.&#34;</span>
  (interactive <span style="color:#e6db74">&#34;sEnter name of zip file: &#34;</span>)
  <span style="color:#75715e">;; create the zip file</span>
  (let ((zip-file (if (<span style="color:#a6e22e">string-match</span> <span style="color:#e6db74">&#34;.zip$&#34;</span> zip-file) zip-file (<span style="color:#a6e22e">concat</span> zip-file <span style="color:#e6db74">&#34;.zip&#34;</span>))))
    (shell-command
     (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;zip &#34;</span>
             zip-file
             <span style="color:#e6db74">&#34; &#34;</span>
             (concat-string-list
              (<span style="color:#a6e22e">mapcar</span>
               <span style="color:#f92672">&#39;</span>(lambda (filename)
                  (<span style="color:#a6e22e">file-name-nondirectory</span> filename))
               (dired-get-marked-files))))))
  (revert-buffer))
(defun concat-string-list (<span style="color:#a6e22e">list</span>)
   <span style="color:#e6db74">&#34;Return a string which is a concatenation of all elements of the list separated by spaces&#34;</span>
   (<span style="color:#a6e22e">mapconcat</span> <span style="color:#f92672">&#39;</span>(lambda (obj) (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;%s&#34;</span> obj)) <span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#34; &#34;</span>))


<span style="color:#75715e">;; hydra-dired</span>
(<span style="color:#a6e22e">define-key</span> dired-mode-map
  <span style="color:#e6db74">&#34;.&#34;</span>
  (defhydra hydra-dired (:hint <span style="color:#66d9ef">nil</span> :color pink)
    <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">_+_ mkdir   _v_iew         _m_ark         _z_ip     _w_ get filename    _r_oot-dir   _T_erminal
</span><span style="color:#e6db74">_C_opy      view _o_ther   _U_nmark all   un_Z_ip   _W_ get fullpath    _h_ome-dir   _F_inder
</span><span style="color:#e6db74">_D_elete    open _f_ile    _u_nmark       _s_ort    _g_ revert buffer   _b_ook-dir   counsel-_T_ramp
</span><span style="color:#e6db74">_R_ename    ch_M_od        _t_oggle       _e_dit    _[_ hide detail     _d_ropbox   _._togggle hydra
</span><span style="color:#e6db74">&#34;</span>
  (<span style="color:#e6db74">&#34;[&#34;</span> dired-hide-details-mode)
  (<span style="color:#e6db74">&#34;+&#34;</span> dired-create-directory)
  (<span style="color:#e6db74">&#34;RET&#34;</span> dired-open-in-accordance-with-situation :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;f&#34;</span> dired-open-in-accordance-with-situation :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;C&#34;</span> dired-do-copy)   <span style="color:#75715e">;; Copy all marked files</span>
  (<span style="color:#e6db74">&#34;D&#34;</span> dired-do-delete)
  (<span style="color:#e6db74">&#34;M&#34;</span> dired-do-chmod)
  (<span style="color:#e6db74">&#34;m&#34;</span> dired-mark)
  (<span style="color:#e6db74">&#34;o&#34;</span> dired-view-file-other-window :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;?&#34;</span> dired-summary :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;R&#34;</span> dired-do-rename)
  (<span style="color:#e6db74">&#34;a&#34;</span> dired-list-all-mode)
  (<span style="color:#e6db74">&#34;g&#34;</span> revert-buffe)
  (<span style="color:#e6db74">&#34;e&#34;</span> wdired-change-to-wdired-mode :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;s&#34;</span> dired-sort-toggle-or-edit)
  (<span style="color:#e6db74">&#34;T&#34;</span> counsel-tramp :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;t&#34;</span> dired-toggle-marks)
  (<span style="color:#e6db74">&#34;U&#34;</span> dired-unmark-all-marks)
  (<span style="color:#e6db74">&#34;u&#34;</span> dired-unmark)
  (<span style="color:#e6db74">&#34;v&#34;</span> dired-view-file :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;w&#34;</span> dired-copy-filename-as-kill)
  (<span style="color:#e6db74">&#34;W&#34;</span> dired-get-fullpath-filename)
  (<span style="color:#e6db74">&#34;z&#34;</span> dired-zip-files)
  (<span style="color:#e6db74">&#34;Z&#34;</span> dired-do-compress)
  (<span style="color:#e6db74">&#34;b&#34;</span> my:book-dir)
  (<span style="color:#e6db74">&#34;r&#34;</span> my:root-dir)
  (<span style="color:#e6db74">&#34;h&#34;</span> my:home-dir)
  (<span style="color:#e6db74">&#34;d&#34;</span> my:dropbox)
  (<span style="color:#e6db74">&#34;F&#34;</span> my:finder-app)
  (<span style="color:#e6db74">&#34;T&#34;</span> my:iterm-app)
  (<span style="color:#e6db74">&#34;q&#34;</span> <span style="color:#66d9ef">nil</span>)
  (<span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#66d9ef">nil</span> :color blue)))

(defun my:root-dir ()
  <span style="color:#e6db74">&#34;Open root dir.&#34;</span>
  (interactive)
  (find-file <span style="color:#e6db74">&#34;/&#34;</span>))
(defun my:home-dir ()
  <span style="color:#e6db74">&#34;Open home dir.&#34;</span>
  (interactive)
  (find-file <span style="color:#e6db74">&#34;~/&#34;</span>))
(defun my:dropbox ()
  <span style="color:#e6db74">&#34;Open home dir.&#34;</span>
  (interactive)
  (find-file <span style="color:#e6db74">&#34;~/Dropbox&#34;</span>))
(defun my:book-dir ()
  <span style="color:#e6db74">&#34;Open book dir.&#34;</span>
  (interactive)
  (find-file <span style="color:#e6db74">&#34;~/Dropbox/book/&#34;</span>))
(defun my:finder-app ()
  <span style="color:#e6db74">&#34;Launch for finder.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a finder.app&#34;</span>))
(defun my:iterm-app ()
  <span style="color:#e6db74">&#34;Launch for iterm.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a iterm.app&#34;</span>))

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 30_dired.el ends here</span>
</code></pre></div><h2 id="hydra-markdowm">Hydra-markdowm</h2>
<p><img src="https://farm8.staticflickr.com/7908/40497282853_49d2f6da08_b.jpg" alt="Alt Text"></p>
<p>私の場合、ブログのDraftやIdeaメモ類は全てhowmで管理し、markdown記法で書いています。（詳細は後述）</p>
<p>emacsのmarkdown-modeはとても便利なのですがinsertコマンドの全てのキーバインドを覚えるのは至難です。yasunippetを使うという選択肢もあると思うのですが、せっかくのmarkdowm-modeなのでhydraで便利に使えるようにしてみました。</p>
<p>ついでに、md2html,md2pdf,md2docx,previewなども設定しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 40_markdown.el --- 40_markdown.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;;(setq debug-on-error t)</span>

(defhydra hydra-markdown (:hint <span style="color:#66d9ef">nil</span> :exit <span style="color:#66d9ef">t</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">^Format^      ^Insert^        ^Head.Foot^     ^Code.Link^      ^Move^           ^Pndoc^       ^Draft
</span><span style="color:#e6db74">^^^^^^--------------------------------------------------------------------------------------------
</span><span style="color:#e6db74">_s_torong     _b_lockquote    H1~H6:_a_uto    _c_ode block     _p_romote        _H_tml        h_@_w_m_
</span><span style="color:#e6db74">italic:_/_    pre:_:_         _f_ootnote      code i_n_line    _d_emote         _P_DF         _e_asy-hugo
</span><span style="color:#e6db74">リスト:_._    _t_able         _r_eference     _l_ink           _j_:move-up      _D_ocx        _h_atenablog
</span><span style="color:#e6db74">取消線:_x_    hr:_-_          _i_mage         _u_ri            _k_:move-down    Pre_v_iew     _q_iita&#34;</span>
   (<span style="color:#e6db74">&#34;s&#34;</span> markdown-insert-bold)
   (<span style="color:#e6db74">&#34;/&#34;</span> markdown-insert-italic)
   (<span style="color:#e6db74">&#34;-&#34;</span> markdown-insert-hr)
   (<span style="color:#e6db74">&#34;x&#34;</span> markdown-insert-strike-through)
   (<span style="color:#e6db74">&#34;b&#34;</span> markdown-insert-blockquote)
   (<span style="color:#e6db74">&#34;:&#34;</span> markdown-insert-pre)
   (<span style="color:#e6db74">&#34;t&#34;</span> markdown-insert-table)
   (<span style="color:#e6db74">&#34;c&#34;</span> markdown-insert-gfm-code-block)
   (<span style="color:#e6db74">&#34;n&#34;</span> markdown-insert-code)
   (<span style="color:#e6db74">&#34;K&#34;</span> markdown-insert-kbd)
   (<span style="color:#e6db74">&#34;a&#34;</span> markdown-insert-header-dwim)
   (<span style="color:#e6db74">&#34;e&#34;</span> easy-hugo)
   (<span style="color:#e6db74">&#34;q&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://qiita.com/minoruGH&#34;</span>))
   (<span style="color:#e6db74">&#34;@&#34;</span> my:howm-list-all)
   (<span style="color:#e6db74">&#34;m&#34;</span> hydra-memo/body)
   (<span style="color:#e6db74">&#34;h&#34;</span> hydra-hatena/body)
   (<span style="color:#e6db74">&#34;1&#34;</span> markdown-insert-header-atx-1)
   (<span style="color:#e6db74">&#34;2&#34;</span> markdown-insert-header-atx-2)
   (<span style="color:#e6db74">&#34;3&#34;</span> markdown-insert-header-atx-3)
   (<span style="color:#e6db74">&#34;4&#34;</span> markdown-insert-header-atx-4)
   (<span style="color:#e6db74">&#34;5&#34;</span> markdown-insert-header-atx-5)
   (<span style="color:#e6db74">&#34;6&#34;</span> markdown-insert-header-atx-6)
   (<span style="color:#e6db74">&#34;.&#34;</span> markdown-insert-list-item)
   (<span style="color:#e6db74">&#34;i&#34;</span> markdown-insert-imaget)
   (<span style="color:#e6db74">&#34;l&#34;</span> markdown-insert-link)
   (<span style="color:#e6db74">&#34;u&#34;</span> markdown-insert-uri)
   (<span style="color:#e6db74">&#34;f&#34;</span> markdown-insert-footnote)
   (<span style="color:#e6db74">&#34;r&#34;</span> markdown-insert-reference-link-dwim)
   (<span style="color:#e6db74">&#34;p&#34;</span> markdown-promote)
   (<span style="color:#e6db74">&#34;d&#34;</span> markdown-demote)
   (<span style="color:#e6db74">&#34;j&#34;</span> markdown-move-down)
   (<span style="color:#e6db74">&#34;k&#34;</span> markdown-move-up)
   <span style="color:#75715e">;; Pndoc</span>
   (<span style="color:#e6db74">&#34;H&#34;</span> md2html :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;P&#34;</span> md2pdf :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;D&#34;</span> md2docx :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;v&#34;</span> markdown-preview :exit <span style="color:#66d9ef">t</span>))


<span style="color:#75715e">;; Syntax higlight code blocks</span>
(setq markdown-fontify-code-blocks-natively <span style="color:#66d9ef">t</span>)

(add-hook <span style="color:#e6db74">&#39;markdown-mode-hook</span>
          <span style="color:#f92672">&#39;</span>(lambda () (outline-minor-mode <span style="color:#66d9ef">t</span>)))

(defun md2html ()
  <span style="color:#e6db74">&#34;Generate pdf from currently open markdown.&#34;</span>
  (interactive)
  (let ((filename (<span style="color:#a6e22e">buffer-file-name</span> (<span style="color:#a6e22e">current-buffer</span>))))
    (shell-command-to-string
     <span style="color:#75715e">;; Place of templatete : ~/.pandoc/template/md2html.html</span>
     (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;pandoc -f markdown -t html --template=md2html &#34;</span>
	     filename
	     <span style="color:#e6db74">&#34; &gt; &#34;</span>
	     (file-name-sans-extension filename)
             <span style="color:#e6db74">&#34;.html&#34;</span>))))

<span style="color:#75715e">;; Use wkhtmltopdf without latex</span>
(defun md2pdf ()
  <span style="color:#e6db74">&#34;Generate pdf from currently open markdown.&#34;</span>
  (interactive)
  (let ((filename (<span style="color:#a6e22e">buffer-file-name</span> (<span style="color:#a6e22e">current-buffer</span>))))
    (shell-command-to-string
     (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;pandoc &#34;</span>
	     filename
	     <span style="color:#e6db74">&#34; -f markdown -t html5 -o &#34;</span>
	     (file-name-sans-extension filename)
             <span style="color:#e6db74">&#34;.pdf&#34;</span>))
    (when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;gnu/linux</span>)   <span style="color:#75715e">;; for Debian</span>
      (shell-command-to-string
       (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;evince &#34;</span>
               (file-name-sans-extension filename)
               <span style="color:#e6db74">&#34;.pdf&#34;</span>)))
    (when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;darwin</span>)      <span style="color:#75715e">;; for macOS</span>
      (shell-command-to-string
       (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;open -a preview.app &#34;</span>
               (file-name-sans-extension filename)
	       <span style="color:#e6db74">&#34;.pdf&#34;</span>)))))

(defun md2docx ()
  <span style="color:#e6db74">&#34;Generate docx from currently open markdown.&#34;</span>
  (interactive)
  (let ((filename (<span style="color:#a6e22e">buffer-file-name</span> (<span style="color:#a6e22e">current-buffer</span>))))
    (shell-command-to-string
     (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;pandoc &#34;</span>
	     filename
	     <span style="color:#e6db74">&#34; -t docx -o &#34;</span>
	     (file-name-sans-extension filename)
	     <span style="color:#75715e">;; &#34;.docx -V mainfont=IPAPGothic -V fontsize=16pt --toc --highlight-style=zenburn&#34;))</span>
	     <span style="color:#e6db74">&#34;.docx -V mainfont=IPAPGothic -V fontsize=16pt --highlight-style=zenburn&#34;</span>))
    (when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;gnu/linux</span>)
      (shell-command-to-string
       (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;xdg-open &#34;</span>
               (file-name-sans-extension filename)
               <span style="color:#e6db74">&#34;.docx&#34;</span>)))
    (when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;darwin</span>)
      (shell-command-to-string
       (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;open -a pages.app &#34;</span>
               (file-name-sans-extension filename)
               <span style="color:#e6db74">&#34;.docx&#34;</span>)))))

<span style="color:#75715e">;; markdown-preview like github ...C-c C-c p</span>
(setq markdown-command <span style="color:#e6db74">&#34;pandoc&#34;</span>
      markdown-command-needs-filename <span style="color:#66d9ef">t</span>
      markdown-content-type <span style="color:#e6db74">&#34;application/xhtml+xml&#34;</span>
      markdown-css-paths <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css&#34;</span>
			   <span style="color:#e6db74">&#34;http://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css&#34;</span>)
      markdown-xhtml-header-content <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">&lt;meta name=&#39;viewport&#39; content=&#39;width=device-width, initial-scale=1, shrink-to-fit=no&#39;&gt;
</span><span style="color:#e6db74">&lt;style&gt;
</span><span style="color:#e6db74">body {
</span><span style="color:#e6db74">  box-sizing: border-box;
</span><span style="color:#e6db74">  max-width: 740px;
</span><span style="color:#e6db74">  width: 100%;
</span><span style="color:#e6db74">  margin: 40px auto;
</span><span style="color:#e6db74">  padding: 0 10px;
</span><span style="color:#e6db74">}
</span><span style="color:#e6db74">&lt;/style&gt;
</span><span style="color:#e6db74">&lt;script src=&#39;http://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js&#39;&gt;&lt;/script&gt;
</span><span style="color:#e6db74">&lt;script&gt;
</span><span style="color:#e6db74">document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
</span><span style="color:#e6db74">  document.body.classList.add(&#39;markdown-body&#39;);
</span><span style="color:#e6db74">  document.querySelectorAll(&#39;pre[lang] &gt; code&#39;).forEach((code) =&gt; {
</span><span style="color:#e6db74">    code.classList.add(code.parentElement.lang);
</span><span style="color:#e6db74">    hljs.highlightBlock(code);
</span><span style="color:#e6db74">  });
</span><span style="color:#e6db74">});
</span><span style="color:#e6db74">&lt;/script&gt;
</span><span style="color:#e6db74">&#34;</span>)

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 40_markdown-mode.el ends here</span>
</code></pre></div><h2 id="hydra-view-mode">Hydra-view-mode</h2>
<p><img src="https://farm8.staticflickr.com/7898/46548095055_c9935358c6_b.jpg" alt="Alt Text"></p>
<p>長いコードなどを閲覧する時に便利なようにview-modeを設定しています。</p>
<p>一文字削除、一行削除、undoなどvim風な簡単な機能もつけました。magitやgit-gutterも使えます。大げさな割にはそれほど使わないのですが、まあ自己満足の世界です(^o^)。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 40_view-mode.el --- 40_view-mode.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;;(setq debug-on-error t)</span>

<span style="color:#75715e">;; Change modeline color in view-mode</span>
(use-package viewer)
(setq viewer-modeline-color-view <span style="color:#e6db74">&#34;#852941&#34;</span>)
(viewer-change-modeline-color-setup)


<span style="color:#75715e">;; Setting to utilize view-mode</span>
(key-chord-define-global <span style="color:#e6db74">&#34;::&#34;</span> <span style="color:#e6db74">&#39;view-mode</span>)
(add-hook <span style="color:#e6db74">&#39;view-mode-hook</span>
	  (lambda ()
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#e6db74">&#39;View-exit</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;:&#34;</span> <span style="color:#e6db74">&#39;View-exit</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;g&#34;</span> <span style="color:#e6db74">&#39;beginning-of-buffer</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;G&#34;</span> <span style="color:#e6db74">&#39;end-of-buffer</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#e6db74">&#39;end-of-line</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#e6db74">&#39;beginning-of-line</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#e6db74">&#39;scroll-down-command</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;D&#34;</span> <span style="color:#e6db74">&#39;my/view-kill-whole-line</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;u&#34;</span> <span style="color:#e6db74">&#39;my/view-undo</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;X&#34;</span> <span style="color:#e6db74">&#39;my/view-del-char</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;w&#34;</span> <span style="color:#e6db74">&#39;my/view-forward-word+1</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;W&#34;</span> <span style="color:#e6db74">&#39;backward-word</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#e6db74">&#39;swiper-for-region-or-swiper</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;t&#34;</span> <span style="color:#e6db74">&#39;git-timemachine</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;v&#34;</span> <span style="color:#e6db74">&#39;vc-diff</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;[&#34;</span> <span style="color:#e6db74">&#39;forward-list</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;]&#34;</span> <span style="color:#e6db74">&#39;backward-list</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#e6db74">&#39;goto-line</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;;&#34;</span> <span style="color:#e6db74">&#39;recenter-top-bottom</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;m&#34;</span> <span style="color:#e6db74">&#39;magit-status</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;B&#34;</span> <span style="color:#e6db74">&#39;magit-blame</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;j&#34;</span> <span style="color:#e6db74">&#39;git-gutter:next-hunk</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;k&#34;</span> <span style="color:#e6db74">&#39;git-gutter:previous-hunk</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#e6db74">&#39;git-gutter:revert-hunk</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;S&#34;</span> <span style="color:#e6db74">&#39;git-gutter:stage-hunk</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#e6db74">&#39;git-gutter:popup-hunk</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;,&#34;</span> <span style="color:#e6db74">&#39;hydra-window/body</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;_&#34;</span> <span style="color:#e6db74">&#39;delete-other-windows</span>)
	    (<span style="color:#a6e22e">define-key</span> view-mode-map <span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#e6db74">&#39;hydra-view-mode/body</span>)))


<span style="color:#75715e">;; Function to edit in view-mode</span>
(defun my/view-forward-word+1 ()
  <span style="color:#e6db74">&#34;Forward word+1 in view mode.&#34;</span>
  (interactive)
  (<span style="color:#a6e22e">forward-word</span>)
  (<span style="color:#a6e22e">forward-char</span>))
(defun my/view-kill-whole-line ()
  <span style="color:#e6db74">&#34;Kill whole line in view mode.&#34;</span>
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-whole-line)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;kill-whole-line and save!&#34;</span>))
(defun my/view-del-char ()
  <span style="color:#e6db74">&#34;Delete character in view mode.&#34;</span>
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (<span style="color:#a6e22e">delete-char</span> <span style="color:#ae81ff">1</span>)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;delete-char&#34;</span>))
(defun my/view-undo ()
  <span style="color:#e6db74">&#34;Undo in view mode.&#34;</span>
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (undo)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;undo and save!&#34;</span>))


<span style="color:#75715e">;; hydra-view-mode</span>
(defhydra hydra-view-mode (:hint <span style="color:#66d9ef">nil</span> :color pink)
  <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">_SPC_: next page   _a_: top of line  _u_: view undo      _m_: magit-status  _j_: gg:next-hunk   _s_: swiper
</span><span style="color:#e6db74">  _b_: prev page   _e_: end of line  _w_: forward word   _B_: magit-blame   _k_: gg:prev-hunk   _d_: dired-jump
</span><span style="color:#e6db74">  _g_: page top    _l_: goto line    _W_: backward word  _t_: timemachine   _p_: gg:popup-hunk  _i_: view exit
</span><span style="color:#e6db74">  _G_: page end    _D_: delete line  _[_: forward pair   _v_: vc-diff       _S_: gg:stage-hunk  _q_: view quit
</span><span style="color:#e6db74">  _;_: top-bottom  _X_: delete char  _]_: backward pair  _h_: github        _r_: gg:revert-hun  _._: close
</span><span style="color:#e6db74">&#34;</span>
  <span style="color:#75715e">;; Move page</span>
  (<span style="color:#e6db74">&#34;SPC&#34;</span> scroll-up-command)
  (<span style="color:#e6db74">&#34;b&#34;</span> scroll-down-command)
  (<span style="color:#e6db74">&#34;g&#34;</span> beginning-of-buffer)
  (<span style="color:#e6db74">&#34;G&#34;</span> end-of-buffer)
  <span style="color:#75715e">;; Move line</span>
  (<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#a6e22e">beginning-of-line</span>)
  (<span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#a6e22e">end-of-line</span>)
  (<span style="color:#e6db74">&#34;w&#34;</span> my/view-forward-word+1)
  (<span style="color:#e6db74">&#34;W&#34;</span> backward-word)
  (<span style="color:#e6db74">&#34;D&#34;</span> my/view-kill-whole-line)
  (<span style="color:#e6db74">&#34;X&#34;</span> my/view-del-char)
  (<span style="color:#e6db74">&#34;u&#34;</span> my/view-undo)
  <span style="color:#75715e">;; Misc</span>
  (<span style="color:#e6db74">&#34;i&#34;</span> View-exit :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;q&#34;</span> View-quit :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;:&#34;</span> View-exit :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;[&#34;</span> forward-list)
  (<span style="color:#e6db74">&#34;]&#34;</span> backward-lis)
  (<span style="color:#e6db74">&#34;l&#34;</span> goto-line)
  <span style="color:#75715e">;; git</span>
  (<span style="color:#e6db74">&#34;v&#34;</span> vc-diff)
  (<span style="color:#e6db74">&#34;m&#34;</span> magit-status :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;B&#34;</span> magit-blame :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;t&#34;</span> git-timemachine :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;h&#34;</span> my/github)
  <span style="color:#75715e">;; gitgutter</span>
  (<span style="color:#e6db74">&#34;j&#34;</span> git-gutter:next-hunk)
  (<span style="color:#e6db74">&#34;k&#34;</span> git-gutter:previous-hunk)
  (<span style="color:#e6db74">&#34;p&#34;</span> git-gutter:popup-hunk)
  (<span style="color:#e6db74">&#34;S&#34;</span> git-gutter:stage-hunk)
  (<span style="color:#e6db74">&#34;r&#34;</span> git-gutter:revert-hunk)
  (<span style="color:#e6db74">&#34;;&#34;</span> recenter-top-bottom)
  <span style="color:#75715e">;; Others</span>
  (<span style="color:#e6db74">&#34;d&#34;</span> dired-jump :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;_&#34;</span> delete-other-windows :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;s&#34;</span> swiper-for-region-or-swiper)
  (<span style="color:#e6db74">&#34;,&#34;</span> hydra-window/body :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#66d9ef">nil</span> :color blue))

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 40_view-mode.el ends here</span>
</code></pre></div><h2 id="hydra-browse">Hydra-browse</h2>
<p><img src="https://farm8.staticflickr.com/7924/46548095355_6be31c004f_b.jpg" alt="Alt Text"></p>
<p>何でもかんでもemacsを作業デスクとしてして生活しているので、色んな場所へジプシーするためのお気に入りランチャーです。macアプリもいれました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 50_hydra-browse.el --- 50_hydra-browse.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;;(setq debug-on-error t)</span>

(bind-key
 [f10]
 (defhydra hydra-browse (:hint <span style="color:#66d9ef">nil</span> :exit <span style="color:#66d9ef">t</span>)
  <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74"> ^Shop^           ^SNS^           ^Repos^          ^GH^           ^Favorite^      ^Others^       ^Applications
</span><span style="color:#e6db74"> ^^^^^^---------------------------------------------------------------------------------------------------
</span><span style="color:#e6db74"> _a_: Amazon      _t_: Twitter    _g_: github      _h_: HOME      _j_: Jorudan    _D_: Dropbox   _c_: Browse-url
</span><span style="color:#e6db74"> _r_: Rakuten     _u_: Youtube    _0_: gist        _d_: d.kukai   _n_: News       _x_: Xserver   _l_: ForkLift
</span><span style="color:#e6db74"> _y_: Yodobashi   _f_: Flickr     _1_: masasam     _m_: m.kukai   _w_: Weather    _q_: Qiita     _@_: Airmail
</span><span style="color:#e6db74"> _k_: Kakaku      _e_: Evernote   _2_: hydraWiki   _b_: BBS       _B_: SanyoBas   _p_: Photo(G)  _i_: iTerm
</span><span style="color:#e6db74">&#34;</span>
   (<span style="color:#e6db74">&#34;a&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.amazon.co.jp/&#34;</span>))
   (<span style="color:#e6db74">&#34;r&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.rakuten.co.jp/&#34;</span>))
   (<span style="color:#e6db74">&#34;y&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.yodobashi.com/&#34;</span>))
   (<span style="color:#e6db74">&#34;k&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://kakaku.com/&#34;</span>))
   (<span style="color:#e6db74">&#34;t&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://twitter.com&#34;</span>))
   (<span style="color:#e6db74">&#34;u&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.youtube.com/channel/UCnwoipb9aTyORVKHeTw159A/videos&#34;</span>))
   (<span style="color:#e6db74">&#34;f&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.flickr.com/photos/minorugh/&#34;</span>))
   (<span style="color:#e6db74">&#34;e&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.evernote.com/client/web#?an=true&amp;n=02ab918a-18a7-472b-a166-835a922d3fad&amp;s=s278&amp;&#34;</span>))
   (<span style="color:#e6db74">&#34;g&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://github.com/minorugh/emacs.d&#34;</span>))
   (<span style="color:#e6db74">&#34;0&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://gist.github.com/minorugh&#34;</span>))
   (<span style="color:#e6db74">&#34;_&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://github.com/minorugh/emacs.d/&#34;</span>))
   (<span style="color:#e6db74">&#34;1&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://github.com/masasam/dotfiles/tree/master/.emacs.d&#34;</span>))
   (<span style="color:#e6db74">&#34;2&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://github.com/abo-abo/hydra/wiki&#34;</span>))
   (<span style="color:#e6db74">&#34;h&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://gospel-haiku.com/&#34;</span>))
   (<span style="color:#e6db74">&#34;d&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://gospel-haiku.com/d_kukai/&#34;</span>))
   (<span style="color:#e6db74">&#34;m&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://gospel-haiku.com/m_kukai/&#34;</span>))
   (<span style="color:#e6db74">&#34;b&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://gospel-haiku.com/danwa/&#34;</span>))
   (<span style="color:#e6db74">&#34;j&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.jorudan.co.jp/&#34;</span>))
   (<span style="color:#e6db74">&#34;n&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://news.yahoo.co.jp/&#34;</span>))
   (<span style="color:#e6db74">&#34;w&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://tenki.jp/week/6/31/&#34;</span>))
   (<span style="color:#e6db74">&#34;B&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://www.sanyo-bus.co.jp/pdf/180913.pdf&#34;</span>))
   (<span style="color:#e6db74">&#34;x&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.xserver.ne.jp/login_server.php&#34;</span>))
   (<span style="color:#e6db74">&#34;D&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.dropbox.com/home/documents&#34;</span>))
   (<span style="color:#e6db74">&#34;q&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://qiita.com/minoruGH&#34;</span>))
   (<span style="color:#e6db74">&#34;v&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://drive.google.com/drive/u/0/my-drive&#34;</span>))
   (<span style="color:#e6db74">&#34;p&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://photos.google.com/?pageId=none&#34;</span>))
   (<span style="color:#e6db74">&#34;/&#34;</span> kill-other-buffers)
   (<span style="color:#e6db74">&#34;,&#34;</span> hydra-window/body)
   (<span style="color:#e6db74">&#34;.&#34;</span> hydra-work1/body)
   (<span style="color:#e6db74">&#34;c&#34;</span> browse-url-at-point)
   (<span style="color:#e6db74">&#34;s&#34;</span> my:skitch-app)
   (<span style="color:#e6db74">&#34;l&#34;</span> my:forklift-app)
   (<span style="color:#e6db74">&#34;@&#34;</span> my:amail-app)
   (<span style="color:#e6db74">&#34;i&#34;</span> my:iterm-app)
   (<span style="color:#e6db74">&#34;&lt;f10&gt;&#34;</span> <span style="color:#66d9ef">nil</span>)))

<span style="color:#75715e">;; Launch for Mac applications</span>
(defun my:calendar-app ()
  <span style="color:#e6db74">&#34;Launch for calendar.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a calendar.app&#34;</span>))
(defun my:forklift-app ()
  <span style="color:#e6db74">&#34;Launch for forklift.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a forklift.app&#34;</span>))
(defun my:amail-app ()
  <span style="color:#e6db74">&#34;Launch for airmail3.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a &#39;airmail 3.app&#39;&#34;</span>))
(defun my:iterm-app ()
  <span style="color:#e6db74">&#34;Launch for iterm.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a iterm.app&#34;</span>))
(defun my:skitch-app ()
  <span style="color:#e6db74">&#34;Launch for skitch.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a skitch.app&#34;</span>))


<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 50_hydra-browse.el ends here</span>
</code></pre></div><h2 id="hydra-compile">Hydra-compile</h2>
<p><img src="https://farm8.staticflickr.com/7869/46740221534_ba6d113363_b.jpg" alt="Alt Text"></p>
<blockquote>
<p>同じことは２度しない。必ずしなければ習い作業 → 自動化できないか考える。</p>
</blockquote>
<p>これは私が原点としている心がけですが、尊敬する故・石井 勝氏による下記記事の受け売りです。</p>
<ul>
<li><a href="bjectclub.jp/community/memorial/homepage3.nifty.com/masarl/article/gnu-make.html">自動化のためのGNU Make入門講座</a></li>
</ul>
<p>emacsには、<code>compile</code> というコマンドがあり、デフォルトで <code>make -k</code> を実行してくれます。</p>
<p>それ以外のmakeコマンドを実行させたいときは、deleteで &ldquo;-k&rdquo; の部分を消して書き換えるのですが、そうすると次回 <code>compile</code> コマンドを実行したときに <code>make -k</code> にならないで書き換えたものに置き換えられてしまいますう。それらを解決するためにhydraで工夫してみました。</p>
<p><code>make -k</code> 以外のときは、<code>shell-command</code> を使います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 50_hydra-compile.el --- 50_hydra-compile.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;;(setq debug-on-error t)</span>

(bind-key
 [f2]
 (defhydra hydra-make (:color red :hint <span style="color:#66d9ef">nil</span>)
  <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">Command: _RET_:compile  _u_pftp  _m_ove  _b_klog  _g_it  _c_lean  _r_estore:compile-command&#34;</span>
   (<span style="color:#e6db74">&#34;RET&#34;</span> compile)
   (<span style="color:#e6db74">&#34;u&#34;</span> my:make-upftp :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;m&#34;</span> my:make-move :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;g&#34;</span> my:make-git :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;b&#34;</span> my:make-bklog :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;c&#34;</span> my:make-clean)
   (<span style="color:#e6db74">&#34;r&#34;</span> my:restore-command)))

(defun my:make-upftp ()
  <span style="color:#e6db74">&#34;Make command for upftp.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;make up&#34;</span>))

(defun my:make-move ()
  <span style="color:#e6db74">&#34;Make command for move.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;make mv&#34;</span>))

(defun my:make-bklog ()
  <span style="color:#e6db74">&#34;Make command for bklog.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;make bk&#34;</span>))

(defun my:make-git ()
  <span style="color:#e6db74">&#34;Make command for git.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;make git&#34;</span>))

(defun my:make-clean ()
  <span style="color:#e6db74">&#34;Make command for clean.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;make clean&#34;</span>))

(defun my:restore-command ()
  <span style="color:#e6db74">&#34;Restore for compile command.&#34;</span>
  (interactive)
  (setq compile-command <span style="color:#e6db74">&#34;make -k&#34;</span>)
  (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;Restored!&#34;</span>))

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 50_hydra-compile ends here</span>
</code></pre></div><h2 id="hydra-window">Hydra-window</h2>
<p><img src="https://farm8.staticflickr.com/7839/46740221244_142d9b2292_b.jpg" alt="Alt Text"></p>
<p>ネット上でも最近良く見かけるemacsのwindow制御です。</p>
<p>正直、&ldquo;C-x ..&rdquo; を叩く癖が身についているのでそれほど便利な気はしませんが、swap,toggle-divosionのほか、frameにも対応させています。</p>
<p>hydraとは別に <code>window移動：other-window-or-split</code> を &ldquo;C-q&rdquo; にも割り当てています。私の場合、二分割を超えて使うことは先ずないので、
慣れ親しんだこちらのほうが使いやすいです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 50_hydra-window.el --- 50_hydra-window.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;;(setq debug-on-error t)</span>

(bind-key
 [f7]
 (defhydra hydra-window (:color red :hint <span style="color:#66d9ef">nil</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">Window: _v_sprit  _h_sprit  _o_ther  _s_wap  e_x_change  del_0_:_1_  |  Frame: _n_ew  _m_ove  _d_el&#34;</span>
  (<span style="color:#e6db74">&#34;v&#34;</span> split-window-right)
  (<span style="color:#e6db74">&#34;h&#34;</span> split-window-below)
  (<span style="color:#e6db74">&#34;o&#34;</span> other-window-or-split)
  (<span style="color:#e6db74">&#34;s&#34;</span> window-swap-states)
  (<span style="color:#e6db74">&#34;x&#34;</span> window-toggle-division)
  (<span style="color:#e6db74">&#34;0&#34;</span> delete-window :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;1&#34;</span> delete-other-windows :exit <span style="color:#66d9ef">t</span>)
  <span style="color:#75715e">;; Common setting with hydra-work</span>
  (<span style="color:#e6db74">&#34;_&#34;</span> delete-other-windows :exit <span style="color:#66d9ef">t</span>)
  (<span style="color:#e6db74">&#34;n&#34;</span> new-frame)
  (<span style="color:#e6db74">&#34;m&#34;</span> other-frame)
  (<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#a6e22e">delete-frame</span> :exit <span style="color:#66d9ef">t</span>)))


(defun other-window-or-split ()
  <span style="color:#e6db74">&#34;If there is one window, open split window.
</span><span style="color:#e6db74">If there are two or more windows, it will go to another window.&#34;</span>
  (interactive)
  (when (one-window-p)
    (split-window-horizontally))
  (other-window <span style="color:#ae81ff">1</span>))
(bind-key <span style="color:#e6db74">&#34;C-q&#34;</span> <span style="color:#e6db74">&#39;other-window-or-split</span>)


(defun window-toggle-division ()
  <span style="color:#e6db74">&#34;Replace vertical &lt;-&gt; horizontal when divided into two.&#34;</span>
  (interactive)
  (unless (<span style="color:#a6e22e">=</span> (count-windows <span style="color:#ae81ff">1</span>) <span style="color:#ae81ff">2</span>)
    (<span style="color:#a6e22e">error</span> <span style="color:#e6db74">&#34;Not divided into two!&#34;</span>))
  (let ((before-height)
        (other-buf (<span style="color:#a6e22e">window-buffer</span> (<span style="color:#a6e22e">next-window</span>))))
    (setq before-height (window-height))
    (delete-other-windows)
    (if (<span style="color:#a6e22e">=</span> (window-height) before-height)
        (split-window-vertically)
      (split-window-horizontally))
    (other-window <span style="color:#ae81ff">1</span>)
    (switch-to-buffer other-buf)
    (other-window <span style="color:#ae81ff">-1</span>)))



<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 50_hydra-window.el ends here</span>
</code></pre></div><h2 id="hydra-howm">Hydra-howm</h2>
<p><img src="https://farm8.staticflickr.com/7917/46548095175_ccce1b85d3_b.jpg" alt="Alt Text"></p>
<p>私はemacsでタスク管理はしないのでorg-modeには余り興味がなくシンプルなhowmを愛用しています。</p>
<p>そのhowmも本来の使い方ではなく &ldquo;メモデーターの保存と管理&rdquo; 目的で使っています。メモの種類は以下のとおりです。</p>
<ul>
<li>ブログ記事などの下書き: howm-create で書く</li>
<li>ちょこっとしたアイデアメモ: howm-remember で書く</li>
<li>俳句創作手帳: elispコマンドでtemplateを挿入</li>
<li>open-junk-file: いわゆる自作のちょこっとしたジュンクコード</li>
</ul>
<p>上記それぞれ保存するデレクトリは分けて別々に一覧表示させるのですが、全てをhowmディレクトリ下に配置することで全ファイルを串刺し検索できるようにもしています。長くなるので詳細は別記事にしたいと思います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 60_howm.el --- 60_howm.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;;(setq debug-on-error t)</span>

<span style="color:#75715e">;; Set the title-hearder chara first and then reqire howm.</span>
(setq howm-view-title-header <span style="color:#e6db74">&#34;#&#34;</span>)
(use-package howm)

<span style="color:#75715e">;; List buffer and content buffer side by side</span>
(setq howm-view-split-horizontally <span style="color:#66d9ef">t</span>)
<span style="color:#75715e">;; Clear list buffer when opening file with RET</span>
(setq howm-view-summary-persistent <span style="color:#66d9ef">nil</span>)
<span style="color:#75715e">;; List in descending order</span>
(setq howm-list-normalizer <span style="color:#e6db74">&#39;howm-view-sort-by-reverse-date</span>)

<span style="color:#75715e">;; hydra</span>
(defhydra hydra-howm (:hint <span style="color:#66d9ef">nil</span> :exit <span style="color:#66d9ef">t</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">HOWM: _c_reate  _m_emo  _f_ile  //  LIST: mem_o_  _h_aiku  _j_unk  all_@_&#34;</span>
   (<span style="color:#e6db74">&#34;c&#34;</span> my:howm-create)
   (<span style="color:#e6db74">&#34;m&#34;</span> my:howm-memo-create)
   (<span style="color:#e6db74">&#34;f&#34;</span> open-junk-file)
   (<span style="color:#e6db74">&#34;o&#34;</span> my:howm-memo-list-all)
   (<span style="color:#e6db74">&#34;h&#34;</span> my:howm-haiku-list-all)
   (<span style="color:#e6db74">&#34;j&#34;</span> my:howm-junk-list-all)
   (<span style="color:#e6db74">&#34;@&#34;</span> my:howm-list-all))

<span style="color:#75715e">;; open-junk-file</span>
(setq open-junk-file-format <span style="color:#e6db74">&#34;~/Dropbox/howm/junk/%Y/junk.%Y%m%d.&#34;</span>)

<span style="color:#75715e">;; Set howm directory and file name format</span>
(defun my:howm-create ()
  <span style="color:#e6db74">&#34;My howm memo create.&#34;</span>
  (interactive)
  (setq howm-directory <span style="color:#e6db74">&#34;~/Dropbox/howm&#34;</span>)
  (setq howm-file-name-format <span style="color:#e6db74">&#34;%Y/%m/%Y%m%d%H%M.md&#34;</span>)
  (howm-create))
(defun my:howm-memo-create ()
  <span style="color:#e6db74">&#34;My howm memo create.&#34;</span>
  (interactive)
  (setq howm-directory <span style="color:#e6db74">&#34;~/Dropbox/howm/memo&#34;</span>)
  (setq howm-file-name-format <span style="color:#e6db74">&#34;%Y/%m/memo-%Y%m%d.md&#34;</span>)
  (howm-remember))

<span style="color:#75715e">;; Set howm directory for list display</span>
(defun my:howm-memo-list-all ()
  <span style="color:#e6db74">&#34;My howm memo list all.&#34;</span>
  (interactive)
  (setq howm-directory <span style="color:#e6db74">&#34;~/Dropbox/howm/memo&#34;</span>)
  (howm-list-all))
(defun my:howm-list-all ()
  <span style="color:#e6db74">&#34;My howm list all.&#34;</span>
  (interactive)
  (setq howm-directory <span style="color:#e6db74">&#34;~/Dropbox/howm&#34;</span>)
  (howm-list-all))
(defun my:howm-haiku-list-all ()
  <span style="color:#e6db74">&#34;My howm list all.&#34;</span>
  (interactive)
  (setq howm-directory <span style="color:#e6db74">&#34;~/Dropbox/howm/haiku&#34;</span>)
  (howm-list-all))
(defun my:howm-junk-list-all ()
  <span style="color:#e6db74">&#34;My howm list all.&#34;</span>
  (interactive)
  (setq howm-directory <span style="color:#e6db74">&#34;~/Dropbox/howm/junk&#34;</span>)
  (howm-list-all))

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 60_howm.el ends here</span>
</code></pre></div><h2 id="hydra-search-web">Hydra-search-web</h2>
<p><img src="https://farm8.staticflickr.com/7825/40497399043_4d85414338_b.jpg" alt="Alt Text"></p>
<p>必須のgoogle-translateは別設定です。</p>
<p>googole-this とかを使うTipsも多いですが、私は昔から、<a href="https://github.com/nomaddo/search-web.el">search-web</a> というパッケージを愛用しています。簡単な設定で自由にカスタマイズすることができて様々な検索サイトを利用することが出来るからです。</p>
<p>郵便番号から住所を検索したりgoogle−mapやgoogle-earthを検索すると圧巻です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 50_hydra-search-web.el --- 50_hydra-search-web.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;;(setq debug-on-error t)</span>

(use-package search-web)
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;weblio&#34;</span> <span style="color:#e6db74">&#34;http://weblio.jp/content/%s&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;kobun&#34;</span> <span style="color:#e6db74">&#34;http://kobun.weblio.jp/content/%s&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;ruigo&#34;</span> <span style="color:#e6db74">&#34;http://thesaurus.weblio.jp/content/%s&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;github&#34;</span> <span style="color:#e6db74">&#34;https://github.com/search?utf8=✓&amp;q=%s&amp;ref=simplesearch&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;qitta&#34;</span> <span style="color:#e6db74">&#34;https://qiita.com/search?q=%s&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;post&#34;</span> <span style="color:#e6db74">&#34;https://postcode.goo.ne.jp/search/q/%s/&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;earth&#34;</span> <span style="color:#e6db74">&#34;https://earth.google.com/web/search/%s/&#34;</span> <span style="color:#66d9ef">nil</span>))


(bind-key
 <span style="color:#e6db74">&#34;s-s&#34;</span>
 (defhydra hydra-search-web (:color red :hint <span style="color:#66d9ef">nil</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">Search:  _a_mazon  _g_oogle  _t_ranslate  _e_ijiro  _m_aps  git_h_ub  _q_itta  _w_eblio  _p_〒  _k_古語  _r_類語 _._close&#34;</span>
  (<span style="color:#e6db74">&#34;a&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;amazon jp&#34;</span>))
  (<span style="color:#e6db74">&#34;e&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;eijiro&#34;</span>))
  (<span style="color:#e6db74">&#34;g&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;google&#34;</span>))
  (<span style="color:#e6db74">&#34;m&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;google maps&#34;</span>))
  (<span style="color:#e6db74">&#34;h&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;github&#34;</span>))
  (<span style="color:#e6db74">&#34;q&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;qitta&#34;</span>))
  (<span style="color:#e6db74">&#34;w&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;weblio&#34;</span>))
  (<span style="color:#e6db74">&#34;p&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;post&#34;</span>))
  (<span style="color:#e6db74">&#34;k&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;kobun&#34;</span>))
  (<span style="color:#e6db74">&#34;r&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;ruigo&#34;</span>))
  (<span style="color:#e6db74">&#34;t&#34;</span> google-translate-auto)
  (<span style="color:#e6db74">&#34;q&#34;</span> <span style="color:#66d9ef">nil</span>)
  (<span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#66d9ef">nil</span> :color blue)))

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 50_hydra-search-web.el ends here</span>
</code></pre></div><h2 id="まとめ">まとめ</h2>
<p><img src="https://farm8.staticflickr.com/7891/47410497172_5f912d55c9_b.jpg" alt="Alt Text"></p>
<p>とりいそぎざっくりと紹介しました。自作のコードはほとんどなく大半はパッチワークです。</p>
<p>Emacsの設定ファイルはGitHubに公開していますので興味ある方は覗いてみてください。</p>
<ul>
<li><a href="https://github.com/minorugh/emacs.d">https://github.com/minorugh/emacs.d</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Hydraで複数のmakeコマンドを自在に使う</title>
            <link>http://minorugh.github.io/posts/multiple-make-commands/</link>
            <pubDate>Mon, 04 Mar 2019 14:20:41 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/multiple-make-commands/</guid>
            <description>ホームページ管理のためにEmacsをワークデスクとして色んな作業をしています。その中で何度も繰り返し行う作業はMakeファイルに書いて限りな</description>
            <content type="html"><![CDATA[<p>ホームページ管理のためにEmacsをワークデスクとして色んな作業をしています。その中で何度も繰り返し行う作業はMakeファイルに書いて限りなく自動化して、それをEmacsから実行しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp">M-x compile
</code></pre></div><p>とすると、</p>
<pre><code>Compile command: make -k
</code></pre><p>とミニバッファーにでます。ここでリターンキーを押すと、makeコマンドが実行されます。</p>
<p>makeファイルの中の特定のブロックを実行したい時、例えば更新されたファイルをサーバーにアップロードしてホームページを更新する時は、<code>make -k</code> を消して <code>make upftp</code> と書き換えてリターンキーを押すとupftpコマンドが実行されるという仕組みです。</p>
<p>通常この使用法でも大した問題はないのですが、compile-commandの内容を書き換えて実行すると、次回に<code>M-x compile</code>コマンドを実行したとき <code>make -k</code> にはならず、先程の書き換えたものがデフォルトに変わってしまうのです。</p>
<p>そこで いろいろな引数でmakeコマンドを使い分けるためい、hydraで設定してみました。</p>
<h2 id="設定">設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;;; 50_hydra-compile.el --- 50_hydra-compile.el</span>
<span style="color:#75715e">;;; Commentary:</span>
<span style="color:#75715e">;;; Code:</span>
<span style="color:#75715e">;;(setq debug-on-error t)</span>

(bind-key
 [f2]
 (defhydra hydra-compile (:color red :hint <span style="color:#66d9ef">nil</span>)
  <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">╭─────────────────────────────────────┐
</span><span style="color:#e6db74">│ 🗿 Compile:
</span><span style="color:#e6db74">     make:_a_ll  _u_pftp  _m_ove  _b_klog  _g_it
</span><span style="color:#e6db74">     ---------------------------------
</span><span style="color:#e6db74">     make:-_k_   _c_lean
</span><span style="color:#e6db74">└──────────────────────────────────────┘&#34;</span>
   (<span style="color:#e6db74">&#34;a&#34;</span> my:make-all :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;u&#34;</span> my:make-upftp :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;m&#34;</span> my:make-move :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;b&#34;</span> my:make-bklog :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;g&#34;</span> my:make-git :exit <span style="color:#66d9ef">t</span>)
   (<span style="color:#e6db74">&#34;k&#34;</span> my:make-default)
   (<span style="color:#e6db74">&#34;c&#34;</span> my:make-clean)))

(defun my:make-default ()
  <span style="color:#e6db74">&#34;Make command default.&#34;</span>
  (interactive)
  (setq compile-command <span style="color:#e6db74">&#34;make -k&#34;</span>)
  (my:compile))

(defun my:make-upftp ()
  <span style="color:#e6db74">&#34;Make command for upftp.&#34;</span>
  (interactive)
  (setq compile-command <span style="color:#e6db74">&#34;make up&#34;</span>)
  (my:compile))

(defun my:make-all ()
  <span style="color:#e6db74">&#34;Make command for all.&#34;</span>
  (interactive)
  (setq compile-command <span style="color:#e6db74">&#34;make -k &amp;&amp; make up&#34;</span>)
  (my:compile))

(defun my:make-move ()
  <span style="color:#e6db74">&#34;Make command for move.&#34;</span>
  (interactive)
  (setq compile-command <span style="color:#e6db74">&#34;make mv&#34;</span>)
  (my:compile))

(defun my:make-bklog ()
  <span style="color:#e6db74">&#34;Make command for bklog.&#34;</span>
  (interactive)
  (setq compile-command <span style="color:#e6db74">&#34;make bk&#34;</span>)
  (my:compile))

(defun my:make-git ()
  <span style="color:#e6db74">&#34;Make command for git.&#34;</span>
  (interactive)
  (setq compile-command <span style="color:#e6db74">&#34;make git&#34;</span>)
  (my:compile))

(defun my:make-clean ()
  <span style="color:#e6db74">&#34;Make command for clean.&#34;</span>
  (interactive)
  (setq compile-command <span style="color:#e6db74">&#34;make clean&#34;</span>)
  (my:compile))

(defun my:compile ()
  <span style="color:#e6db74">&#34;Restore compile command after recompile.&#34;</span>
  (interactive)
  (recompile)
  (setq compile-command <span style="color:#e6db74">&#34;make -k&#34;</span>))

<span style="color:#75715e">;; Local Variables:</span>
<span style="color:#75715e">;; byte-compile-warnings: (not free-vars callargs)</span>
<span style="color:#75715e">;; End:</span>
<span style="color:#75715e">;;; 50_hydra-compile ends here</span>
</code></pre></div><h2 id="更に使いやすくする">更に使いやすくする</h2>
<p><code>compile</code> や  <code>shell-command</code> を実行すると結果のログが表示されます。その都度閉じるのが面倒なので <code>popwin</code> で表示させるようにします。popwin windowは &ldquo;C-g&rdquo; で閉じることができます。emacsでは何かと &ldquo;C-g&rdquo; を使うことが多いので、私はキーハックアプリで <code>command_L</code> に割り当ててワンキーで実行できるようにしています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package popwin)
(popwin-mode <span style="color:#ae81ff">1</span>)

<span style="color:#75715e">;; M-!</span>
(push <span style="color:#e6db74">&#34;*Shell Command Output*&#34;</span> popwin:special-display-config)

<span style="color:#75715e">;; M-x compile</span>
(push <span style="color:#f92672">&#39;</span>(compilation-mode :noselect <span style="color:#66d9ef">t</span>) popwin:special-display-config)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>iPadでBootstrapのnavbarをcollapseさせる</title>
            <link>http://minorugh.github.io/posts/navbar-collapse-for-ipad/</link>
            <pubDate>Thu, 21 Feb 2019 10:59:02 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/navbar-collapse-for-ipad/</guid>
            <description>CSSフレームワークのBootstrapを使って、ナビゲーション（navbar）を導入する場合、Bootstrapのデフォルトだと、iPad</description>
            <content type="html"><![CDATA[<p>CSSフレームワークのBootstrapを使って、ナビゲーション（navbar）を導入する場合、Bootstrapのデフォルトだと、iPadでnavbarがcollapseしてくれません。メニュー項目が多くなってくると、collapseしてくれないとレイアウト崩れが起きるので対策しました。</p>
<p>iPadでBootstrapのnavbarをcollapseさせるには、CSSに下記のコードを追加すればOKです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#75715e">/* navbar collapse for iPad (bootstrap) */</span>
@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">max-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">991px</span><span style="color:#f92672">)</span> {
    .<span style="color:#a6e22e">navbar-header</span> {
        <span style="color:#66d9ef">float</span>: <span style="color:#66d9ef">none</span>;
    }
    .<span style="color:#a6e22e">navbar-toggle</span> {
        <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span>;
    }
    .<span style="color:#a6e22e">navbar-collapse</span> {
        <span style="color:#66d9ef">border-top</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#66d9ef">transparent</span>;
        <span style="color:#66d9ef">box-shadow</span>: <span style="color:#66d9ef">inset</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span> rgba(<span style="color:#ae81ff">255</span>,<span style="color:#ae81ff">255</span>,<span style="color:#ae81ff">255</span>,<span style="color:#ae81ff">0.1</span>);
    }
    .<span style="color:#a6e22e">navbar-collapse</span>.<span style="color:#a6e22e">collapse</span> {
        <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">none</span><span style="color:#75715e">!important</span>;
    }
    .<span style="color:#a6e22e">navbar-nav</span> {
        <span style="color:#66d9ef">float</span>: <span style="color:#66d9ef">none</span><span style="color:#75715e">!important</span>;
        <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">7.5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">-15</span><span style="color:#66d9ef">px</span>;
    }
    .<span style="color:#a6e22e">navbar-nav</span><span style="color:#f92672">&gt;</span><span style="color:#f92672">li</span> {
        <span style="color:#66d9ef">float</span>: <span style="color:#66d9ef">none</span>;
    }
    .<span style="color:#a6e22e">navbar-nav</span><span style="color:#f92672">&gt;</span><span style="color:#f92672">li</span><span style="color:#f92672">&gt;</span><span style="color:#f92672">a</span> {
        <span style="color:#66d9ef">padding-top</span>: <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
        <span style="color:#66d9ef">padding-bottom</span>: <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
    }
    .<span style="color:#a6e22e">navbar-text</span> {
        <span style="color:#66d9ef">float</span>: <span style="color:#66d9ef">none</span>;
        <span style="color:#66d9ef">margin</span>: <span style="color:#ae81ff">15</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span>;
    }
    .<span style="color:#a6e22e">navbar-collapse</span>.<span style="color:#a6e22e">collapse</span>.<span style="color:#a6e22e">in</span> {
        <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">block</span><span style="color:#75715e">!important</span>;
    }
    .<span style="color:#a6e22e">collapsing</span> {
        <span style="color:#66d9ef">overflow</span>: <span style="color:#66d9ef">hidden</span><span style="color:#75715e">!important</span>;
    }
}

</code></pre></div><h2 id="参考サイト">参考サイト</h2>
<ul>
<li><a href="https://qiita.com/yn01/items/2ff25dfeb0bc51257f87">https://qiita.com/yn01/items/2ff25dfeb0bc51257f87</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Perlで未定義値かどうかを判定する方法</title>
            <link>http://minorugh.github.io/posts/use-of-uninitialized-value/</link>
            <pubDate>Sun, 13 Jan 2019 18:36:50 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/use-of-uninitialized-value/</guid>
            <description>機嫌よく動いていた自作のスクリプトに use warnings; を入れたら作業そのものは止まることなく終了するのだけれど、 Use of uninitialized value ... と叱られるようになった。 foreach my $line (@log){</description>
            <content type="html"><![CDATA[<p>機嫌よく動いていた自作のスクリプトに</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#66d9ef">use</span> warnings; 
</code></pre></div><p>を入れたら作業そのものは止まることなく終了するのだけれど、</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl">Use of uninitialized value <span style="color:#f92672">...</span> 
</code></pre></div><p>と叱られるようになった。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#66d9ef">foreach</span> <span style="color:#66d9ef">my</span> $line (@log){
    chomp($line);
    <span style="color:#66d9ef">my</span> ($no,$name,$date,$mail,$comment,$pass)<span style="color:#f92672">=</span>split(<span style="color:#e6db74">/,/</span>,$line);
    <span style="color:#75715e"># $comment が空だった場合の処理</span>
    <span style="color:#66d9ef">if</span>($comment <span style="color:#f92672">eq</span> <span style="color:#e6db74">&#34;&#34;</span>){
	$comment<span style="color:#f92672">=</span>$no;$c<span style="color:#f92672">++</span>
    }
    <span style="color:#66d9ef">if</span> ($c <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">7</span>){  <span style="color:#75715e"># 7日分を取得したら繰り返し終了</span>
	<span style="color:#66d9ef">last</span>
    }
	<span style="color:#f92672">....</span>
</code></pre></div><p>上記を走らせたときに下記の部分で前述の警告が出る。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#66d9ef">if</span>($comment <span style="color:#f92672">eq</span> <span style="color:#e6db74">&#34;&#34;</span>){
	$comment<span style="color:#f92672">=</span>$no;$c<span style="color:#f92672">++</span>
}
</code></pre></div><p>$comment が存在しなかったときに他の変数を代入する…</p>
<p>という条件式のつもりでしたが、存在しない（未定義の）変数だよ！ という警告なのである。落ち着いて考えたら当たり前ですね。ググってみたら未定義値かどうかを判定する
<a href="https://www.javadrive.jp/perlfunc/other/index1.html">defined関数</a>
というのがあるのを知りました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#66d9ef">if</span> (defined $name) {
  <span style="color:#f92672">...</span>
}
</code></pre></div><p>上記では定義されている場合に処理させるというものですが、私の場合は値が未定義だった場合に処理をさせたいので
<a href="https://www.javadrive.jp/perl/if/index6.html">unless</a>
を使えばいいという情報を得たので下記のように修正して警告が出なくなりました。めでたし(^o^)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e"># $comment が未定義だった場合の処理</span>
<span style="color:#66d9ef">unless</span> (defined $comment){
	$comment<span style="color:#f92672">=</span>$no;$c<span style="color:#f92672">++</span>
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>RSSフィードを取得してブログの更新情報を表示</title>
            <link>http://minorugh.github.io/posts/update-information-by-rss-feed/</link>
            <pubDate>Thu, 20 Dec 2018 19:23:18 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/update-information-by-rss-feed/</guid>
            <description>phpスクリプトに初挑戦した。 参考にした情報 ブログの更新情報をPHPで読み込んで表示する方法 記事更新後7日間はNew表示する 基本的には参考サ</description>
            <content type="html"><![CDATA[<p>phpスクリプトに初挑戦した。</p>
<h2 id="参考にした情報">参考にした情報</h2>
<ul>
<li><a href="https://sole-color-blog.com/blog/44/">ブログの更新情報をPHPで読み込んで表示する方法</a></li>
</ul>
<h2 id="記事更新後7日間はnew表示する">記事更新後7日間はNew表示する</h2>
<p>基本的には参考サイトのSampleどおり。ブログ記事更新後１週間はNew表示させるようにModifyしてみました。</p>
<p>投稿日の表示には、date(&ldquo;Y.n.j&rdquo;, strtotime($entry-&gt;pubDate)) を使いました。n：1~12 / j：1~31 表示になることも初めて知りました。
ただ１週間を判定するための比較演算式ではうまく機能しませんでしたので、そこだけは、date(&ldquo;Y/m/d&rdquo;) に変更しました。m：01~12 / d：01~31</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">date</span>(<span style="color:#e6db74">&#34;Y/m/d&#34;</span>, <span style="color:#a6e22e">strtotime</span>($entry<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">pubDate</span>)) <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">date</span>(<span style="color:#e6db74">&#39;Y/m/d&#39;</span>, <span style="color:#a6e22e">strtotime</span>(<span style="color:#e6db74">&#39;- 7 day&#39;</span>))) {<span style="color:#a6e22e">…</span>} <span style="color:#66d9ef">else</span> {<span style="color:#a6e22e">…</span>}
</code></pre></div><h2 id="完成したスクリプト">完成したスクリプト</h2>
<p>まだまだ素人臭いスクリプトで恥ずかしいけど出来上がったのは以下の通り。一応目的どおりには動きます。</p>
<h5 id="rss-update-infophp">rss-update-info.php</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>

$rssdata <span style="color:#f92672">=</span> <span style="color:#a6e22e">simplexml_load_file</span>(<span style="color:#e6db74">&#34;https://blog.wegh.net/index.xml&#34;</span>);

<span style="color:#75715e">// 読み込み件数を決定する
</span><span style="color:#75715e"></span>$num_of_data <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;

<span style="color:#75715e">//出力内容の初期化
</span><span style="color:#75715e"></span>$outdata <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;

<span style="color:#75715e">//設定した読み込み件数分だけ取得を繰り返す
</span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> ($i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; $i<span style="color:#f92672">&lt;</span>$num_of_data; $i<span style="color:#f92672">++</span>){
    $entry <span style="color:#f92672">=</span> $rssdata<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">channel</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">item</span>[$i]; <span style="color:#75715e">//記事1個取得
</span><span style="color:#75715e"></span>    $date <span style="color:#f92672">=</span> <span style="color:#a6e22e">date</span>(<span style="color:#e6db74">&#34;Y.n.j&#34;</span>, <span style="color:#a6e22e">strtotime</span>($entry<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">pubDate</span>));
    $title <span style="color:#f92672">=</span> $entry<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">title</span>; <span style="color:#75715e">//タイトル取得
</span><span style="color:#75715e"></span>    $link <span style="color:#f92672">=</span> $entry<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">link</span>; <span style="color:#75715e">//リンクURL取得
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">//出力内容（リンクとタイトル）を生成する
</span><span style="color:#75715e"></span>    $outdata <span style="color:#f92672">.=</span> <span style="color:#e6db74">&#39;&lt;span style=&#34;line-height:1.5;font-size:110%;&#34;&gt;&lt;a
</span><span style="color:#e6db74">target=&#34;_blank&#34; style=&#34;color:#24890d;text-decoration:none;&#34; href=&#34;&#39;</span> <span style="color:#f92672">.</span> $link <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&#34;&gt;&#39;</span> <span style="color:#f92672">.</span> $title <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39; &#39;</span>;
    <span style="color:#75715e">//出力内容に投稿日を加える（7日間はNew表示）
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">date</span>(<span style="color:#e6db74">&#34;Y/m/d&#34;</span>, <span style="color:#a6e22e">strtotime</span>($entry<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">pubDate</span>)) <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">date</span>(<span style="color:#e6db74">&#39;Y/m/d&#39;</span>, <span style="color:#a6e22e">strtotime</span>(<span style="color:#e6db74">&#39;- 7 day&#39;</span>)))
    {
        $outdata <span style="color:#f92672">.=</span> $date <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&lt;/a&gt; &lt;img src=&#34;./images/new.gif&#34;&gt;&lt;/span&gt;&lt;br&gt;&#39;</span>;
    } <span style="color:#66d9ef">else</span> {
        $outdata <span style="color:#f92672">.=</span> $date <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&#39;</span>;
    }
}

<span style="color:#75715e">//実行結果を出力する
</span><span style="color:#75715e"></span><span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#39;&lt;p&gt;&#39;</span> <span style="color:#f92672">.</span> $outdata <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&lt;/p&gt;&#39;</span>;

<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="screenshots">Screenshots</h2>
<p>ホームページに表示させたスクリーンショット（Gospel-Haiku Blog の部分）</p>
<p><img src="https://c1.staticflickr.com/5/4813/46393542371_325785568f_b.jpg" alt="Alt Text"></p>
]]></content>
        </item>
        
        <item>
            <title>EmacsとChromeとのシームレスな連携</title>
            <link>http://minorugh.github.io/posts/emacs-chrome-together/</link>
            <pubDate>Mon, 03 Dec 2018 22:38:54 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/emacs-chrome-together/</guid>
            <description>Emacsの設定にハマりだすとメールやインターネットプラウザなど全てのワークをEmacsで完結させよう…と考えるようになります。私もそんな一</description>
            <content type="html"><![CDATA[<p>Emacsの設定にハマりだすとメールやインターネットプラウザなど全てのワークをEmacsで完結させよう…と考えるようになります。私もそんな一人でした。あれこれと設定を試すプロセスもまた楽しいからです。でもEmacsつながりでご縁ができたあるプログラマーの方のブログ <a href="https://solist.work/blog/">Solist Work Blog</a> を読んで少しずつ考え方が変わってきました。</p>
<p>気付かされたことは、全てをEmacsで扱うために窮屈な使い方をするより、作業デスクとしてのEmacsと使い慣れたシステムやアプリとが、シームレスな感覚で連携できることのほうが遥かに意義があるということでした。まだまだ試行錯誤中で十分にまとまった記事にはなっていませんが備忘録として公開します。</p>
<h2 id="外部モニターを併用する">外部モニターを併用する</h2>
<p>これは必須ではないと思いますが実際に使ってみると実に快適です。私の場合は、メインマシンMacbook Pro に 24インチの外部モニターを接続しています。解像度とかにこだわらなければ
<a href="https://www.google.co.jp/search?q=%E5%A4%96%E9%83%A8%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC+%EF%BC%92%EF%BC%94%E3%82%A4%E3%83%B3%E3%83%81&amp;source=univ&amp;tbm=shop&amp;tbo=u&amp;sa=X&amp;ved=0ahUKEwi05fi8oYXfAhWCQN4KHVjVAlYQsxgILA&amp;biw=1920&amp;bih=1018">１~２万円で十分実用できるモニター</a> が購入できます。正面にMacbookのEmacs画面を見ながら右サイドの外部ディスプレーでChromeを開いている…というのが定番のスタイルです。</p>
<p><img src="https://c1.staticflickr.com/5/4909/45255050955_fea3e33025_b.jpg" alt="emacs-chrome"></p>
<p>Macの場合、２画面のデスクトップを自在に切り替えできます。私の場合 ctrl+1 &lt;-&gt; ctrl+2 で切り替えできるように設定して、A画面でEmacs、B画面でiTermというような使い方ができます。外部ディスプレーの方は、ほぼChrome専用という使い方ですが、<a href="https://folivora.ai/">BetterTouchTool</a> というアプリを使えば表示画面の移動などが自在にできるので便利です。</p>
<h2 id="emacsとchromeとのシームレスな連携">EmacsとChromeとのシームレスな連携</h2>
<p>Emacsでブログの文章を書いたり、プログラミングを試行したりしているとき、作業の手を止めることなく検索できたり必要な資料の載っているWEBページを一発で閲覧できるとすごく便利です。一方、Chrome（プラウザ）の textarea に長文の入力が必要なときは、Emacsで入力できるほうがストレスが少ないです。以下はそのための設定です。</p>
<h3 id="i-classfa-fa-searchi-色々web検索するための設定"><!-- raw HTML omitted --><!-- raw HTML omitted --> 色々WEB検索するための設定</h3>
<p>Melpaから <a href="https://github.com/tomoya/search-web.el">search-web</a> というPackageをインストールします。このパッケージは、<a href="URL">google-this</a>と同じコンセプトで、regionやカーソルのある部分の単語など空気を読んで検索してくれます。</p>
<p>各検索サイトがどのような引数で修理しているかさえ解れば自由にカスタマイズして応用できます。WEBページからkeywordを入力して検索するとその結果がURLボックスに表示されます。表示されたURLから引数を分析すればいいのです。私の場合、俳句でよく使う 古語検索/類語検索/季語検索などを登録しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package search-web)
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;weblio&#34;</span> <span style="color:#e6db74">&#34;http://weblio.jp/content/%s&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;kobun&#34;</span> <span style="color:#e6db74">&#34;http://kobun.weblio.jp/content/%s&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;ruigo&#34;</span> <span style="color:#e6db74">&#34;http://thesaurus.weblio.jp/content/%s&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;kigo&#34;</span> <span style="color:#e6db74">&#34;http://www.mysai.net/cgi-bin/kigo_search.cgi?txtKigo=%s&amp;rdoSelect=1&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;github&#34;</span> <span style="color:#e6db74">&#34;https://github.com/search?utf8=✓&amp;q=%s&amp;ref=simplesearch&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;qitta&#34;</span> <span style="color:#e6db74">&#34;https://qiita.com/search?q=%s&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;post&#34;</span> <span style="color:#e6db74">&#34;https://postcode.goo.ne.jp/search/q/%s/&#34;</span> <span style="color:#66d9ef">nil</span>))
(add-to-list <span style="color:#e6db74">&#39;search-web-engines</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;earth&#34;</span> <span style="color:#e6db74">&#34;https://earth.google.com/web/search/%s/&#34;</span> <span style="color:#66d9ef">nil</span>))

(bind-key
 <span style="color:#e6db74">&#34;s-s&#34;</span>
 (defhydra hydra-search-web (:hint <span style="color:#66d9ef">nil</span> :exit <span style="color:#66d9ef">t</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">[Search]  _a_:Amazon  _g_:Google  _m_:Maps  _e_:Earth  _h_:GitHub  _q_:Qitta  _w_:Weblio  _p_:Post  _b_:古文  _r_:類語&#34;</span>
  (<span style="color:#e6db74">&#34;a&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;amazon jp&#34;</span>))
  (<span style="color:#e6db74">&#34;e&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;earth&#34;</span>))
  (<span style="color:#e6db74">&#34;g&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;google&#34;</span>))
  (<span style="color:#e6db74">&#34;m&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;google maps&#34;</span>))
  (<span style="color:#e6db74">&#34;h&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;github&#34;</span>))
  (<span style="color:#e6db74">&#34;q&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;qitta&#34;</span>))
  (<span style="color:#e6db74">&#34;w&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;weblio&#34;</span>))
  (<span style="color:#e6db74">&#34;p&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;post&#34;</span>))
  (<span style="color:#e6db74">&#34;k&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;kigo&#34;</span>))
  (<span style="color:#e6db74">&#34;b&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;kobun&#34;</span>))
  (<span style="color:#e6db74">&#34;r&#34;</span> (search-web-dwim <span style="color:#e6db74">&#34;ruigo&#34;</span>))))
</code></pre></div><h3 id="i-classfa-fa-bookmark-oi-お気に入りのページを開いたりアプリを起動させたりするための設定"><!-- raw HTML omitted --><!-- raw HTML omitted --> お気に入りのページを開いたりアプリを起動させたりするための設定</h3>
<p>Melpaにあるpackage <a href="https://github.com/abo-abo/hydra">hydra</a> を使うことでお好みのミニバッファーメニューを構築できます。主にEmacsの編集をしているときに必要となるサイトを設定しておくと便利です。私の場合、Emacsから起動できたら便利かなと思うApplicationもいくつか設定しています。</p>
<p><img src="https://c1.staticflickr.com/5/4915/44353090030_e646922131_b.jpg" alt="Alt Text"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(key-chord-define-global
 <span style="color:#e6db74">&#34;kl&#34;</span>
 (defhydra hydra-browse (:hint <span style="color:#66d9ef">nil</span> :exit <span style="color:#66d9ef">t</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74"> ^Shop^           ^SNS^           ^Repos^          ^GH^           ^Favorite^      ^Others^        ^Applications^
</span><span style="color:#e6db74"> ^^^^^^------------------------------------------------------------------------------------------------
</span><span style="color:#e6db74"> _a_: Amazon      _t_: Twitter    _g_: minorugh    _h_: HOME      _j_: Jorudan    _D_: Dropbox    _c_: Calendar
</span><span style="color:#e6db74"> _r_: Rakuten     _u_: Youtube    _0_: my gist     _d_: d.kukai   _n_: News       _x_: Xserver    _l_: ForkLift
</span><span style="color:#e6db74"> _y_: Yodobashi   _f_: Flickr     _1_: masasam     _m_: m.kukai   _w_: Weather    _q_: Qiita      _@_: AirMail
</span><span style="color:#e6db74"> _k_: Kakaku      _e_: Evernote   _2_: gitbucket   _b_: BBS       _s_: SanyoBas   _p_: Pocket     _i_: iTerm
</span><span style="color:#e6db74">&#34;</span>
   (<span style="color:#e6db74">&#34;a&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.amazon.co.jp/&#34;</span>))
   (<span style="color:#e6db74">&#34;r&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.rakuten.co.jp/&#34;</span>))
   (<span style="color:#e6db74">&#34;y&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.yodobashi.com/&#34;</span>))
   (<span style="color:#e6db74">&#34;k&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://kakaku.com/&#34;</span>))
   (<span style="color:#e6db74">&#34;t&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://twitter.com&#34;</span>))
   (<span style="color:#e6db74">&#34;u&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.youtube.com/channel/UCnwoipb9aTyORVKHeTw159A/videos&#34;</span>))
   (<span style="color:#e6db74">&#34;f&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.flickr.com/photos/minorugh/&#34;</span>))
   (<span style="color:#e6db74">&#34;e&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.evernote.com/client/web#?an=true&amp;n=02ab918a-18a7-472b-a166-835a922d3fad&amp;s=s278&amp;&#34;</span>))
   (<span style="color:#e6db74">&#34;g&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://github.com/minorugh/emacs.d&#34;</span>))
   (<span style="color:#e6db74">&#34;0&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://gist.github.com/minorugh&#34;</span>))
   (<span style="color:#e6db74">&#34;1&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://github.com/masasam/dotfiles/tree/master/.emacs.d&#34;</span>))
   (<span style="color:#e6db74">&#34;2&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://localhost:8080/minoru&#34;</span>))
   (<span style="color:#e6db74">&#34;h&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://gospel-haiku.com/&#34;</span>))
   (<span style="color:#e6db74">&#34;d&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://gospel-haiku.com/d_kukai/&#34;</span>))
   (<span style="color:#e6db74">&#34;m&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://gospel-haiku.com/m_kukai/&#34;</span>))
   (<span style="color:#e6db74">&#34;b&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://gospel-haiku.com/danwa/&#34;</span>))
   (<span style="color:#e6db74">&#34;B&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://app.box.com/folder/0&#34;</span>))
   (<span style="color:#e6db74">&#34;j&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.jorudan.co.jp/&#34;</span>))
   (<span style="color:#e6db74">&#34;n&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://news.yahoo.co.jp/&#34;</span>))
   (<span style="color:#e6db74">&#34;w&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://tenki.jp/week/6/31/&#34;</span>))
   (<span style="color:#e6db74">&#34;s&#34;</span> (browse-url <span style="color:#e6db74">&#34;http://www.sanyo-bus.co.jp/pdf/180913.pdf&#34;</span>))
   (<span style="color:#e6db74">&#34;x&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.xserver.ne.jp/login_server.php&#34;</span>))
   (<span style="color:#e6db74">&#34;D&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://www.dropbox.com/home/emacs.d&#34;</span>))
   (<span style="color:#e6db74">&#34;q&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://qiita.com/minoruGH&#34;</span>))
   (<span style="color:#e6db74">&#34;v&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://drive.google.com/drive/u/0/my-drive&#34;</span>))
   (<span style="color:#e6db74">&#34;P&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://photos.google.com/?pageId=none&#34;</span>))
   (<span style="color:#e6db74">&#34;p&#34;</span> (browse-url <span style="color:#e6db74">&#34;https://getpocket.com/a/queue/list/&#34;</span>))
   (<span style="color:#e6db74">&#34;.&#34;</span> hydra-dired/body)
   (<span style="color:#e6db74">&#34;/&#34;</span> hydra-works/body)
   (<span style="color:#e6db74">&#34;c&#34;</span> my/calendar-app)
   (<span style="color:#e6db74">&#34;l&#34;</span> my/forklift-app)
   (<span style="color:#e6db74">&#34;@&#34;</span> my/amail-app)
   (<span style="color:#e6db74">&#34;i&#34;</span> my/iterm-app)))

<span style="color:#75715e">;; Launch for Mac applications</span>
(defun my/calendar-app ()
  <span style="color:#e6db74">&#34;Launch for calendar.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a calendar.app&#34;</span>))
(defun my/forklift-app ()
  <span style="color:#e6db74">&#34;Launch for forklift.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a forklift.app&#34;</span>))
(defun my/amail-app ()
  <span style="color:#e6db74">&#34;Launch for airmail3.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a &#39;airmail 3.app&#39;&#34;</span>))
(defun my/iterm-app ()
  <span style="color:#e6db74">&#34;Launch for iterm.app.&#34;</span>
  (interactive)
  (shell-command <span style="color:#e6db74">&#34;open -a iterm.app&#34;</span>))
</code></pre></div><h3 id="i-classfa-fa-editi-chromeのテキストエリアをemacsでリアルタイム編集するための設定"><!-- raw HTML omitted --><!-- raw HTML omitted --> ChromeのテキストエリアをEmacsでリアルタイム編集するための設定</h3>
<p>Google Chromeに拡張機能
<a href="https://chrome.google.com/webstore/detail/atomic-chrome/lhaoghhllmiaaagaffababmkdllgfcmc">Atomic Chrome</a>
をインストールします。つづいて、EmacsにMelpaから<a href="https://github.com/alpha22jp/atomic-chrome">atmic-chrome.el</a>をパッケージインストールしてinit.elに下記の設定を追加します。私の場合、markdownでも書けるように設定しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; atomic-chrome</span>
(atomic-chrome-start-server)
(setq atomic-chrome-default-major-mode <span style="color:#e6db74">&#39;markdown-mode</span>)
</code></pre></div><p><img src="https://c1.staticflickr.com/5/4823/31230493847_0856377333_b.jpg" alt="Alt Text"></p>
<h2 id="chromeからemacsへ色々captureする">ChromeからEmacsへ色々Captureする</h2>
<p>Chromeに拡張機能 <a href="https://chrome.google.com/webstore/detail/org-capture/kkkjlfejijcjgjllecmnejhogpbcigdc">Org Capture</a>
をインストールします。導入の詳細は
<a href="https://github.com/sprig/org-capture-extension">このページ</a> を見よ…とのことで、いろいろ設定が必要なように書かれているのですが、私の場合はMac側の設定は何もしない状態でも動きました。</p>
<p>また、org-capture-templates の設定例も書かれていましたがうまく動かなところもあってので少し変えました。WEBページを開いた状態でChromeの拡張機能のアイコンをクリックするとorg-captureの入力画面が起動しWEBページの情報が自動的にCaptureされます。</p>
<h3 id="i-classfa-fa-copyi-region選択してcaptureする"><!-- raw HTML omitted --><!-- raw HTML omitted --> region選択してCaptureする</h3>
<p>WEBページの必要なCODEの箇所などをregion選択してCaptureアイコンをクリックすると capture-template の &ldquo;p&rdquo; の設定に従って反応します。下記の画像ではTitleを入力するためにミニバッファーが入力待ちになっています。</p>
<p><img src="https://c1.staticflickr.com/5/4854/45258811415_99060f8ae9_b.jpg" alt="Alt Text"></p>
<h3 id="i-classfa-fa-linki-何も選択しないでcaptureするbookmarkするだけ"><!-- raw HTML omitted --><!-- raw HTML omitted --> 何も選択しないでCaptureする（bookmarkするだけ）</h3>
<p>region選択なしでChromeのCaptureアイコンをクリックした場合は、&ldquo;L&rdquo; の設定に従って反応します。</p>
<p><img src="https://c1.staticflickr.com/5/4911/44354397670_5d66b85f8c_b.jpg" alt="Alt Text"></p>
<p>Captureされたリンクにカーソルを置いて、&ldquo;C-c o&rdquo; でプラウザを開くことができます。</p>
<p>org-modeの設定は、『<a href="https://solist.work/blog/posts/information-organizize-method/">効率よくプログラミングを覚えるためにしていること</a> 』の記事で紹介されているものをベースにして、orgファイルを閲覧するためのミニバッファーメニューを <a href="https://github.com/abo-abo/hydra">hydra</a>で設定しました。viewモードで開くほうがキー操作が楽ですし、Tabキーでの折り畳み操作に便利なようにカーソルをバッファーの先頭行へ移動させています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package org)
(setq org-log-done <span style="color:#e6db74">&#39;time</span>)
(setq org-use-speed-commands <span style="color:#66d9ef">t</span>)
(setq org-src-fontify-natively <span style="color:#66d9ef">t</span>)
(setq org-agenda-files <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Dropbox/org/&#34;</span>))
(setq calendar-holidays <span style="color:#66d9ef">nil</span>)

(bind-key <span style="color:#e6db74">&#34;C-c a&#34;</span> <span style="color:#e6db74">&#39;org-agenda</span>)
(bind-key <span style="color:#e6db74">&#34;C-c c&#34;</span> <span style="color:#e6db74">&#39;org-capture</span>)
(bind-key <span style="color:#e6db74">&#34;C-c o&#34;</span> <span style="color:#e6db74">&#39;org-open-at-point</span>) <span style="color:#75715e">;; Open link</span>

(setq org-capture-templates
      <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#e6db74">&#34;Code capture with Chrome&#34;</span> entry (file+headline <span style="color:#e6db74">&#34;~/Dropbox/org/code.org&#34;</span> <span style="color:#e6db74">&#34;Code&#34;</span>)
	 <span style="color:#e6db74">&#34;* %^{Title} \nSOURCE: %:link\nCAPTURED: %U\n\n #+BEGIN_QUOTE emacs-lisp\n%i\n#+END_QUOTE\n&#34;</span> :prepend <span style="color:#66d9ef">t</span>)
	(<span style="color:#e6db74">&#34;L&#34;</span> <span style="color:#e6db74">&#34;Link capture with Chrome&#34;</span> entry (file+headline <span style="color:#e6db74">&#34;~/Dropbox/org/links.org&#34;</span> <span style="color:#e6db74">&#34;Links&#34;</span>)
         <span style="color:#e6db74">&#34;* [[%:link][%:description]] \nCAPTURED: %U\nREMARKS: %?&#34;</span> :prepend <span style="color:#66d9ef">t</span>)
	(<span style="color:#e6db74">&#34;m&#34;</span> <span style="color:#e6db74">&#34;Memo&#34;</span> entry (file+headline <span style="color:#e6db74">&#34;~/Dropbox/org/memo.org&#34;</span> <span style="color:#e6db74">&#34;Memo&#34;</span>)
	 <span style="color:#e6db74">&#34;* %? %U&#34;</span> :prepend <span style="color:#66d9ef">t</span>)
	(<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#e6db74">&#34;Remember&#34;</span> entry (file+headline <span style="color:#e6db74">&#34;~/Dropbox/org/remember.org&#34;</span> <span style="color:#e6db74">&#34;Remember&#34;</span>)
	 <span style="color:#e6db74">&#34;* %? %i&#34;</span> :prepend <span style="color:#66d9ef">t</span>)
	(<span style="color:#e6db74">&#34;t&#34;</span> <span style="color:#e6db74">&#34;Task&#34;</span> entry (file+headline <span style="color:#e6db74">&#34;~/Dropbox/org/task.org&#34;</span> <span style="color:#e6db74">&#34;Task&#34;</span>)
	 <span style="color:#e6db74">&#34;** TODO %? \n   SCHEDULED: %^t \n&#34;</span> :prepend <span style="color:#66d9ef">t</span>)
	(<span style="color:#e6db74">&#34;f&#34;</span> <span style="color:#e6db74">&#34;Future Task&#34;</span> entry (file+headline <span style="color:#e6db74">&#34;~/Dropbox/org/task_future.org&#34;</span> <span style="color:#e6db74">&#34;Future&#34;</span>)
	 <span style="color:#e6db74">&#34;** TODO %? \n&#34;</span> :prepend <span style="color:#66d9ef">t</span>)))

(setq org-refile-targets
      (quote ((<span style="color:#e6db74">&#34;~/Dropbox/org/archives.org&#34;</span> :level <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>)
	      (<span style="color:#e6db74">&#34;~/Dropbox/org/remember.org&#34;</span> :level <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>)
	      (<span style="color:#e6db74">&#34;~/Dropbox/org/memo.org&#34;</span> :level <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>)
	      (<span style="color:#e6db74">&#34;~/Dropbox/org/task.org&#34;</span> :level <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>))))


<span style="color:#75715e">;; Open GTD files with hydra</span>
(bind-key
 <span style="color:#e6db74">&#34;C-;&#34;</span>
 (defhydra hydra-gtd (:hint <span style="color:#66d9ef">nil</span> :exit <span style="color:#66d9ef">t</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">[GTD] _a_:Archives  _m_:Memo  _c_:Code  _l_:Links  _r_:Remember  _t_:Task  _f_:Future_Task&#34;</span>
  (<span style="color:#e6db74">&#34;a&#34;</span> my/archives-org)
  (<span style="color:#e6db74">&#34;m&#34;</span> my/memo-org)
  (<span style="color:#e6db74">&#34;c&#34;</span> my/code-org)
  (<span style="color:#e6db74">&#34;l&#34;</span> my/links-org)
  (<span style="color:#e6db74">&#34;r&#34;</span> my/remember-org)
  (<span style="color:#e6db74">&#34;t&#34;</span> my/task-org)
  (<span style="color:#e6db74">&#34;f&#34;</span> my/future-org)
  (<span style="color:#e6db74">&#34;.&#34;</span> hydra-dired/body)
  (<span style="color:#e6db74">&#34;,&#34;</span> hydra-browse/body)
  (<span style="color:#e6db74">&#34;q&#34;</span> keyboard-quit)))

<span style="color:#75715e">;; Open GTD files in view-mode</span>
(defun my/archives-org ()
  <span style="color:#e6db74">&#34;Open archives.org.&#34;</span>
  (interactive)
  (view-file <span style="color:#e6db74">&#34;~/Dropbox/org/archives.org&#34;</span>)
  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>)))
(defun my/code-org ()
  <span style="color:#e6db74">&#34;Open code.org.&#34;</span>
  (interactive)
  (view-file <span style="color:#e6db74">&#34;~/Dropbox/org/code.org&#34;</span>)
  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>)))
(defun my/links-org ()
  <span style="color:#e6db74">&#34;Open links.org.&#34;</span>
  (interactive)
  (view-file <span style="color:#e6db74">&#34;~/Dropbox/org/links.org&#34;</span>)
  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>)))
(defun my/remember-org ()
  <span style="color:#e6db74">&#34;Open remember.org.&#34;</span>
  (interactive)
  (view-file <span style="color:#e6db74">&#34;~/Dropbox/org/remember.org&#34;</span>)
  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>)))
(defun my/memo-org ()
  <span style="color:#e6db74">&#34;Open memo.org.&#34;</span>
  (interactive)
  (view-file <span style="color:#e6db74">&#34;~/Dropbox/org/memo.org&#34;</span>)
  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>)))
(defun my/future-org ()
  <span style="color:#e6db74">&#34;Open task_futurear.org.&#34;</span>
  (interactive)
  (view-file <span style="color:#e6db74">&#34;~/Dropbox/org/task_future.org&#34;</span>)
  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>)))
(defun my/task-org ()
  <span style="color:#e6db74">&#34;Open archives.org.&#34;</span>
  (interactive)
  (view-file <span style="color:#e6db74">&#34;~/Dropbox/org/task.org&#34;</span>)
  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>)))
</code></pre></div><h3 id="i-classfa-fa-bookmark-oi-ブックマークの管理について考えてみる"><!-- raw HTML omitted --><!-- raw HTML omitted --> ブックマークの管理について考えてみる</h3>
<p>『<a href="https://solist.work/blog/posts/chrome/">Chromeのブックマークの整理法</a>』
の記事がとても参考になりました。私の場合、次のような棲み分けをしています。</p>
<ul>
<li>Chromeから頻繁にアクセスするWEBページ
 <!-- raw HTML omitted --><!-- raw HTML omitted --> ブックマークバーに入れる（アイコンのみにするとたくさん入れられる）</li>
<li>あとでもう一度見たい…というような個別の記事
 <!-- raw HTML omitted --><!-- raw HTML omitted --> Pocketに入れる（ゴミ屋敷にならないように時々掃除する）</li>
<li>Emacsでの作業に関連があって情報資源として残しておきたいもの
 <!-- raw HTML omitted --><!-- raw HTML omitted --> org-captureする（これも時々棚卸し）</li>
</ul>
<p>ChromeのブックマークバーやPocketに保存したものはスマホにも自動的に同期されます。org-caputerしたものは <a href="https://play.google.com/store/apps/details?id=com.orgzly&amp;hl=ja">Orgzly</a> をインストールしてDropboxで同期しておけばスマホで見ることができます。GitHubもスマホアプリで閲覧できます。このようにスマホから自宅Workのチラ見ができようにしておくことはとても重要です。パソコンと睨めっこしていて思考が行き詰まったとき、バスや電車での移動中にリラックスしてスマホでチラ見ているとふと柔軟な発想が授かる…という経験を何度もしています。きちんとしたコンセプトのもとにブックマークを整理しておいて、いつでもどんな場所からでもすぐに見つけられるようにしておくというのはとても大事なことだと思います。</p>
]]></content>
        </item>
        
        <item>
            <title>Formをhtmlに直接表示しないでcgiで別窓表示する</title>
            <link>http://minorugh.github.io/posts/multipurpose-formmail/</link>
            <pubDate>Mon, 05 Nov 2018 17:09:06 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/multipurpose-formmail/</guid>
            <description>&lt;p&gt;読者からのFeedbackを受け付けるためにホームページ上のコンテンツごとにメールフォームを貼っていた。
SPAM対策はしてあったがそれでもそれをくぐり抜けて攻撃されることが多くなったので、各ページにフォームを貼り付けるのはやめてCGIで表示させるようにした。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>読者からのFeedbackを受け付けるためにホームページ上のコンテンツごとにメールフォームを貼っていた。
SPAM対策はしてあったがそれでもそれをくぐり抜けて攻撃されることが多くなったので、各ページにフォームを貼り付けるのはやめてCGIで表示させるようにした。</p>
<h5 id="formcgi">form.cgi</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e">#!/usr/bin/perl</span>

<span style="color:#66d9ef">use</span> Encode <span style="color:#e6db74">&#39;decode&#39;</span>;
$subject <span style="color:#f92672">=</span> @ARGV[<span style="color:#ae81ff">0</span>];

<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Content-type: text/html; charset=utf-8\n\n&#34;</span>;
<span style="color:#66d9ef">print</span><span style="color:#e6db74">&lt;&lt;&#34;</span><span style="color:#e6db74">EOF</span><span style="color:#e6db74">&#34;;
</span><span style="color:#e6db74">&lt;form method=&#34;post&#34; action=&#34;http://*******/send.cgi&#34; onsubmit=&#34;return sendmail(this);&#34;&gt;
</span><span style="color:#e6db74">&lt;!--ここに$subjectに応じた画面表示用のfrom.htmlを書く --&gt;
</span><span style="color:#e6db74"></span><span style="color:#e6db74">EOF</span>
</code></pre></div><p><code>form.cgi?subject</code> で起動させると、引数（例えばコンテンツ名）の値が <code>@ARGV[0];</code> に保存される。
私の例では、<code>$subject</code> がそれになる。</p>
<p>form.cgiスクリプトの中で引数の値に応じて分岐させることで、引数に応じて全く異なる画面表示にすることも可能である。
私の場合は、各コンテンツのページタイトルを引数$subjectとして指定するようにしている。</p>
<h2 id="screenshot">Screenshot</h2>
<p><code>form.cgi?みのるの日記</code> でアクセスした場合の表示画面をスクショで撮ったので貼っておく。</p>
<p>下の例では、「みのるの日記」 部分の表示が <code>$subject</code> によって変化するのである。</p>
<!-- raw HTML omitted -->]]></content>
        </item>
        
        <item>
            <title>複数アカウトでtwittering-modeを使う </title>
            <link>http://minorugh.github.io/posts/multi-account-for-twimode/</link>
            <pubDate>Mon, 15 Oct 2018 14:19:10 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/multi-account-for-twimode/</guid>
            <description>&lt;p&gt;EmacsのTwittering-modeで複数アカウントを扱うという課題に挑戦してみました。アカウント毎にログイン用のgpgファイルを生成し、基本設定部分をその都度リッセトしながら切り替えているだけです。意外と簡単に実現できたので備忘録として残しておきます。設定を見ていただければ、&amp;ldquo;な〜んだ(^o^)&amp;rdquo; という落ちでしょうね。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>EmacsのTwittering-modeで複数アカウントを扱うという課題に挑戦してみました。アカウント毎にログイン用のgpgファイルを生成し、基本設定部分をその都度リッセトしながら切り替えているだけです。意外と簡単に実現できたので備忘録として残しておきます。設定を見ていただければ、&ldquo;な〜んだ(^o^)&rdquo; という落ちでしょうね。</p>
<h2 id="設定">設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Clear existing twit buffers</span>
(defun my/reload-twit ()
  (<span style="color:#a6e22e">mapcar</span>
   (lambda (buffer)
     (twittering-deactivate-buffer buffer)
     (<span style="color:#a6e22e">kill-buffer</span> buffer))
   (twittering-get-buffer-list))
  (twittering-unregister-killed-buffer)
  <span style="color:#75715e">;; Clear variables</span>
  (setq twittering-private-info-file-loaded <span style="color:#66d9ef">nil</span>)
  (setq twittering-account-authorization <span style="color:#66d9ef">nil</span>)
  (setq twittering-oauth-access-token-alist <span style="color:#66d9ef">nil</span>)
  (setq twittering-buffer-info-list <span style="color:#66d9ef">nil</span>)
  (setq twittering-timeline-data-table (<span style="color:#a6e22e">make-hash-table</span> :test <span style="color:#e6db74">&#39;equal</span>))
  (twit))

(defun my/twit-1 ()
  (interactive)
  (setq twittering-private-info-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;~/.twittering-mode.gpg&#34;</span>))
  <span style="color:#75715e">;; timeline to read on startup</span>
  (setq twittering-initial-timeline-spec-string <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;minoruGH&#34;</span> <span style="color:#e6db74">&#34;:mentions&#34;</span> <span style="color:#e6db74">&#34;:home&#34;</span>))
  (my/reload-twit))

(defun my/twit-2 ()
  (interactive)
  (setq twittering-private-info-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;~/Dropbox/dotfiles/twittering-mode2.gpg&#34;</span>))
  <span style="color:#75715e">;; timeline to read on startup</span>
  (setq twittering-initial-timeline-spec-string <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;gospelhaiku&#34;</span> <span style="color:#e6db74">&#34;:mentions&#34;</span> <span style="color:#e6db74">&#34;:home&#34;</span>))
  (my/reload-twit))

<span style="color:#75715e">;; Twitterring-mode settings</span>
(use-package twittering-mode)
(setq twittering-use-master-password <span style="color:#66d9ef">t</span>)

<span style="color:#75715e">;; 以降、必要な共通設定を書きます。</span>

</code></pre></div><h2 id="twitterの公式アプリで複数アカウントを切り替える">Twitterの公式アプリで複数アカウントを切り替える</h2>
<p>紐付けのメールアドレスさえ確保できれば、複数アカウントの取得は何も問題ありませんが、
Emacsのtwittering-modeで複数環境を構築するには、アカウントごとにgpgファイルを生成させる必要があります。</p>
<p>そのために公式アプリで複数アカウントを切り替えられる用に設定しておくと便利です.</p>
<ul>
<li><a href="https://pc-etcetera.com/twitter-9/">複数アカウントを公式アプリで切り替える方法</a></li>
</ul>
<h2 id="アカウントごとの-twittering-modegpg-を作る">アカウントごとの twittering-mode.gpg を作る</h2>
<p>いろんなやり方があると思いますが、私が試した最も手っ取り早い方法を紹介しておきます。</p>
<ol>
<li>上記で紹介した「複数アカウントを公式アプリで切り替える」準備ができたら、まずChromeとかのプラウザを起動し、まずサブのアカウントでログインしておきます。</li>
<li>次にEmacsからtwittering-modeを起動するとプラウザがログイン中のTwitterとの連携を聞いてくるので承認するとPINコードが表示されるのでmini-bufferにコピーしてEnterします。</li>
<li>つづいてgpgのパスフレーズを聞かれるので任意のパスワードを入力（2回）するとTimelineが表示されます。</li>
<li>いちどEmacsを閉じて、~/.twittering-mode.gpg が作成されているか確認し、無事生成されていたらそのファイルをどこか別の場所に移動します。コピーではなく移動です。</li>
<li>上記の設定例では、~/Dropbox/dotfiles/ に移動して、twittering-mode2.gpg にリネームしています。</li>
<li>プラウザでログインしているサブアカウントをログアウトして、メインのアカウントにログインし直します。</li>
<li>以後、サブアカウントのときと同様の手順で、~/.twittering-mode.gpg を生成させます。</li>
<li>以上で準備完了です。</li>
</ol>
<p>Emacsを再起動して、 <code>M-x my/twit-1</code> / <code>M-x my/twit-2</code> と切り替えてみましょう。Emacsを起動するたびにパスワードを聞かれるのはやむを得ませんが、快適に切り替わるはずです。</p>
<p>私の場合、混乱しないためにメイン/サブアカウントとも同じパスワードにしています。不安であれば定期的に変えればいいだけです。</p>]]></content>
        </item>
        
        <item>
            <title>makefile でのOS条件分岐</title>
            <link>http://minorugh.github.io/posts/ifeq-for-makefile/</link>
            <pubDate>Mon, 15 Oct 2018 13:13:43 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/ifeq-for-makefile/</guid>
            <description>&lt;p&gt;自動化のためにmakefileを書いています。&lt;/p&gt;
&lt;p&gt;私の場合、Linux端末とMacとの異なる環境で共通のmakefileを使いますので、条件分岐を勉強してみました。無手勝流ながら以下の設定でうまく作動してくれるようになりました。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>自動化のためにmakefileを書いています。</p>
<p>私の場合、Linux端末とMacとの異なる環境で共通のmakefileを使いますので、条件分岐を勉強してみました。無手勝流ながら以下の設定でうまく作動してくれるようになりました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># maikefile</span>

ifeq <span style="color:#f92672">(</span><span style="color:#66d9ef">$(</span>shell uname<span style="color:#66d9ef">)</span>,Linux<span style="color:#f92672">)</span>
.txt.html:
	perl ~/Dropbox/Web/GH/mw/makeweb.pl $&lt; $@
	chromium $@
<span style="color:#66d9ef">else</span>
.txt.html:
	perl ~/Dropbox/Web/GH/mw/makeweb.pl $&lt; $@
	open -a <span style="color:#e6db74">&#34;Google Chrome&#34;</span> $@
endif
</code></pre></div><h4 id="ifeq-を使う">ifeq を使う</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ifeq  <span style="color:#f92672">(</span><span style="color:#66d9ef">$(</span>shell uname<span style="color:#66d9ef">)</span>,Linux<span style="color:#f92672">)</span>
</code></pre></div><p>というところが条件判断の部分です。</p>
<p>何をしているかというと、<a href="https://www.hyuki.com/makeweb/">結城浩さんのMakewebというPerlスクリプト</a> を使って、TEXTフォーマットのファイルをHTMLフォーマットに書き出しています。この部分はLinuxもMacも共通です。</p>
<p>つづいて、書き出された当該ファイルを自動的に Chromeで開くという簡単なコマンドなのですが、LinuxとMacとでは命令の標記が異なるので分岐させて各々のコマンドを書いています。</p>
<h4 id="uname">uname</h4>
<p>unameは、Linuxコマンドなので、windowsでは使えないですが、Linux/Mac の判別には便利です。</p>
<p>ターミナルで <code>uname</code> コマンドを打つことで、OSの情報を得ることができます。</p>
<p>上記の例では、Linux かどうかを判断させてLinuxのコマンドを書き、elseでMac のコマンドを実行させていますが、逆にしたい場合は以下のように書きます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ifeq  <span style="color:#f92672">(</span><span style="color:#66d9ef">$(</span>shell uname<span style="color:#66d9ef">)</span>,Darwin<span style="color:#f92672">)</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>YaTeXからplatexを使えるようにする</title>
            <link>http://minorugh.github.io/posts/platex-from-yatex/</link>
            <pubDate>Sat, 29 Sep 2018 14:12:56 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/platex-from-yatex/</guid>
            <description>&lt;p&gt;MacのTex環境（BasicTex）を2017basicからを2018basiにバージョンアップさせようとしてつまずいたので備忘録を残しておきます。&lt;/p&gt;
&lt;p&gt;今どきは、Pandocなどで手軽にmd2pdfとかするのが流行りのようですが、私の場合は俳句関係での利用がメインで縦書きやルビうち、書籍としての組版などもするので目的別に txt2tex.plを作成して、makefileでtexファイルを自動生成したあとYaTeXでPDFにするようにしています。&lt;/p&gt;
&lt;p&gt;今回は、インストール済みの古いTex環境を全て削除したうえで新たにインストールしました。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>MacのTex環境（BasicTex）を2017basicからを2018basiにバージョンアップさせようとしてつまずいたので備忘録を残しておきます。</p>
<p>今どきは、Pandocなどで手軽にmd2pdfとかするのが流行りのようですが、私の場合は俳句関係での利用がメインで縦書きやルビうち、書籍としての組版などもするので目的別に txt2tex.plを作成して、makefileでtexファイルを自動生成したあとYaTeXでPDFにするようにしています。</p>
<p>今回は、インストール済みの古いTex環境を全て削除したうえで新たにインストールしました。</p>
<ul>
<li><a href="https://qiita.com/tetsuo_jp/items/04a66b8f42946b5c5a5a">macでtex環境を削除</a></li>
</ul>
<h2 id="動作環境">動作環境</h2>
<ul>
<li>OS: macOS High Sierra 10.13.6</li>
<li>Emacs: emacs-26.1-mac-7.1 （Download from <a href="https://github.com/railwaycat/homebrew-emacsmacport/releases">Emacs-Mac-Port</a>）</li>
</ul>
<h2 id="basictex-のインストール">BasicTeX のインストール</h2>
<p>Texlive のフルパッケージまでは必要ないのでが容量の少ないBasicTexをインストールします。いろんな導入記事を参考にしましたが、シンプルでわかりやすかった TEX Wiki のサイトを参考にしました。</p>
<ul>
<li><a href="https://texwiki.texjp.org/?BasicTeX">TEX Wikki BasicTex</a></li>
</ul>
<h3 id="basictexpkg-でインストール">BasicTeX.pkg でインストール</h3>
<p><a href="http://tug.org/mactex/morepackages.html">More Packages - MacTeX</a> または <a href="https://texwiki.texjp.org/?MacTeX#mirror">ミラーサイト (MacTeX)</a> から BasicTeX.pkg をダウンロードします。</p>
<p>BasicTeX のインストールの流れは以下のとおりです。</p>
<ol>
<li>ダウンロードした BasicTeX.pkg をダブルクリックしてインストールします。</li>
<li>ターミナル上で sudo tlmgr update &ndash;self &ndash;all を実行し，最新版までアップデートします。</li>
<li>ターミナル上で sudo tlmgr paper a4 を実行してデフォルトの用紙サイズを A4 に変更します。</li>
<li>**【重要】BasicTeX には標準で日本語 pTeX / upTeX が入っていません。**これらを使えるようにするために collection-langjapanese を追加でインストールします。collection-langjapanese をインストールすれば，依存関係で collection-langcjk もインストールされます。</li>
</ol>
<p>上記ターミナル上での手順をまとめると以下のとおりです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo tlmgr update --self --all 
sudo tlmgr paper a4 
sudo tlmgr install collection-langjapanese
</code></pre></div><h2 id="フォント関係の設定">フォント関係の設定</h2>
<p>以下の記事を参考にしました。</p>
<ul>
<li><a href="http://doratex.hatenablog.jp/entry/20180501/1525144736#5">MacTeX 2018 のインストール＆日本語環境構築法</a></li>
</ul>
<h3 id="tlcontrib-からの追加インストール">TLContrib からの追加インストール</h3>
<p>続いて，TLContrib をレポジトリとして登録し，そこからmacOS／ヒラギノ関連のパッケージをダウンロードします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo tlmgr repository add http://contrib.texlive.info/current tlcontrib
sudo tlmgr pinning add tlcontrib <span style="color:#e6db74">&#39;*&#39;</span>
sudo tlmgr install japanese-otf-nonfree japanese-otf-uptex-nonfree ptex-fontmaps-macos cjk-gs-integrate-macos
</code></pre></div><h3 id="ヒラギノフォントの準備">ヒラギノフォントの準備</h3>
<p>続いて，macOS に標準で用意されている美しいヒラギノフォントを TeX で使用するため，次の一連のコマンドを実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo cjk-gs-integrate --link-texmf --cleanup --force
sudo cjk-gs-integrate-macos --link-texmf --force
sudo mktexlsr
</code></pre></div><h3 id="ヒラギノフォントの埋め込み設定">ヒラギノフォントの埋め込み設定</h3>
<p>ヒラギノフォントを埋め込んだPDFを作成するために、次のコマンドを実行します。
私の場合はmacOS 10.13 High Sierra ですが、macOS のバージョンによって実行するコマンドが異なります。macOSの他のバージョンでの設定は、前述の参考サイトの記事を見てください。</p>
<h5 id="macos-1013-high-sierra-の場合">macOS 10.13 High Sierra の場合</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo kanji-config-updmap-sys --jis2004 hiragino-highsierra-pron
</code></pre></div><p>以上で，(u)pLaTeX + dvipdfmx によって，美しいヒラギノフォントを埋め込んだ和文PDFを作成できるようになりました。</p>
<h2 id="自前のスタイルファイルの置き場所">自前のスタイルファイルの置き場所</h2>
<p>私の場合、縦書き文書での利用が多く、バイブルとして下記の書を座右においています。</p>
<ul>
<li><a href="http://xymtex.my.coocan.jp/fujitas2/texlatex/index.html">藤田眞作著：pLaTeX2ε入門・縦横文書術</a></li>
</ul>
<p>そこには、縦組み関係のスタイルシートが多く紹介されていて <a href="http://xymtex.my.coocan.jp/fujitas2/texlatex/index.html">著者のホームページ</a> から必要なものをダウンロードできます。でもそれらはわかりやすい場所に置いておきたいと考えて下記の記事を参考にして専用のディレクトリを作りました。</p>
<ul>
<li><a href="http://ijairai.hatenablog.com/entry/2015/07/31/235043">Mac OS でのスタイルファイル（.sty）の置き場所</a></li>
</ul>
<h2 id="yatexの設定">YaTeXの設定</h2>
<p>参考までに私の Emacs:YaTeXの設定を貼っておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">(<span style="color:#a6e22e">use-package</span> yatex)
(add-to-list <span style="color:#e6db74">&#39;auto-mode-alist</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;\\.tex\\&#39;&#34;</span> <span style="color:#f92672">.</span> yatex-mode))

<span style="color:#75715e">;; Script for opening PDF generated from dvi in ​​Preview.app</span>
<span style="color:#75715e">;; Create dvpd.sh as follows and place it in /usr/local/bin</span>
<span style="color:#75715e">;; | #!/bin/bash</span>
<span style="color:#75715e">;; | name=$1</span>
<span style="color:#75715e">;; | dvipdfmx $1 &amp;&amp; open -a Preview.app ${name%.*}.pdf</span>

(<span style="color:#66d9ef">setq</span> tex-command <span style="color:#e6db74">&#34;platex&#34;</span>
      dviprint-command-format <span style="color:#e6db74">&#34;dvpd.sh %s&#34;</span>
      YaTeX-kanji-code <span style="color:#66d9ef">nil</span>
      YaTeX-latex-message-code <span style="color:#e6db74">&#39;utf-8</span>
      Section-name <span style="color:#e6db74">&#34;documentclass&#34;</span>
      makeindex-command <span style="color:#e6db74">&#34;mendex&#34;</span>
      YaTeX-use-AMS-LaTeX <span style="color:#66d9ef">t</span>
      YaTeX-use-LaTeX2e <span style="color:#66d9ef">t</span>
      YaTeX-use-font-lock <span style="color:#66d9ef">t</span>)

(add-hook <span style="color:#e6db74">&#39;yatex-mode-hook</span>
   (lambda()
    (<span style="color:#a6e22e">use-package</span> yatexprc)
    (local-set-key [(M c)] <span style="color:#e6db74">&#39;YaTeX-typeset-buffer</span>)   <span style="color:#75715e">;; Type set</span>
    (local-set-key [(M l)] <span style="color:#e6db74">&#39;YaTeX-lpr</span>)))            <span style="color:#75715e">;; Open PDF file</span>
</code></pre></div><p>上記の設定で何をしているかというと</p>
<ul>
<li>Emacsでtexファイルを開き、YaTeX-typeset-bufferを実行するとplatexが実行されてdviファイルが生成されます。続いて、YaTeX-lprを実行するとdvpd.shが呼ばれてdvi-&gt;PDFが実行され、生成されたPDFをMacのPreview.appで自動的に開きます。</li>
<li>これの自動化を実現させるためにあらかじめdvpd.shを次のように作成し、/usr/local/binに置きます。当然PATHが通っている必要があります。ターミナルで、/usr/local/binに移動し、<code> chmod +x dvpd.sh</code> を実行して dvpd.shをコマンドとして使うために実行権限を与えます。</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># 生成されたPDFをPreview.appで開く</span>
name<span style="color:#f92672">=</span>$1
dvipdfmx $1 <span style="color:#f92672">&amp;&amp;</span> open -a Preview.app <span style="color:#e6db74">${</span>name%.*<span style="color:#e6db74">}</span>.pdf
<span style="color:#75715e"># 不要ファイルを削除</span>
rm *.au*
rm *.dv*
rm *.lo*
rm *.ou*
rm *.to*
</code></pre></div><p>以上で、快適なYaTeX &amp; platex環境が実現します。</p>]]></content>
        </item>
        
        <item>
            <title>Scratchバッファの保存と復元</title>
            <link>http://minorugh.github.io/posts/unkillable-scratch/</link>
            <pubDate>Mon, 24 Sep 2018 17:11:06 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/unkillable-scratch/</guid>
            <description>&lt;p&gt;Scratchバッファはkillさせない。Scratchバッファーの内容を保存して再起動時に復元する。
これを実現させるための Emacs-lisp は沢山紹介されていますが、MELPAからpackage-installするだけで簡単に導入できるので紹介します。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Scratchバッファはkillさせない。Scratchバッファーの内容を保存して再起動時に復元する。
これを実現させるための Emacs-lisp は沢山紹介されていますが、MELPAからpackage-installするだけで簡単に導入できるので紹介します。</p>
<h2 id="unkillable-scratch">unkillable-scratch</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; unkillable-scratch</span>
(<span style="color:#66d9ef">setq</span> unkillable-buffers <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;^\\*scratch*\\*$&#34;</span> <span style="color:#e6db74">&#34;^\\*dashboard\\*$&#34;</span>))
(unkillable-scratch <span style="color:#ae81ff">1</span>)
</code></pre></div><p>scratchバッファをkillさせないためのものですが、正規表現マッチを追加することで自由にカスタマイズできます。私の場合は、dashboardも消さないように追記しています。</p>
<h2 id="persist-scratch">persist-scratch</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; Persist and save/restore *scratch* buffer</span>
(persistent-scratch-setup-default)
</code></pre></div><p>scratchバッファの内容を保存して再起動時に復元させるものです。保存データーはデフォルトで<code>~/.emacs.d/.scratch</code>に保存されます。</p>]]></content>
        </item>
        
        <item>
            <title>タブを使わない究極のバッファー移動</title>
            <link>http://minorugh.github.io/posts/iflipb/</link>
            <pubDate>Mon, 24 Sep 2018 08:24:19 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/iflipb/</guid>
            <description>&lt;p&gt;Emacsのバッファー移動は、tabbar /  ELscreen    などのタブ系を使っていましたが、diredなどの隠れていてほしいバッファーまで開いてしまうのが嫌でした。
そんなときに、るびきちさんのこの記事を読んでiflipb.elを試してみましたのでレポートします。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Emacsのバッファー移動は、tabbar /  ELscreen    などのタブ系を使っていましたが、diredなどの隠れていてほしいバッファーまで開いてしまうのが嫌でした。
そんなときに、るびきちさんのこの記事を読んでiflipb.elを試してみましたのでレポートします。</p>
<ul>
<li><a href="http://emacs.rubikitch.com/iflipb/">詳説！Alt+Tab感覚で賢くバッファをワンタッチで切り替える</a></li>
</ul>
<p>標準機能の switch-to-buffer に比べてユニークな動作をすることは上記の記事で理解できたのですが、<a href="https://github.com/jrosdahl/iflipb">GitHubのReadme</a>
を読むと以下のような機能も設定できることがわかりました。</p>
<ul>
<li>非表示のバッファーを設定できる：iflipb-ignore-buffers</li>
<li>戻り機能（最後になったら先頭へ戻る）を設定できる：iflipb-wrap-around</li>
</ul>
<h2 id="iflipbの設定">iflipbの設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; iflipb</span>
(setq iflipb-ignore-buffers (<span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#34;^[*]&#34;</span> <span style="color:#e6db74">&#34;^magit&#34;</span> <span style="color:#e6db74">&#34;]$&#34;</span>))
(setq iflipb-wrap-around <span style="color:#66d9ef">t</span>)
(bind-key <span style="color:#e6db74">&#34;C-&lt;right&gt;&#34;</span> <span style="color:#e6db74">&#39;iflipb-next-buffer</span>)
(bind-key <span style="color:#e6db74">&#34;C-&lt;left&gt;&#34;</span> <span style="color:#e6db74">&#39;iflipb-previous-buffer</span>)
</code></pre></div><p>ignore-buffersの設定は、正規表現が使えます。上記の設定では以下のバッファーを設定しています。</p>
<ul>
<li><code>*scratch*</code>などのアスタリスクのついたもの： <code>&quot;^[*]&quot;</code></li>
<li>magit-statusを実行するたびに作られるもの： <code>&quot;^magit&quot;</code></li>
<li>diredバッファー： <code>&quot;]$&quot;</code></li>
</ul>
<p>私の場合、diredのバッファー名には、hogehoge[dir] というふうに [dir] を付加してファイル名と勘違いしないように工夫していますので、
最後の文字にマッチさせる正規表現 &ldquo;]$&rdquo; で機能します。</p>
<h2 id="ミニバッファーがタブ代わりになる">ミニバッファーがタブ代わりになる</h2>
<p>実際に使ってみてわかったのですが、バッファー移動操作をするとミニバッファーに以下のように開いているバッファー名が表示されます。
（カレントバッファーは、[ ]で囲われて表示されます。）</p>
<p><img src="https://goo.gl/YUyurv" alt="Alt Text"></p>
<p>tabbar感覚で使えるのでなかなか面白いです。</p>
<h2 id="scratchバッファーだけは直ぐに開きたい">scratchバッファーだけは直ぐに開きたい</h2>
<p>作業中に付箋感覚で使ったり、ちょこっとした式を評価したりとよく使うので<code>*scratch*</code>だけはどんなタイミングでも直ぐ開きたいですね。そのためにELscreenをタブ無しで使うことにしました。</p>
<p>ヒントになったのは下記の記事です。</p>
<ul>
<li><a href="https://goo.gl/aALmTA">超シンプル目立たない複数ウィンドウ管理(ぞ式ElScreen)</a></li>
</ul>
<h2 id="elscreenの設定">elscreenの設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; elscreen</span>
(setq elscreen-display-tab <span style="color:#66d9ef">nil</span>)  <span style="color:#75715e">;; Turn off tabs</span>
(setq elscreen-tab-display-kill-screen <span style="color:#66d9ef">nil</span>)
(setq elscreen-tab-display-control <span style="color:#66d9ef">nil</span>)
(elscreen-start)
(elscreen-create) <span style="color:#75715e">;; start with 2 tabs</span>

(bind-key <span style="color:#e6db74">&#34;C-&lt;tab&gt;&#34;</span> <span style="color:#e6db74">&#39;elscreen-next</span>)
</code></pre></div><p>ただし上記設定だけでは<code>*scratch*</code>を二面開く…という感じになって味気ないので、Emacs起動時のカレントバッファーには、以前、別記事で紹介した dashboard を表示させるようにしました。</p>
<ul>
<li><a href="https://snap.textgh.org/201710161509/">Emacsのスタート画面をイケメンにする</a></li>
</ul>
<p><img src="https://goo.gl/4bahMU" alt="Alt Text"></p>
<p>こうすることでelscreenの裏面に<code>*scratch*</code>バッファーが開かれ、表面に<code>*dashboard*</code>が表示されます。そして、<code>C-&lt;tab&gt;</code>することで表裏の切り替えができるのです。</p>
<p>実際の作業は表面を使い、iflipbを使って複数のバッファーを行き来し、必要なときは<code>C-&lt;tab&gt;</code>でいつでも<code>*scratch*</code>が呼び出せるという仕組みです。</p>]]></content>
        </item>
        
        <item>
            <title>Emacsの不要なバッファーを自動的にkillする</title>
            <link>http://minorugh.github.io/posts/tempbuf/</link>
            <pubDate>Fri, 21 Sep 2018 18:58:53 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/tempbuf/</guid>
            <description>&lt;p&gt;Emacsのbufferをtabで切り替えるのはあまり好きでないので switch-buffer の機能を使っているが、magitやdired関係の不要なバッファーが沢山増えていくと煩わしくなる。&lt;/p&gt;
&lt;p&gt;手動で削除すれば済む話ではあるが、やっぱり自動化したい。MELPAでいろいろpackageを探したが適当なものがなく、ググっていたら下記の記事を見つけました。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Emacsのbufferをtabで切り替えるのはあまり好きでないので switch-buffer の機能を使っているが、magitやdired関係の不要なバッファーが沢山増えていくと煩わしくなる。</p>
<p>手動で削除すれば済む話ではあるが、やっぱり自動化したい。MELPAでいろいろpackageを探したが適当なものがなく、ググっていたら下記の記事を見つけました。</p>
<ul>
<li><a href="https://www.shigemk2.com/entry/20120908/1347090453">不要なバッファを自動的にkillしてくれる</a></li>
</ul>
<p>早速設定して使ってみたところ実に快適！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; automatically kill unnecessary buffers</span>
(<span style="color:#a6e22e">use-package</span> tempbuf)
(add-hook <span style="color:#e6db74">&#39;dired-mode-hook</span> <span style="color:#e6db74">&#39;turn-on-tempbuf-mode</span>)
(add-hook <span style="color:#e6db74">&#39;magit-mode-hook</span> <span style="color:#e6db74">&#39;turn-on-tempbuf-mode</span>)
</code></pre></div><ul>
<li><a href="https://www.emacswiki.org/emacs/tempbuf.el">tempbuf.el はここから落としてきました。</a></li>
</ul>
<h2 id="参考">参考</h2>
<p>switch-buffer機能は、ivy-switch-buffer と iflipb とを併用しています。</p>
<p>前者は、Helm-mini の代わりに使います。後者はキー操作によって開いているバッファーを切り替えたいときに使います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(ivy-mode <span style="color:#ae81ff">1</span>)
(setq ivy-use-virtual-buffers <span style="color:#66d9ef">t</span>)
(setq enable-recursive-minibuffers <span style="color:#66d9ef">t</span>)
(bind-key <span style="color:#e6db74">&#34;M-:&#34;</span> <span style="color:#e6db74">&#39;ivy-switch-buffer</span>)
</code></pre></div><p>iflipb.el の機能は、Emacs標準の <code>M-x switch-to-next-buffer</code> とは全く別物で優れものです。詳細はるびきちさんの記事が参考になるでしょう。</p>
<ul>
<li><a href="http://emacs.rubikitch.com/iflipb/">詳説！Alt+Tab感覚で賢くバッファをワンタッチで切り替える</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; iflipb</span>
(setq iflipb-ignore-buffers (<span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#34;^[*]&#34;</span> <span style="color:#e6db74">&#34;^magit&#34;</span>))
(bind-key <span style="color:#e6db74">&#34;C-&lt;right&gt;&#34;</span> <span style="color:#e6db74">&#39;iflipb-next-buffer</span>)
(bind-key <span style="color:#e6db74">&#34;C-&lt;left&gt;&#34;</span> <span style="color:#e6db74">&#39;iflipb-previous-buffer</span>)
</code></pre></div><p>私は org-modeを使わないので <code>C-&lt;right&gt;</code> <code>C-&lt;left&gt;</code> に key bind してますが、そこはお好みで設定してください。</p>]]></content>
        </item>
        
        <item>
            <title>Macの &#39;too many open file&#39; エラーを解消する方法</title>
            <link>http://minorugh.github.io/posts/too-many-open-file/</link>
            <pubDate>Wed, 02 May 2018 13:58:42 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/too-many-open-file/</guid>
            <description>MacでEmacsを起動しているときに &#39;too many open file&#39; と出て固まってしまうことがありました。 別環境のDebianで起動しているEmacsでは、そうし</description>
            <content type="html"><![CDATA[<p>MacでEmacsを起動しているときに <code>'too many open file'</code> と出て固まってしまうことがありました。</p>
<p>別環境のDebianで起動しているEmacsでは、そうした現象もないので、Mac固有の問題だと考えて情報を収集していたら、
以下のTipsを見つけました。</p>
<ul>
<li><a href="https://qiita.com/sou_lab/items/1ca051a1f3b906a23dc8">Macの「Too many open files」エラーを解消</a></li>
</ul>
<p>以下、内容的には重複しますが備忘録として残しておきます。</p>
<h2 id="macの上限値を調べる">Macの上限値を調べる</h2>
<p>ターミナルでコマンドを打って現在の上限数を確認。
私の場合は、以下の表示でした。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo launchctl limit
    cpu         unlimited      unlimited
    filesize    unlimited      unlimited
    data        unlimited      unlimited
    stack       <span style="color:#ae81ff">8388608</span>        <span style="color:#ae81ff">67104768</span>
    core        <span style="color:#ae81ff">0</span>              unlimited
    rss         unlimited      unlimited
    memlock     unlimited      unlimited
    maxproc     <span style="color:#ae81ff">1418</span>           <span style="color:#ae81ff">2128</span>
    maxfiles    <span style="color:#ae81ff">256</span>            unlimited
</code></pre></div><p>maxfilesが 256 になっているのが確認できました。</p>
<h2 id="設定ファイルを作る">設定ファイルを作る</h2>
<p><code>/Library/LaunchDaemons/limit.maxfiles.plist</code> に設定ファイルを作成する。</p>
<p>初期では、当該ファイルはないので新規に作成します。</p>
<pre><code>$sudo vi /Library/LaunchDaemons/limit.maxfiles.plist
</code></pre><p>vi が開かれたら以下のようにペーストします。</p>
<h5 id="limitmaxfilesplist">limit.maxfiles.plist</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#f92672">&lt;</span>?xml version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1.0&#34;</span> encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span><span style="color:#e6db74">?&gt;</span>  
<span style="color:#f92672">&lt;!</span><span style="color:#66d9ef">DOCTYPE</span> plist <span style="color:#66d9ef">PUBLIC</span> <span style="color:#e6db74">&#34;-//Apple//DTD PLIST 1.0//EN&#34;</span> <span style="color:#e6db74">&#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;</span><span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;</span>plist version<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1.0&#34;</span><span style="color:#f92672">&gt;</span>  
  <span style="color:#f92672">&lt;</span>dict<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>key<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">Label</span><span style="color:#f92672">&lt;</span><span style="color:#e6db74">/key&gt;
</span><span style="color:#e6db74">    &lt;string&gt;limit.maxfiles&lt;/s</span>tring<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>key<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">ProgramArguments</span><span style="color:#f92672">&lt;</span><span style="color:#e6db74">/key&gt;
</span><span style="color:#e6db74">    &lt;array&gt;
</span><span style="color:#e6db74">      &lt;string&gt;launchctl&lt;/s</span>tring<span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;</span>string<span style="color:#f92672">&gt;</span>limit<span style="color:#f92672">&lt;</span><span style="color:#e6db74">/string&gt;
</span><span style="color:#e6db74">      &lt;string&gt;maxfiles&lt;/s</span>tring<span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;</span>string<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">524288</span><span style="color:#f92672">&lt;</span><span style="color:#e6db74">/string&gt;
</span><span style="color:#e6db74">      &lt;string&gt;524288&lt;/s</span>tring<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span><span style="color:#e6db74">/array&gt;
</span><span style="color:#e6db74">    &lt;key&gt;RunAtLoad&lt;/</span>key<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">true</span><span style="color:#f92672">/&gt;</span>
    <span style="color:#f92672">&lt;</span>key<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">ServiceIPC</span><span style="color:#f92672">&lt;</span><span style="color:#e6db74">/key&gt;
</span><span style="color:#e6db74">    &lt;false/</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;</span><span style="color:#e6db74">/dict&gt;
</span><span style="color:#e6db74">&lt;/</span>plist<span style="color:#f92672">&gt;</span>
</code></pre></div><h2 id="plistファイルを読み込んで適用させる">plistファイルを読み込んで適用させる。</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo launchctl load -w /Library/LaunchDaemons/limit.maxfiles.plist
</code></pre></div><h2 id="適用されたことを確認する">適用されたことを確認する</h2>
<pre><code>$ sudo launchctl limit
    cpu         unlimited      unlimited
    filesize    unlimited      unlimited
    data        unlimited      unlimited
    stack       8388608        67104768
    core        0              unlimited
    rss         unlimited      unlimited
    memlock     unlimited      unlimited
    maxproc     1418           2128
    maxfiles    524288         524288
</code></pre><p>maxfilesが 524288 に増えていることが確認できました。</p>
]]></content>
        </item>
        
        <item>
            <title>Hydraを使ったview-mode設定</title>
            <link>http://minorugh.github.io/posts/hydra-view-mode/</link>
            <pubDate>Mon, 30 Apr 2018 18:16:35 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/hydra-view-mode/</guid>
            <description>以前にご紹介した下記の記事を、hydra.elを使って更に使いやすく工夫してみた。 Emacsのview-modeでvimのコマンドを使えるよ</description>
            <content type="html"><![CDATA[<p>以前にご紹介した下記の記事を、hydra.elを使って更に使いやすく工夫してみた。</p>
<ul>
<li><a href="https://snap.textgh.org/201801041902/">Emacsのview-modeでvimのコマンドを使えるようにする</a></li>
</ul>
<p>まずは、設定ファイルの全容を貼り付けます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; Change mode-line color in view-mode</span>
(<span style="color:#a6e22e">use-package</span> viewer)
(<span style="color:#66d9ef">setq</span> viewer-modeline-color-view <span style="color:#e6db74">&#34;dark red&#34;</span>)
(viewer-change-modeline-color-setup)

<span style="color:#75715e">;; View-mode key map</span>
(<span style="color:#a6e22e">use-package</span> keys-in-view-mode)
(with-eval-after-load <span style="color:#e6db74">&#39;view</span>
  (bind-key <span style="color:#e6db74">&#34;h&#34;</span> <span style="color:#e6db74">&#39;backward-char</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;j&#34;</span> <span style="color:#e6db74">&#39;next-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;k&#34;</span> <span style="color:#e6db74">&#39;previous-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#e6db74">&#39;forward-char</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#e6db74">&#39;scroll-down</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#e6db74">&#39;beginning-of-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#e6db74">&#39;end-of-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;g&#34;</span> <span style="color:#e6db74">&#39;goto-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;G&#34;</span> <span style="color:#e6db74">&#39;View-goto-percent</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#e6db74">&#39;view-kill-whole-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;m&#34;</span> <span style="color:#e6db74">&#39;magit-status</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;v&#34;</span> <span style="color:#e6db74">&#39;vc-diff</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;,&#34;</span> <span style="color:#e6db74">&#39;howm-remember</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;u&#34;</span> <span style="color:#e6db74">&#39;view-undo</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#e6db74">&#39;view-redo</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;%&#34;</span> <span style="color:#e6db74">&#39;view-jump-brace</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;w&#34;</span> <span style="color:#e6db74">&#39;forward-word+1</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;W&#34;</span> <span style="color:#e6db74">&#39;backward-word</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#e6db74">&#39;new-line-below-insert</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;y&#34;</span> <span style="color:#e6db74">&#39;copy-region-as-kill</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;Y&#34;</span> <span style="color:#e6db74">&#39;view-copy-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#e6db74">&#39;paste-at-cursor</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;P&#34;</span> <span style="color:#e6db74">&#39;paste-at-down-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;x&#34;</span> <span style="color:#e6db74">&#39;view-del-char</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;X&#34;</span> <span style="color:#e6db74">&#39;view-backward-kill-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;D&#34;</span> <span style="color:#e6db74">&#39;kill-end-of-line</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#e6db74">&#39;forward-char-to-insert</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#e6db74">&#39;end-of-line-to-insert</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#e6db74">&#39;view-mode</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;I&#34;</span> <span style="color:#e6db74">&#39;beginning-of-line-to-insert</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;L&#34;</span> <span style="color:#e6db74">&#39;pdf-preview-buffer</span> view-mode-map)
  (bind-key <span style="color:#e6db74">&#34;:&#34;</span> <span style="color:#e6db74">&#39;view-mode</span> view-mode-map)
  (key-chord-define view-mode-map <span style="color:#e6db74">&#34;gg&#34;</span> <span style="color:#e6db74">&#39;View-goto-line</span>))

<span style="color:#75715e">;; Add hl-line-mode to view-mode</span>
(when (<span style="color:#a6e22e">functionp</span> <span style="color:#e6db74">&#39;hl-line-mode</span>)
  (add-hook <span style="color:#e6db74">&#39;view-mode-hook</span> <span style="color:#f92672">&#39;</span>(lambda () (hl-line-mode <span style="color:#ae81ff">1</span>)))
  (defadvice view-mode-disable (after disable-hl-line-mode activate)
    (hl-line-mode <span style="color:#ae81ff">-1</span>)))

<span style="color:#75715e">;; Customize to open file in view-mode</span>
(defun neo-open-file (full-path <span style="color:#66d9ef">&amp;optional</span> arg)
  (neo-global--select-mru-window arg)
  (view-file full-path))

<span style="color:#75715e">;; PDF-preview</span>
  (with-eval-after-load <span style="color:#e6db74">&#39;view</span>
    (<span style="color:#a6e22e">use-package</span> pdf-preview)
    (<span style="color:#66d9ef">setq</span> pdf-preview-font-rescale-factor <span style="color:#ae81ff">1.2</span>)
    (when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;darwin</span>)
      (<span style="color:#66d9ef">setq</span> pdf-preview-preview-command <span style="color:#e6db74">&#34;open -a Preview.app&#34;</span>))
    (when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;gnu/linux</span>)
      (<span style="color:#66d9ef">setq</span> pdf-preview-preview-command <span style="color:#e6db74">&#34;evince&#34;</span>))
    (<span style="color:#66d9ef">setq</span> ps-line-number <span style="color:#66d9ef">t</span>))

<span style="color:#75715e">;; hydra-view-mode</span>
(defhydra hydra-view-mode (<span style="color:#e6db74">:hint</span> <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">:exit</span> <span style="color:#66d9ef">t</span>)
  <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">^Insert mode^        ^Move^            ^Delete^            ^Editing^             ^Utl
</span><span style="color:#e6db74">^^^^^^------------------------------------------------------------------------------------------
</span><span style="color:#e6db74">_a_: after cursor  _spc_: next page    _d_: one line       _u_: undo  _r_: redo    _m_: magit-status
</span><span style="color:#e6db74">_i_: at the cursor   _b_: prev page    _x_: one char       _y_: copy region      _v_: vc-diff
</span><span style="color:#e6db74">_A_: at end line     _w_: next word    _X_: to begin line  _Y_: copy line        _n_: neotree
</span><span style="color:#e6db74">_I_: at begin line   _W_: prev word    _D_: to end line    _p_: paste at cursor  _L_: PDF preview
</span><span style="color:#e6db74">_o_: new line below  _%_: match parens                   _P_: paste down line  _,_: remember
</span><span style="color:#e6db74">&#34;</span>
  <span style="color:#75715e">;; Insert mode</span>
  (<span style="color:#e6db74">&#34;a&#34;</span> forward-char-to-insert)
  (<span style="color:#e6db74">&#34;i&#34;</span> view-mode)
  (<span style="color:#e6db74">&#34;A&#34;</span> end-of-line-to-insert)
  (<span style="color:#e6db74">&#34;I&#34;</span> beginning-of-line-to-insert)
  (<span style="color:#e6db74">&#34;o&#34;</span> new-line-below-insert)
  <span style="color:#75715e">;; Move</span>
  (<span style="color:#e6db74">&#34;b&#34;</span> scroll-down)
  (<span style="color:#e6db74">&#34;spc&#34;</span> scroll-up)
  (<span style="color:#e6db74">&#34;w&#34;</span> forward-word+1)
  (<span style="color:#e6db74">&#34;W&#34;</span> backward-word)
  (<span style="color:#e6db74">&#34;%&#34;</span> view-jump-brace)
  <span style="color:#75715e">;; Delete</span>
  (<span style="color:#e6db74">&#34;d&#34;</span> view-kill-whole-line)
  (<span style="color:#e6db74">&#34;x&#34;</span> view-del-char)
  (<span style="color:#e6db74">&#34;X&#34;</span> view-backward-kill-line)
  (<span style="color:#e6db74">&#34;D&#34;</span> kill-end-of-line)
  <span style="color:#75715e">;; Editing</span>
  (<span style="color:#e6db74">&#34;u&#34;</span> view-undo)
  (<span style="color:#e6db74">&#34;r&#34;</span> view-redo)
  (<span style="color:#e6db74">&#34;y&#34;</span> copy-region-as-kill)
  (<span style="color:#e6db74">&#34;Y&#34;</span> view-copy-line)
  (<span style="color:#e6db74">&#34;p&#34;</span> paste-at-cursor)
  (<span style="color:#e6db74">&#34;P&#34;</span> paste-at-down-line)
  <span style="color:#75715e">;; Utl</span>
  (<span style="color:#e6db74">&#34;m&#34;</span> magit-status)
  (<span style="color:#e6db74">&#34;v&#34;</span> vc-diff)
  (<span style="color:#e6db74">&#34;n&#34;</span> neotree-toggle)
  (<span style="color:#e6db74">&#34;,&#34;</span> howm-remember)
  (<span style="color:#e6db74">&#34;L&#34;</span> pdf-preview-buffer)
  (<span style="color:#e6db74">&#34;q&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#34;leave&#34;</span>))

(define-key view-mode-map <span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#e6db74">&#39;hydra-view-mode/body</span>)

</code></pre></div><h2 id="hydraで対話式にコマンドを使えるようにする">hydraで対話式にコマンドを使えるようにする</h2>
<p><img src="https://c1.staticflickr.com/1/868/26930372267_800476a1d7_b.jpg" alt="Alt Text"></p>
<p>view-modeのkey-mapを覚えてしまえば必要ないのですが、ボケ始めた頭が混乱することもあるので、「.」を押すだけでhydraメニューがpopupします。</p>
<p>hydraを使ったミニバッファーメニューは、&ldquo;nil&rdquo; を渡すまで永続的に残りますが、<code>:exit</code> オプションを書くことで、目的のキーをセレクトした瞬間にメニューが消えるので便利です。</p>
<h2 id="view-mode-用のkey定義ファイル">view-mode 用のkey定義ファイル</h2>
<p><code>keys-in-view-mode.el</code> を作成して、use-packegeで読み込ませています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; Key bind for view-mode-vim-like</span>
<span style="color:#75715e">;; ================================</span>
<span style="color:#75715e">;; like a</span>
(defun forward-char-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (forward-char <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like A</span>
(defun end-of-line-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (end-of-line)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like I</span>
(defun beginning-of-line-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (beginning-of-line)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like dd</span>
(defun view-kill-whole-line ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-whole-line)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;kill-whole-line&#34;</span>))
<span style="color:#75715e">;; like D</span>
(defun kill-end-of-line ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-line)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;kill-line&#34;</span>))
<span style="color:#75715e">;; like o</span>
(defun new-line-below-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (forward-line)
  (open-line <span style="color:#ae81ff">1</span>)
  (beginning-of-line)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like x</span>
(defun view-del-char ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (delete-char <span style="color:#ae81ff">1</span>)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;delete-char&#34;</span>))
<span style="color:#75715e">;; undo</span>
(defun view-undo ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (undo-tree-undo)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;undo !&#34;</span>))
<span style="color:#75715e">;; redo</span>
(defun view-redo ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (undo-tree-redo)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;redo !&#34;</span>))
<span style="color:#75715e">;; like Y</span>
(defun view-copy-line (arg)
  (interactive <span style="color:#e6db74">&#34;p&#34;</span>)
  (kill-ring-save (line-beginning-position)
                  (line-beginning-position (<span style="color:#a6e22e">+</span> <span style="color:#ae81ff">1</span> arg)))
  (message <span style="color:#e6db74">&#34;%d line%s copied&#34;</span> arg (<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">=</span> <span style="color:#ae81ff">1</span> arg) <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#e6db74">&#34;s&#34;</span>)))
<span style="color:#75715e">;; like p</span>
(defun paste-at-cursor ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (yank)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>))
<span style="color:#75715e">;; like P</span>
(defun paste-at-down-line ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (beginning-of-line)
  (yank)
  (beginning-of-line)
  (forward-line <span style="color:#ae81ff">-1</span>)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;yank !&#34;</span>))
<span style="color:#75715e">;; like w</span>
(defun forward-word+1 ()
  (interactive)
  (forward-word)
  (forward-char))
<span style="color:#75715e">;; like %</span>
(defun view-jump-brace ()
  <span style="color:#e6db74">&#34;Jump to correspondence parenthesis&#34;</span>
  (interactive)
  (<span style="color:#66d9ef">let</span> ((c (following-char))
				(p (preceding-char)))
		(<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">eq</span> (char-syntax c) <span style="color:#ae81ff">40</span>) (forward-list)
			(<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">eq</span> (char-syntax p) <span style="color:#ae81ff">41</span>) (backward-list)
				(backward-up-list)))))

<span style="color:#75715e">;; Delete from the cursor position to the beginning of the line : like X</span>
(defun view-backward-kill-line (arg)
  <span style="color:#e6db74">&#34;Kill chars backward until encountering the end of a line.&#34;</span>
  (interactive <span style="color:#e6db74">&#34;p&#34;</span>)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-line <span style="color:#ae81ff">0</span>)
  (save-buffer)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;backward-kill-line&#34;</span>))

(<span style="color:#a6e22e">provide</span> <span style="color:#e6db74">&#39;keys-in-view-mode</span>)
<span style="color:#75715e">;;; keys-in-view-mode.el ends here:</span>
</code></pre></div><h2 id="今後の方向性を考える">今後の方向性を考える</h2>
<p>view-modeでvimのコマンドを使えるようにすることを目標に工夫してきましたが、emacs自身の設定で便利に使える機能まであえてvim-likeにする必要はないと思います。</p>
<p>例えば、カーソル移動の機能、「行頭、行末、ページの先頭、ページの最後」は、sequeqtial-command というパッケージを導入していて使い慣れているのでview-modeの機能からは省いてもいいかなと思っています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; sequential-command</span>
(<span style="color:#a6e22e">use-package</span> sequential-command-config)
(sequential-command-setup-keys)
</code></pre></div><ul>
<li>C-aを連続で打つことで行の先頭→ページの先頭→元の位置とカーソルが移動する。</li>
<li>C-eを連続で打つことで行の最後→ページの最後→元の位置とカーソルが移動する。</li>
</ul>
<p>また、view-modeから抜けないで削除やyank&amp;pasteする機能もあれば便利かも知れませんが、いろんな削除パターンから編集モードへ移行するコマンド群は不要だと思います。そんなコマンドを覚えるくらいなら、編集モードへ抜けてから自由にすればいいからです。</p>
<h2 id="まとめ">まとめ</h2>
<p>このTipsの目的は、Emacsをvim-likeに使うことではなくて、ファイルの閲覧をview-modeで扱うときの利便性を高めることです。
emacsをvimのように使うというようなTipsも多いですが、そんなことをするくらいならvimを使えばいいからです。</p>
<p>私は、emacsとvimとの両刀使いです。基本はemacsですが、dotfileやmakefileを扱うときは、vimを使うことが多いです。</p>
]]></content>
        </item>
        
        <item>
            <title>ある文字で始まっている行を一度に複数削除する方法：Emacs</title>
            <link>http://minorugh.github.io/posts/delete-matching-lines/</link>
            <pubDate>Mon, 30 Apr 2018 16:14:28 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/delete-matching-lines/</guid>
            <description>バッファ(ファイル)の先頭にカーソルを移動し M-x delete-matching-lines でミニバッファーに正規表現入力を求められるので、下記のように入力してエンターすると消すことが</description>
            <content type="html"><![CDATA[<p>バッファ(ファイル)の先頭にカーソルを移動し</p>
<pre><code>M-x delete-matching-lines
</code></pre><p>でミニバッファーに正規表現入力を求められるので、下記のように入力してエンターすると消すことが出来る。</p>
<pre><code>^あ
</code></pre><p>(「あ」は消したい文字）</p>
<p>^は正規表現で文章の先頭を示すので、その正規表現が一致する行が全て削除されます。</p>
<p>同様にdelete-non-matching-linesで一致しないものを消すことも出来る。</p>
<p>正規表現を工夫すれば、種々のパターンで応用できる。</p>
]]></content>
        </item>
        
        <item>
            <title>Debianにemacs-26.1-rc1をInstallする</title>
            <link>http://minorugh.github.io/posts/emacs26.1-rc1-to-debian./</link>
            <pubDate>Sat, 28 Apr 2018 16:18:57 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/emacs26.1-rc1-to-debian./</guid>
            <description>私の場合は、ThinkpadのWindows10にVirtualBoxをInstallし、Vbox上でEmacs on Debianを動かしていま</description>
            <content type="html"><![CDATA[<p>私の場合は、ThinkpadのWindows10にVirtualBoxをInstallし、Vbox上でEmacs on Debianを動かしています。
もう一台メインマシンのmacbookにもEmacsを導入し、設定ファイルはDropboxで共用しています。</p>
<p>最近Macの方をemacs26.1にアップデートしたら、なぜかDebianのEmacs25.3で一部の設定ファイルが読み込みエラーになり起動しません。
やむなく、まだ安定版ではないけれどDebianのほうにもemacs26.1をインストールすることにしました。</p>
<h2 id="installの手順">Installの手順</h2>
<ul>
<li>apt-getでのパッケージインストールはまだ出来ないのでソースをダウンロードしてビルドします。</li>
<li>ソースがすぐに見つからず探すのに苦労したがようやく下記にありました。</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ wget https://alpha.gnu.org/gnu/emacs/pretest/emacs-26.1-rc1.tar.xz
$ unar emacs-26.1-rc1.tar.xz
$ cd emacs-26.1
$ ./configure --with-x-toolkit<span style="color:#f92672">=</span>gtk3 --with-sound<span style="color:#f92672">=</span>no --with-x
$ make
$ sudo make install
$ sudo reboot 
$ emacs --version
$ GNU Emacs 26.1
…
</code></pre></div><ul>
<li>今回 configure での <code>--with-xwidgets</code> オプションがエラーになりましたので諦めました。</li>
<li>emacs26.1のインストールによって設定ファイル読み込みエラーは出なくなりました。原因は不明です。</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>無償キャンペーン未実施のPCでもWindows１０にアップグレードできた</title>
            <link>http://minorugh.github.io/posts/win10-upgrade/</link>
            <pubDate>Tue, 13 Feb 2018 18:32:06 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/win10-upgrade/</guid>
            <description>家族の個人使用のために、比較的程度の良い Thinkpad X230/X240 の中古ノートを２台買いました。 SSDに換装して快適に使えているのですが、OSは全てWindows</description>
            <content type="html"><![CDATA[<p>家族の個人使用のために、比較的程度の良い Thinkpad X230/X240 の中古ノートを２台買いました。
SSDに換装して快適に使えているのですが、OSは全てWindows7 64bitでしたので、Windows10へアップグレードするために情報を集めていたらこんなサイトを見つけました。</p>
<ul>
<li><a href="https://www.ikt-s.com/2018-windows10upgrade/">無償キャンペーン未実施PCで2018年Windows10にアップグレードできるか</a></li>
</ul>
<p>Windows10無償アップグレード キャンペーンは、2016年7月29日で終了したのですが、上記サイトの情報によれば、2018年2月現在まだ Microsoftのダウンロードサイトからアップ・グレードインストールプログラムがダウンロードできるようです。</p>
<h2 id="キャンペーン中に作っておいたメディアでもアップグレードに成功">キャンペーン中に作っておいたメディアでもアップグレードに成功</h2>
<p>じつは、こんなこともあろうかと考えて、無償アップグレードキャンペーン期間中にアップグレードインストールメディアをUSBで作っておいたので、今回それを使って試してみた処、すんなりとアップグレードが完了しました。</p>
<p>このアップ・グレードに伴う認証処理は、オンラインではなくてデジタル認証という仕組みです。詳しくはわからないのですが、インストールメディアさえあればいつでもアップ・グレードできそうです。</p>
<p>Microsoftの下記のダウンロードページは、いつ消えてしまうかわからないので、今後のためにも今すぐダウンロードしてメディアに保存しておいたほうが良さそうです。</p>
<ul>
<li><a href="https://www.microsoft.com/ja-jp/software-download/windows10ISO">Windows 10 のディスク イメージ (ISO ファイル) のダウンロード</a></li>
</ul>
<h2 id="インストールメディアの種類">インストールメディアの種類</h2>
<p>アップグレード用のダウンロードファイルは、インストールされているOSの種類によって変わるみたいです。</p>
<ul>
<li>Homeエディション か Proエディション かで異なる</li>
<li>32bit か 64bit かで異なる</li>
</ul>
<p>今後は、CD/DVDドライブのないPCが多くなるので、インストールメディアはUSBがいいと思います。知り合いのいろんな人の面倒を見て上げるのなら４種類のメディアを作っておくのがいいです。</p>
<h2 id="クリーンインストールするために">クリーンインストールするために</h2>
<p>まだ自分では実施して確認できていないのですが、いきなりクリーンインストールすると認証されないという情報です。クリーンインストールするには、一度上書きアップグレードしてから再度クリーンインストールするとできるとの情報もあるので機会があれば試してみようと思います。</p>
]]></content>
        </item>
        
        <item>
            <title>WEBソース表示等での文字化け対策を.htaccessに書く</title>
            <link>http://minorugh.github.io/posts/write-encode-in-htaccess/</link>
            <pubDate>Tue, 23 Jan 2018 20:51:12 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/write-encode-in-htaccess/</guid>
            <description>はじめに WEB環境のファイルの文字コードは、基本的に全てUTF-8で統一している。 テキストファイル、Perl、cgi、Ruby、js、htm</description>
            <content type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>WEB環境のファイルの文字コードは、基本的に全てUTF-8で統一している。</p>
<p>テキストファイル、Perl、cgi、Ruby、js、htmlなどシステムファイルのエンコードは基本UTF-8とし、HTMLファイルのメタタグでもUTF-8と宣言している。</p>
<p>結果、システム的には機嫌よく動いているだけれど、プラウザでソース表示やテキストファイルを直接表示させると文字化けしている。</p>
<p>どうやらサーバー環境が関係していると睨んでググってみて、.htaccessとも関係あるらしいことを知った。</p>
<h2 id="文字化け対策としてのhtaccess">文字化け対策としての.htaccess</h2>
<p>下記のように対象ファイルの拡張子を羅列しておけばいいみたい。</p>
<p>わたしの場合、perl cgi rubyなどのソースをプラウザで表示させることはありえないので、.js .txt .html を設定しておいた。</p>
<h5 id="htaccess">.htaccess</h5>
<pre><code>AddType &quot;text/html; charset=UTF-8&quot; .html .js .txt
</code></pre><p>無事解決(^o^)v</p>
<p>ここのサイトが参考になった。</p>
<p><a href="http://www.shtml.jp/htaccess/mojibake.html">http://www.shtml.jp/htaccess/mojibake.html</a></p>
]]></content>
        </item>
        
        <item>
            <title>Debian９にHUGO最新バージョンをインストールする</title>
            <link>http://minorugh.github.io/posts/hugo-install-to-debian/</link>
            <pubDate>Tue, 23 Jan 2018 20:12:25 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/hugo-install-to-debian/</guid>
            <description>はじめに Emacs+HUGOをMac環境メインで使っているが、Windows10（ThinkPad）上のVboxにdebianを入れて予備環</description>
            <content type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>Emacs+HUGOをMac環境メインで使っているが、Windows10（ThinkPad）上のVboxにdebianを入れて予備環境も構築している。</p>
<p>MacでのHUGOは、brewで簡単にバージョンアップできるのだけれど、
Linuxの場合、apt-getをupdateしても古いバージョンのHUGOしかインストール出来ない。
そこで、直接最新版をダウンロードしてインストールしたので備忘録としてメモしておく。</p>
<h2 id="hugo最新版をダウンロードしてインストール">HUGO最新版をダウンロードしてインストール</h2>
<p>端末で直接ダウンロードすることも出来るが、どのみち最新版を調べる必要があるので,
プラウザでダウンロードサイトにアクセスする。</p>
<p><a href="https://github.com/spf13/hugo/releases/">https://github.com/spf13/hugo/releases/</a></p>
<p>リストが表示されるので、最新バージョンを落としてくる。</p>
<p>hugo_0.34_Linux-64bit.deb</p>
<p>使っている環境に合うものをダウンロードする。</p>
<p>普通に操作すれば、Downloadsフォルダに保存されるので、あとはターミナルからコマンドを使ってインストールする。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd ~/Downloads
$ sudo dpkg -i hugo_0.34_Linux-64bit.deb

</code></pre></div><p>終わったら、念のためにHUGOのバージョンを確認しておこう。</p>
<pre><code>$ hugo version
Hugo Static Site Generator v0.34 linux/amd64 BuildDate: 2018-01-22T12:06:40Z

</code></pre><p>Conglaturation…</p>
]]></content>
        </item>
        
        <item>
            <title>JavaScriptを使ってHugoサイト内に全文検索を取り付けてみた</title>
            <link>http://minorugh.github.io/posts/full-text-search-in-hugo/</link>
            <pubDate>Mon, 15 Jan 2018 20:42:43 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/full-text-search-in-hugo/</guid>
            <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;素敵なTipsを見つけたので、静的サイトジェネレータHugoを使って生成したコンテンツに全文検索を取り付けてみました。
クライアント側のJavaScriptを使って日本語のキーワードも検索可能です。
まずは、完成したページをご覧ください。→ &lt;a href=&#34;http://minorugh.github.io/search/&#34;&gt;サイト内全文検索&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<!-- raw HTML omitted -->
<p>素敵なTipsを見つけたので、静的サイトジェネレータHugoを使って生成したコンテンツに全文検索を取り付けてみました。
クライアント側のJavaScriptを使って日本語のキーワードも検索可能です。
まずは、完成したページをご覧ください。→ <a href="/search/">サイト内全文検索</a></p>
<p>導入については、以下のページに詳しく解説されているので、その通りに進めれば大丈夫ですが、わたしが実際におこなった手順をご紹介しておきます。</p>
<p><a href="http://rs.luminousspice.com/hugo-site-search/#i-1">Hugo に全文検索を取り付けた</a></p>
<h2 id="インデックスファイルの生成">インデックスファイルの生成</h2>
<p>全文検索用のインデックスファイルindex.js を書き出すためのテンプレートファイルを作成し、ダミーの投稿を使って書き出させるという仕組みです。</p>
<h3 id="インデックスファイルのテンプレート">インデックスファイルのテンプレート</h3>
<p>下記のファイルを作成し、 <code>layouts/js/single.html</code> に配置します。</p>
<h5 id="singlehtml">single.html</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"> var data = [{{ range $index, $page := where .Site.Pages &#34;Section&#34; &#34;post&#34;}}
 {{ if ne $index 0 }},{{ end }}{
 url: &#34;{{ $page.Permalink }}&#34;,
 title: &#34;{{ $page.Title }}&#34;,
 content: &#34;{{ .PlainWords }}&#34;
 }{{ end }}]
</code></pre></div><h3 id="インデックスファイルを生成する空の投稿">インデックスファイルを生成する空の投稿</h3>
<p>次に、空の投稿ファイル（indexjs.md）を作成します。</p>
<p>postフォルダではなくて固定ページのファイルを置いているpagesフォルダがいいと思います。</p>
<h5 id="indexjsmd">indexjs.md</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md" data-lang="md">+++
 date =  &#34;2016-03-21T14:35:52+09:00&#34;
 type =  &#34;js&#34;
 url = &#34;index.js&#34;
+++
</code></pre></div><p>ここまで準備できたらpublishして、<code>index.js</code>にアクセスしてみます。
わたしの場合は、https://snap.textgh.org/index.js になります。</p>
<h2 id="検索ページの作成">検索ページの作成</h2>
<p>次に、作成したインデックスファイル index.js を検索するユーザーインタフェイスを作ります。</p>
<h3 id="検索ページテンプレートの作成">検索ページテンプレートの作成</h3>
<p>検索ページ用のファイル（single.html）を作り、<code>layouts/search/single.html</code>に配置します。</p>
<h5 id="singlehtml-1">single.html</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ partial &#34;head.html&#34; . }}
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
&lt;<span style="color:#f92672">h1</span>&gt;サイト内全文検索&lt;/<span style="color:#f92672">h1</span>&gt;

&lt;<span style="color:#f92672">ul</span>&gt;
&lt;<span style="color:#f92672">li</span>&gt;キーワードを入力するとリアルタイムで検索を始めます。
&lt;<span style="color:#f92672">li</span>&gt;入力欄フォーカス中は、エンターキー、矢印キーでベージ送りします。
&lt;/<span style="color:#f92672">ul</span>&gt;

&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://snap.textgh.org/index.js&#34;</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">style</span>&gt;
<span style="color:#f92672">dd</span>{
	<span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">0</span>;
	<span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span> <span style="color:#ae81ff">0.5</span><span style="color:#66d9ef">em</span>;
	<span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">90</span><span style="color:#66d9ef">%</span>;
}
<span style="color:#f92672">dd</span> <span style="color:#f92672">span</span>{
	<span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">80</span><span style="color:#66d9ef">%</span>;
	<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#888</span>;
}
<span style="color:#f92672">dd</span> <span style="color:#f92672">b</span>{
	<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#666600</span>;
	<span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#ffffdd</span>;
	<span style="color:#66d9ef">font-weight</span>:<span style="color:#66d9ef">bold</span>;
	<span style="color:#66d9ef">border</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#bbbb00</span>;
	<span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">0</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>;
	<span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">0</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>;
}
#navi{
	<span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">0.5</span><span style="color:#66d9ef">rem</span> <span style="color:#ae81ff">0</span>;
	<span style="color:#66d9ef">line-height</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">rem</span>;
}
#navi <span style="color:#f92672">span</span>{
	<span style="color:#66d9ef">border-top</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#d8d8d8</span>;
	<span style="color:#66d9ef">border-bottom</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#d8d8d8</span>;
	<span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">0.33</span><span style="color:#66d9ef">rem</span> <span style="color:#ae81ff">0.66</span><span style="color:#66d9ef">rem</span>;
	<span style="color:#66d9ef">cursor</span>:<span style="color:#66d9ef">pointer</span>;
	<span style="color:#66d9ef">word-wrap</span>:<span style="color:#66d9ef">break-word</span>;
}
#navi <span style="color:#f92672">span</span>.<span style="color:#a6e22e">selected</span>{
	<span style="color:#66d9ef">background</span>: <span style="color:#ae81ff">#D3EDF7</span>;
}
#navi <span style="color:#f92672">span</span>:<span style="color:#a6e22e">first-child</span>{
	<span style="color:#66d9ef">border-left</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#d8d8d8</span>;
	<span style="color:#66d9ef">border-top-left-radius</span>: <span style="color:#ae81ff">0.4</span><span style="color:#66d9ef">rem</span>;
	<span style="color:#66d9ef">border-bottom-left-radius</span>: <span style="color:#ae81ff">0.4</span><span style="color:#66d9ef">rem</span>;
}
#navi <span style="color:#f92672">span</span>:<span style="color:#a6e22e">last-child</span>{
	<span style="color:#66d9ef">border-right</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#d8d8d8</span>;
	<span style="color:#66d9ef">border-top-right-radius</span>: <span style="color:#ae81ff">0.4</span><span style="color:#66d9ef">rem</span>;
	<span style="color:#66d9ef">border-bottom-right-radius</span>: <span style="color:#ae81ff">0.4</span><span style="color:#66d9ef">rem</span>;
}

#searchbox <span style="color:#f92672">input</span>{
	<span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">.3</span><span style="color:#66d9ef">em</span>;
    <span style="color:#66d9ef">margin-left</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">em</span>;
	<span style="color:#66d9ef">margin-bottom</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">em</span>;
}
@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">max-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">15em</span><span style="color:#f92672">)</span> {
	#navi{
		<span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">300</span><span style="color:#66d9ef">px</span>;
	}
}
&lt;/<span style="color:#f92672">style</span>&gt;

&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;searchbox&#34;</span>&gt;
&lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;q&#34;</span> <span style="color:#a6e22e">onkeyup</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;do_find(this.value)&#34;</span> <span style="color:#a6e22e">onkeydown</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;key(event.keyCode)&#34;</span> <span style="color:#a6e22e">autocomplete</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;off&#34;</span> <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;サイト内を検索&#34;</span>&gt; &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fa fa-search&#34;</span> <span style="color:#a6e22e">aria-hidden</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;true&#34;</span>&gt;&lt;/<span style="color:#f92672">span</span>&gt;&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stat&#34;</span>&gt;&lt;/<span style="color:#f92672">span</span>&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;navi&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;result&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
window.<span style="color:#a6e22e">onload</span><span style="color:#f92672">=</span><span style="color:#66d9ef">function</span>(){
	<span style="color:#a6e22e">gid</span>(<span style="color:#e6db74">&#34;q&#34;</span>).<span style="color:#a6e22e">focus</span>();
}

{
	<span style="color:#a6e22e">$_</span> <span style="color:#f92672">=</span> String.<span style="color:#a6e22e">prototype</span>;
	
	<span style="color:#a6e22e">$_</span>.<span style="color:#a6e22e">mReplace</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">pat</span>,<span style="color:#a6e22e">flag</span>){
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">temp</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
		<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">flag</span>){<span style="color:#a6e22e">flag</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>}
		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">pat</span>){
			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">re</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RegExp(<span style="color:#a6e22e">i</span>,<span style="color:#a6e22e">flag</span>);
			<span style="color:#a6e22e">temp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">temp</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#a6e22e">re</span>,<span style="color:#a6e22e">pat</span>[<span style="color:#a6e22e">i</span>])
		}
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">temp</span>;
	};
}

{
	<span style="color:#a6e22e">$_</span> <span style="color:#f92672">=</span> Date.<span style="color:#a6e22e">prototype</span>;
	
	<span style="color:#a6e22e">$_</span>.<span style="color:#a6e22e">format</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;yyyy-mm-dd HH:MM:SS&#34;</span>;
	<span style="color:#a6e22e">$_</span>.<span style="color:#a6e22e">formatTime</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">format</span>){
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">yy</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> {
			<span style="color:#a6e22e">yyyy</span> <span style="color:#f92672">:</span> ((<span style="color:#a6e22e">yy</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getYear</span>()) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2000</span>)<span style="color:#f92672">?</span> <span style="color:#a6e22e">yy</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1900</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">yy</span>,
			<span style="color:#a6e22e">mm</span>   <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getMonth</span>() <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>,
			<span style="color:#a6e22e">dd</span>   <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getDate</span>(),
			<span style="color:#a6e22e">HH</span>   <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getHours</span>(),
			<span style="color:#a6e22e">MM</span>   <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getMinutes</span>(),
			<span style="color:#a6e22e">SS</span>   <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getSeconds</span>()
		}
		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">o</span>){
			<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">o</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>) <span style="color:#a6e22e">o</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">o</span>[<span style="color:#a6e22e">i</span>];
		}
		<span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">format</span>) <span style="color:#f92672">?</span> <span style="color:#a6e22e">format</span>.<span style="color:#a6e22e">mReplace</span>(<span style="color:#a6e22e">o</span>) <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">format</span>.<span style="color:#a6e22e">mReplace</span>(<span style="color:#a6e22e">o</span>);
	}
}
&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">start</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date().<span style="color:#a6e22e">getTime</span>();
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">bodylist</span> <span style="color:#f92672">=</span> [];
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">st</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">gid</span>(<span style="color:#e6db74">&#34;stat&#34;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">re</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">gid</span>(<span style="color:#e6db74">&#34;result&#34;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">nv</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">gid</span>(<span style="color:#e6db74">&#34;navi&#34;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">max</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">KC</span> <span style="color:#f92672">=</span> {
	<span style="color:#a6e22e">enter</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">13</span>,
	<span style="color:#a6e22e">left</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">37</span>,
	<span style="color:#a6e22e">right</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">39</span>,
	<span style="color:#a6e22e">up</span>   <span style="color:#f92672">:</span> <span style="color:#ae81ff">38</span>,
	<span style="color:#a6e22e">down</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">40</span>
};
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">gid</span>(<span style="color:#a6e22e">id</span>){
	<span style="color:#66d9ef">return</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#a6e22e">id</span>);
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">ignore_case</span>(){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">arguments</span>;
	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;[&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">toUpperCase</span>() <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;]&#34;</span>
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">do_find</span>(<span style="color:#a6e22e">v</span>){
	<span style="color:#66d9ef">if</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">lastquery</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">v</span>){<span style="color:#66d9ef">return</span>}
	<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">lastquery</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">v</span>;
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">re</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">find</span>(<span style="color:#a6e22e">v</span>);
	<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">re</span>.<span style="color:#a6e22e">length</span>){
		<span style="color:#a6e22e">pagenavi</span>(<span style="color:#a6e22e">re</span>);
		<span style="color:#a6e22e">view</span>(<span style="color:#a6e22e">re</span>)
	}
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">key</span>(<span style="color:#a6e22e">c</span>){
	<span style="color:#66d9ef">switch</span>(<span style="color:#a6e22e">c</span>){
		<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">KC</span>.<span style="color:#a6e22e">enter</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">mv</span>(<span style="color:#ae81ff">1</span>);<span style="color:#66d9ef">break</span>;
		<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">KC</span>.<span style="color:#a6e22e">left</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">mv</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);<span style="color:#66d9ef">break</span>;
		<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">KC</span>.<span style="color:#a6e22e">right</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">mv</span>(<span style="color:#ae81ff">1</span>);<span style="color:#66d9ef">break</span>;
		<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">KC</span>.<span style="color:#a6e22e">up</span>   <span style="color:#f92672">:</span> <span style="color:#a6e22e">mv</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);<span style="color:#66d9ef">break</span>;
		<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">KC</span>.<span style="color:#a6e22e">down</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">mv</span>(<span style="color:#ae81ff">1</span>);<span style="color:#66d9ef">break</span>;
	}
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">find</span>(<span style="color:#a6e22e">v</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">query</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">v</span>;
	<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">v</span>){<span style="color:#66d9ef">return</span> []}
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">aimai</span>;
	<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">query</span>){


		<span style="color:#a6e22e">aimai</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">query</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/[a-z]/g</span>,<span style="color:#a6e22e">ignore_case</span>);
		<span style="color:#66d9ef">try</span>{
			<span style="color:#a6e22e">reg</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RegExp(<span style="color:#a6e22e">aimai</span>,<span style="color:#e6db74">&#34;g&#34;</span>);
		}<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">e</span>){
			<span style="color:#a6e22e">reg</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/(.)/g</span>;
		}
	}<span style="color:#66d9ef">else</span>{
		<span style="color:#a6e22e">reg</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/(.)/g</span>;
	}
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">start</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date().<span style="color:#a6e22e">getTime</span>();
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> [];
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">length</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
		
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">bodylist</span>[<span style="color:#a6e22e">i</span>];
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">reg</span>.<span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">s</span>);
		<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">res</span>){<span style="color:#66d9ef">continue</span>}
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">len</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">length</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">idx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">index</span>;
		<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">idx</span> <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>){
			<span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">push</span>([<span style="color:#a6e22e">i</span>,<span style="color:#a6e22e">idx</span>,<span style="color:#a6e22e">len</span>]);
		}
	}
	<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">length</span>){
		<span style="color:#a6e22e">st</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">+</span><span style="color:#e6db74">&#34;件見つかりました。&#34;</span>;
	}
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date().<span style="color:#a6e22e">getTime</span>();

	<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Find:&#34;</span><span style="color:#f92672">+</span> (<span style="color:#a6e22e">end</span><span style="color:#f92672">-</span><span style="color:#a6e22e">start</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; ms&#34;</span>);
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>;
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">time2date</span>(<span style="color:#a6e22e">time</span>){
	<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">cache</span>){<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">cache</span> <span style="color:#f92672">=</span> {}};
	<span style="color:#66d9ef">if</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">time</span>]) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">time</span>];
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">d</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date(<span style="color:#a6e22e">time</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1000</span>);
	<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">time</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">formatTime</span>(<span style="color:#e6db74">&#34;yyyy年mm月dd日&#34;</span>);
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">time</span>];
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">snippet</span>(<span style="color:#a6e22e">body</span>,<span style="color:#a6e22e">idx</span>,<span style="color:#a6e22e">len</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">start</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">idx</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">20</span>;
	<span style="color:#66d9ef">return</span> [
		<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#a6e22e">start</span>,<span style="color:#a6e22e">idx</span>),
		,<span style="color:#e6db74">&#34;&lt;b&gt;&#34;</span>
		,<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#a6e22e">idx</span>,<span style="color:#a6e22e">len</span>)
		,<span style="color:#e6db74">&#34;&lt;/b&gt;&#34;</span>
		,<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#a6e22e">idx</span><span style="color:#f92672">+</span><span style="color:#a6e22e">len</span>,<span style="color:#ae81ff">50</span>),
	].<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#34;&#34;</span>);
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">pagenavi</span>(<span style="color:#a6e22e">result</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">len</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">length</span>;
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ct</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">ceil</span>(<span style="color:#a6e22e">len</span><span style="color:#f92672">/</span><span style="color:#a6e22e">max</span>);
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buf</span> <span style="color:#f92672">=</span> [];
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">ct</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
		<span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">push</span>(
			<span style="color:#e6db74">&#34;&lt;span onclick=&#39;view(\&#34;\&#34;,&#34;</span>
			,<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>
			,<span style="color:#e6db74">&#34;);sw(&#34;</span>,<span style="color:#a6e22e">i</span>,<span style="color:#e6db74">&#34;)&#39;&gt;&#34;</span>
			,<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>
			,<span style="color:#e6db74">&#34;&lt;/span&gt;&#34;</span>
		);
	}
	<span style="color:#a6e22e">nv</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#34;&#34;</span>);
	<span style="color:#a6e22e">sw</span>(<span style="color:#ae81ff">0</span>);
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sw</span>(<span style="color:#a6e22e">t</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">span</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">nv</span>.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#34;span&#34;</span>);
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">length</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
		<span style="color:#a6e22e">span</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">className</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">i</span><span style="color:#f92672">==</span><span style="color:#a6e22e">t</span>)<span style="color:#f92672">?</span><span style="color:#e6db74">&#34;selected&#34;</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;&#34;</span>;
	}
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mv</span>(<span style="color:#a6e22e">to</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">span</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">nv</span>.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#34;span&#34;</span>);
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">current</span>;
	<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">length</span>){<span style="color:#66d9ef">return</span>}
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">length</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
		<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">span</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">className</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;selected&#34;</span>){
			<span style="color:#a6e22e">current</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">i</span>;<span style="color:#66d9ef">break</span>;
		}
	}
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">moveto</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">current</span><span style="color:#f92672">+</span><span style="color:#a6e22e">to</span>;
	<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">moveto</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>){<span style="color:#66d9ef">return</span>}
	<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">moveto</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">length</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>){<span style="color:#a6e22e">moveto</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>}
	<span style="color:#a6e22e">sw</span>(<span style="color:#a6e22e">moveto</span>);
	<span style="color:#a6e22e">view</span>(<span style="color:#e6db74">&#34;&#34;</span>,<span style="color:#a6e22e">moveto</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">view</span>(<span style="color:#a6e22e">result</span>,<span style="color:#a6e22e">offset</span>){
	<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">offset</span>){<span style="color:#a6e22e">offset</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>}
	<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">result</span>){
		<span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">last</span>.<span style="color:#a6e22e">reverse</span>();
	}<span style="color:#66d9ef">else</span>{
		<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">last</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">result</span>;
	}
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">reverse</span>();
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buf</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;&lt;dl&gt;&#34;</span>];
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span>(<span style="color:#a6e22e">offset</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span><span style="color:#a6e22e">max</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">length</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
		<span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>;
		<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">count</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">max</span>){<span style="color:#66d9ef">break</span>}
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">r</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>];
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">idx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">r</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>];
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">len</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">r</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">2</span>];
		<span style="color:#66d9ef">with</span>(<span style="color:#a6e22e">data</span>[<span style="color:#a6e22e">num</span>]){
			<span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">push</span>(
				<span style="color:#e6db74">&#34;&lt;dt&gt;&lt;a href=&#39;&#34;</span>,<span style="color:#a6e22e">url</span>,<span style="color:#e6db74">&#34;&#39;&gt;&#34;</span>
				,<span style="color:#a6e22e">title</span><span style="color:#f92672">||</span><span style="color:#e6db74">&#34;無題&#34;</span>,<span style="color:#e6db74">&#34;&lt;/a&gt;&#34;</span>
				,<span style="color:#e6db74">&#34;&lt;dd&gt;&#34;</span>



				,<span style="color:#a6e22e">snippet</span>(<span style="color:#a6e22e">bodylist</span>[<span style="color:#a6e22e">num</span>],<span style="color:#a6e22e">idx</span>,<span style="color:#a6e22e">len</span>)
			);
		}
	}
	<span style="color:#a6e22e">re</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#34;&#34;</span>);
}
<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">length</span>;<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
	<span style="color:#a6e22e">bodylist</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">data</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">title</span><span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">+</span><span style="color:#a6e22e">data</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">content</span>);
}
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">bodyidx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">bodylist</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#34;&lt;&gt;&#34;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date().<span style="color:#a6e22e">getTime</span>();

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Index:&#34;</span><span style="color:#f92672">+</span> (<span style="color:#a6e22e">end</span><span style="color:#f92672">-</span><span style="color:#a6e22e">start</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; ms&#34;</span>);
&lt;/<span style="color:#f92672">script</span>&gt;

	&lt;<span style="color:#f92672">noscript</span>&gt;&lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;notice&#34;</span>&gt;注意: この検索機能は JavaScript を使用しています。&lt;/<span style="color:#f92672">p</span>&gt;&lt;/<span style="color:#f92672">noscript</span>&gt;

&lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;

{{ partial &#34;footer.html&#34; . }}

</code></pre></div><h3 id="検索ページの作成-1">検索ページの作成</h3>
<p>検索ページを配置するための投稿（search.md）を作成します。</p>
<p>これも、固定ページフォルダpagesに置くのがいいでしょう。</p>
<h5 id="searchmd">search.md</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">+++
 date = &#34;2016-03-05T21:10:52+01:00&#34;
 type =  &#34;search&#34;
 url =  &#34;search&#34;
 title =  &#34;全文検索&#34;
+++
</code></pre></div><p>ここまでできたら、もう一度publishして、検索ページにアクセスしてみてください。</p>
<p>このサイトの場合は、以下のページになります。</p>
<p><a href="https://snap.textgh.org/search/">https://snap.textgh.org/search/</a></p>
<p>ここまで手間を掛けずとも、googleなどの外部検索サービスを使えば簡単にできることなのかもしれませんが、
自前でも簡単に導入できて、レスポンスもよいのでしばらく使ってみようと思います。</p>
<h2 id="参考サイト">参考サイト</h2>
<p><a href="http://rs.luminousspice.com/hugo-site-search/#i-1">Hugo に全文検索を取り付けた</a></p>]]></content>
        </item>
        
        <item>
            <title>hydraをミニメニューとして使う</title>
            <link>http://minorugh.github.io/posts/minibuffer-menu-by-hydra/</link>
            <pubDate>Wed, 10 Jan 2018 20:36:33 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/minibuffer-menu-by-hydra/</guid>
            <description>&lt;p&gt;hydraは、関連するコマンドを複数定義して、 それらのコマンドを連続して簡単に呼び出せるようにするツールです。基本的にはsmartrepの機能と同じですが、パラメーターによっていろいろ応用できるようなので試してみました。メニュー内容をエコーエリアに表示させることもできるのでGUIとしても優れています。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>hydraは、関連するコマンドを複数定義して、 それらのコマンドを連続して簡単に呼び出せるようにするツールです。基本的にはsmartrepの機能と同じですが、パラメーターによっていろいろ応用できるようなので試してみました。メニュー内容をエコーエリアに表示させることもできるのでGUIとしても優れています。</p>
<h2 id="dired-menu">Dired menu</h2>
<p><img src="https://goo.gl/C4GVjH" alt="Alt Text"></p>
<p>目的のファイルを開くのに、<code>find-file</code>やdired-jumpなどからアクセスするのが一般的だけれど、Dropboxやemacs設定ファイルなどよく使うフオルダーは一発で開けれるほうが便利です。</p>
<p>パラメーター（:exit t）を設定すると、いづれかの選択キーを押したら自動的にメニューが消えてくれます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; for my-dired</span>
<span style="color:#75715e">;; =======================================</span>
(defhydra hydra-dired (<span style="color:#e6db74">:hint</span> <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">:exit</span> <span style="color:#66d9ef">t</span>)
   <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">_r_: Restart  _g_: GitHub  _t_: Tramp  _j_: Dired  _e_: Easy-hugo  _d_: Dropbox  _w_: Webdir  _i_: Inits  _c_:howm
</span><span style="color:#e6db74">&#34;</span>
  (<span style="color:#e6db74">&#34;e&#34;</span> easy-hugo)
  (<span style="color:#e6db74">&#34;c&#34;</span> howm-create)
  (<span style="color:#e6db74">&#34;r&#34;</span> restart-emacs)
  (<span style="color:#e6db74">&#34;t&#34;</span> counsel-tramp)
  (<span style="color:#e6db74">&#34;i&#34;</span> my/init-dir)
  (<span style="color:#e6db74">&#34;d&#34;</span> my/dropbox)
  (<span style="color:#e6db74">&#34;w&#34;</span> my/www-dir)
  (<span style="color:#e6db74">&#34;g&#34;</span> my/github)
  (<span style="color:#e6db74">&#34;j&#34;</span> dired-jump)
  (<span style="color:#e6db74">&#34;q&#34;</span> keyboard-quit))
(bind-key <span style="color:#e6db74">&#34;M-.&#34;</span> <span style="color:#e6db74">&#39;hydra-dired/body</span>)

</code></pre></div><h2 id="window-menu">window menu</h2>
<p><img src="https://goo.gl/oiodAL" alt="Alt Text"></p>
<p>こちらは、Emacsのwindow管理のメニューです。パラメター（:exit t）  は設定していないのでほかのコマンドが実行されるまでは、メニュー画面を持続します。</p>
<p>smartrepと同じ機能ですね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; for window control</span>
<span style="color:#75715e">;; ==========================================</span>
(defhydra hydra-window (<span style="color:#e6db74">:hint</span>)
  <span style="color:#e6db74">&#34;
</span><span style="color:#e6db74">[Window]  _0_: Del  _1_: Del-all  _2_: ◀▶  _3_: ▲▼  _{_: ←  _}_: →  _~_: ↓  _=_: ↑ _+_: BL  _o_: Split  _s_: Swap
</span><span style="color:#e6db74">&#34;</span>
  (<span style="color:#e6db74">&#34;s&#34;</span> swap-buffers)
  (<span style="color:#e6db74">&#34;o&#34;</span> other-window-or-split)
  (<span style="color:#e6db74">&#34;0&#34;</span> delete-window)
  (<span style="color:#e6db74">&#34;1&#34;</span> delete-other-windows)
  (<span style="color:#e6db74">&#34;2&#34;</span> split-window-below)
  (<span style="color:#e6db74">&#34;3&#34;</span> split-window-right)
  (<span style="color:#e6db74">&#34;{&#34;</span> shrink-window-horizontally)
  (<span style="color:#e6db74">&#34;}&#34;</span> enlarge-window-horizontally)
  (<span style="color:#e6db74">&#34;~&#34;</span> enlarge-window)
  (<span style="color:#e6db74">&#34;=&#34;</span> shrink-window)
  (<span style="color:#e6db74">&#34;+&#34;</span> balance-windows))
(key-chord-define-global <span style="color:#e6db74">&#34;,,&#34;</span> <span style="color:#e6db74">&#39;hydra-window/body</span>)

<span style="color:#75715e">;; Other-window-or-sprit</span>
(defun other-window-or-split ()
  <span style="color:#e6db74">&#34;Other-window-or-sprit.&#34;</span>
  (interactive)
  (when (one-window-p)
    (split-window-horizontally))
    (other-window <span style="color:#ae81ff">1</span>))
(bind-key <span style="color:#e6db74">&#34;C-q&#34;</span> <span style="color:#e6db74">&#39;other-window-or-split</span>)
</code></pre></div><h2 id="参考サイト">参考サイト</h2>
<p><a href="https://github.com/abo-abo/hydra">https://github.com/abo-abo/hydra</a></p>
<p><a href="http://emacs.rubikitch.com/hydra/">http://emacs.rubikitch.com/hydra/</a></p>]]></content>
        </item>
        
        <item>
            <title>Emacsのview-modeでvimのコマンドを使えるようにする</title>
            <link>http://minorugh.github.io/posts/vim-like-view-mode/</link>
            <pubDate>Thu, 04 Jan 2018 19:09:15 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/vim-like-view-mode/</guid>
            <description>&lt;p&gt;vimを少し触り始めて、Emacsのview-modeでも簡単な編集操作は可能にしたいと思うようになったので、
viper-modeとかEvilを使わないで、view-modeだけでvimライクな編集機能を実現させるべく試運転中です。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>vimを少し触り始めて、Emacsのview-modeでも簡単な編集操作は可能にしたいと思うようになったので、
viper-modeとかEvilを使わないで、view-modeだけでvimライクな編集機能を実現させるべく試運転中です。</p>
<p>まずは、私のview-mode設定をご覧ください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp"><span style="color:#75715e">;; View-mode key map</span>
(use-package keys-in-view-mode)
(with-eval-after-load <span style="color:#e6db74">&#39;view</span>
  (bind-keys :map view-mode-map
             (<span style="color:#e6db74">&#34;h&#34;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">backward-char</span>)
             (<span style="color:#e6db74">&#34;j&#34;</span> <span style="color:#f92672">.</span> next-line)
             (<span style="color:#e6db74">&#34;k&#34;</span> <span style="color:#f92672">.</span> previous-line)
             (<span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">forward-char</span>)
             (<span style="color:#e6db74">&#34;J&#34;</span> <span style="color:#f92672">.</span> scroll-down-line)
             (<span style="color:#e6db74">&#34;K&#34;</span> <span style="color:#f92672">.</span> scroll-up-line)
             (<span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">scroll-down</span>)
             (<span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">beginning-of-line</span>)
             (<span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">end-of-line</span>)
             (<span style="color:#e6db74">&#34;g&#34;</span> <span style="color:#f92672">.</span> goto-line)
             (<span style="color:#e6db74">&#34;G&#34;</span> <span style="color:#f92672">.</span> View-goto-percent)
             (<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> dired-jump)
             (<span style="color:#e6db74">&#34;m&#34;</span> <span style="color:#f92672">.</span> magit-status)
             (<span style="color:#e6db74">&#34;v&#34;</span> <span style="color:#f92672">.</span> vc-diff)
             (<span style="color:#e6db74">&#34;n&#34;</span> <span style="color:#f92672">.</span> neotree-toggle)
             (<span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#f92672">.</span> swiper-migemo)
             (<span style="color:#e6db74">&#34;:&#34;</span> <span style="color:#f92672">.</span> save-buffer)
             (<span style="color:#e6db74">&#34;u&#34;</span> <span style="color:#f92672">.</span> vim-undo)
             (<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> vim-redo)
             (<span style="color:#e6db74">&#34;%&#34;</span> <span style="color:#f92672">.</span> vim-jump-brace)
             (<span style="color:#e6db74">&#34;w&#34;</span> <span style="color:#f92672">.</span> forward-word+1)
             (<span style="color:#e6db74">&#34;W&#34;</span> <span style="color:#f92672">.</span> backward-word)
             (<span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#f92672">.</span> vim-o)
             (<span style="color:#e6db74">&#34;O&#34;</span> <span style="color:#f92672">.</span> vim-O)
             (<span style="color:#e6db74">&#34;y&#34;</span> <span style="color:#f92672">.</span> copy-region-as-kill)
             (<span style="color:#e6db74">&#34;Y&#34;</span> <span style="color:#f92672">.</span> vim-copy-line)
             (<span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#f92672">.</span> vim-p)
             (<span style="color:#e6db74">&#34;P&#34;</span> <span style="color:#f92672">.</span> vim-P)
             (<span style="color:#e6db74">&#34;x&#34;</span> <span style="color:#f92672">.</span> vim-del-char)
             (<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">.</span> vim-del-char-to-insert)
             (<span style="color:#e6db74">&#34;X&#34;</span> <span style="color:#f92672">.</span> vim-backward-kill-line)
             (<span style="color:#e6db74">&#34;D&#34;</span> <span style="color:#f92672">.</span> vim-kill-line)
             (<span style="color:#e6db74">&#34;C&#34;</span> <span style="color:#f92672">.</span> vim-kill-line-to-insert)
             (<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> vim-forward-char-to-insert)
             (<span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">.</span> vim-end-of-line-to-insert)
             (<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#f92672">.</span> view-mode)
             (<span style="color:#e6db74">&#34;I&#34;</span> <span style="color:#f92672">.</span> vim-beginning-of-line-to-insert)
             (<span style="color:#e6db74">&#34;L&#34;</span> <span style="color:#f92672">.</span> pdf-preview-Buffer))
(key-chord-define view-mode-map <span style="color:#e6db74">&#34;cc&#34;</span> <span style="color:#e6db74">&#39;vim-kill-whole-line-to-insert</span>)
(key-chord-define view-mode-map <span style="color:#e6db74">&#34;dd&#34;</span> <span style="color:#e6db74">&#39;vim-kill-whole-line</span>)
(key-chord-define view-mode-map <span style="color:#e6db74">&#34;gg&#34;</span> <span style="color:#e6db74">&#39;View-goto-line</span>))
<span style="color:#75715e">;; In my case, use eikana.app to remap mac&#39;s fn key to &#34;S-&lt;f12&gt;&#34; only in emacs I will.</span>
<span style="color:#75715e">;; This allows you to toggle view-mode with one key</span>
(bind-key <span style="color:#e6db74">&#34;S-&lt;f12&gt;&#34;</span> <span style="color:#e6db74">&#39;view-mode</span>)

<span style="color:#75715e">; Change mode-line color in view-mode</span>
(use-package viewer)
(setq viewer-modeline-color-view <span style="color:#e6db74">&#34;dark red&#34;</span>)
(viewer-change-modeline-color-setup)

<span style="color:#75715e">;; Add hl-line-mode to view-mode</span>
(when (<span style="color:#a6e22e">functionp</span> <span style="color:#e6db74">&#39;hl-line-mode</span>)
  (add-hook <span style="color:#e6db74">&#39;view-mode-hook</span> <span style="color:#f92672">&#39;</span>(lambda () (hl-line-mode <span style="color:#ae81ff">1</span>)))
  (defadvice view-mode-disable (after disable-hl-line-mode activate)
    (hl-line-mode <span style="color:#ae81ff">-1</span>)))

<span style="color:#75715e">;; Open-file from ivy-switbuffer in view-mode</span>
(defun ivy--switch-buffer-action (buffer)
  (with-ivy-window
    (if (zerop (<span style="color:#a6e22e">length</span> buffer))
        (switch-to-buffer
         ivy-text <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#39;force-same-window</span>)
      (let ((virtual (<span style="color:#a6e22e">assoc</span> buffer ivy--virtual-buffers))
            (view (<span style="color:#a6e22e">assoc</span> buffer ivy-views)))
        (cond ((and virtual
                    (not (<span style="color:#a6e22e">get-buffer</span> buffer)))
               <span style="color:#75715e">;; (find-file (cdr virtual)))</span>
               (view-file (<span style="color:#a6e22e">cdr</span> virtual)))
              (view
               (delete-other-windows)
               (let (
                     <span style="color:#75715e">;; silence &#34;Directory has changed on disk&#34;</span>
                     (inhibit-message <span style="color:#66d9ef">t</span>))
                 (ivy-set-view-recur (cadr view))))
              (<span style="color:#66d9ef">t</span>
               (switch-to-buffer
                buffer <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#39;force-same-window</span>)))))))

<span style="color:#75715e">;; Neotree</span>
(use-package neotree
  :config
  <span style="color:#75715e">;; Customize to open file in view-mode</span>
  (defun neo-open-file (full-path <span style="color:#66d9ef">&amp;optional</span> arg)
    (neo-global--select-mru-window arg)
    (view-file full-path)))
(setq neo-show-hidden-files <span style="color:#66d9ef">t</span>)
(setq neo-smart-open <span style="color:#66d9ef">t</span>)

<span style="color:#75715e">;; Pdf-preview (printing in Mac environments)</span>
(when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;darwin</span>)
(with-eval-after-load <span style="color:#e6db74">&#39;view</span>
(use-package pdf-preview)
(setq pdf-preview-preview-command <span style="color:#e6db74">&#34;open -a Preview.app&#34;</span>)
(setq ps-line-number <span style="color:#66d9ef">t</span>)))
</code></pre></div><h2 id="vimライクなキーバインド">Vimライクなキーバインド</h2>
<p>基本的にview-modeでは不可能だったことを可能にするのが目的なので、Emacsの機能で十分なことまで、vimライクにこだわることは無意味だと思います。
とりあえず以下のコマンドを使えるようにしています。</p>
<table>
<thead>
<tr>
<th style="text-align:left">目的</th>
<th style="text-align:center">コマンド</th>
<th style="text-align:left">挙動</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">インサートモード</td>
<td style="text-align:center">a</td>
<td style="text-align:left">カーソルの一つ右からインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">i</td>
<td style="text-align:left">カーソルの位置からインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">A</td>
<td style="text-align:left">行末に移動しインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">I</td>
<td style="text-align:left">行頭に移動しインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">o</td>
<td style="text-align:left">次行を新規行として挿入してインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">O</td>
<td style="text-align:left">現在行に新しい行を追加してインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">cc</td>
<td style="text-align:left">一行を削除してインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left">移動</td>
<td style="text-align:center">j</td>
<td style="text-align:left">下に移動</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">k</td>
<td style="text-align:left">上に移動</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">h</td>
<td style="text-align:left">左に移動</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">l</td>
<td style="text-align:left">右に移動</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">0</td>
<td style="text-align:left">行頭へ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">e</td>
<td style="text-align:left">行末へ (vim : $ 相当)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">w</td>
<td style="text-align:left">次の単語の先頭へ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">W</td>
<td style="text-align:left">前の単語の先頭へ (vim : b 相当)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">%</td>
<td style="text-align:left">対応する括弧への移動</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">b</td>
<td style="text-align:left">前のページへ (vim : C-b 相当)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">SPC</td>
<td style="text-align:left">次のページへ (vim : C-f 相当)  … view-modeの基本機能</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">g</td>
<td style="text-align:left">指定行へジャンプ (emacs : M-g g)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">gg</td>
<td style="text-align:left">ページの先頭に移動</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">G</td>
<td style="text-align:left">ページの最後に移動</td>
</tr>
<tr>
<td style="text-align:left">削除</td>
<td style="text-align:center">dd</td>
<td style="text-align:left">カーソルがある行を削除</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">x</td>
<td style="text-align:left">一文字削除</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">X</td>
<td style="text-align:left">カーソル位置から行頭まで削除(オリジナル)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">D</td>
<td style="text-align:left">カーソル位置から行末まで削除</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">c</td>
<td style="text-align:left">一文字消してインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">C</td>
<td style="text-align:left">カーソル位置から行末まで削除してインサートモードへ</td>
</tr>
<tr>
<td style="text-align:left">undo</td>
<td style="text-align:center">u</td>
<td style="text-align:left">undo</td>
</tr>
<tr>
<td style="text-align:left">redo</td>
<td style="text-align:center">r</td>
<td style="text-align:left">redo (vim : Ctrl+r 相当)</td>
</tr>
<tr>
<td style="text-align:left">コピー</td>
<td style="text-align:center">y</td>
<td style="text-align:left">yank(コピー)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">Y</td>
<td style="text-align:left">今いる行をyank</td>
</tr>
<tr>
<td style="text-align:left">ペースト</td>
<td style="text-align:center">p(小文字)</td>
<td style="text-align:left">カーソルの右にyankをペースト</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:center">P(大文字)</td>
<td style="text-align:left">カーソルの下にyankした行をペースト</td>
</tr>
</tbody>
</table>
<h2 id="させたい挙動を定義する">させたい挙動を定義する</h2>
<p>別ファイルkeys-in-view-mode.elに必要な関数を定義して読み込ませています。
view-modeを解除して必要な作業をし終わったらまたview-modoに戻すだけです(^^)</p>
<p>まだ不完全な挙動もあるので、さらなる検証が必要ですが、
elispビギナーのわたしでも書ける程度の簡単なものですから、詳しい方ならもっと複雑な挙動も設定できると思います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; keys-in-view-mode.el</span>
<span style="color:#75715e">;; ==============================</span>
<span style="color:#75715e">;; like a</span>
(defun vim-forward-char-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (forward-char <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like A</span>
(defun vim-end-of-line-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (end-of-line)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like I</span>
(defun vim-beginning-of-line-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (beginning-of-line)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like cc</span>
(defun vim-kill-whole-line-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-whole-line)
  (open-line <span style="color:#ae81ff">1</span>)
  (backward-line)
  (beginning-of-line)
  (message <span style="color:#e6db74">&#34;:kill-whole-line and edit-mode !&#34;</span>))
<span style="color:#75715e">;; like dd</span>
(defun vim-kill-whole-line ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-whole-line)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;kill-whole-line&#34;</span>))
<span style="color:#75715e">;; like D</span>
(defun vim-kill-line ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-line)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;kill-line&#34;</span>))
<span style="color:#75715e">;; like C</span>
(defun vim-kill-line-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-line)
  (message <span style="color:#e6db74">&#34;kill-line and edit-mode !&#34;</span>))
<span style="color:#75715e">;; like o</span>
(defun vim-o ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (forward-line)
  (open-line <span style="color:#ae81ff">1</span>)
  (beginning-of-line)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like O</span>
(defun vim-O ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (open-line <span style="color:#ae81ff">1</span>)
  (beginning-of-line)
  (message <span style="color:#e6db74">&#34;edit-mode !&#34;</span>))
<span style="color:#75715e">;; like x</span>
(defun vim-del-char ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (delete-char <span style="color:#ae81ff">1</span>)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;delete-char&#34;</span>))
<span style="color:#75715e">;; like c</span>
(defun vim-del-char-to-insert ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (delete-char <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;delete-char and edit mode !&#34;</span>))
<span style="color:#75715e">;; like u</span>
(defun vim-undo ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (undo-tree-undo)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;undo !&#34;</span>))
<span style="color:#75715e">;; like C-r</span>
(defun vim-redo ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (undo-tree-redo)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;redo !&#34;</span>))
<span style="color:#75715e">;; like Y</span>
(defun vim-copy-line (arg)
  (interactive <span style="color:#e6db74">&#34;p&#34;</span>)
  (kill-ring-save (line-beginning-position)
                  (line-beginning-position (<span style="color:#a6e22e">+</span> <span style="color:#ae81ff">1</span> arg)))
  (message <span style="color:#e6db74">&#34;%d line%s copied&#34;</span> arg (<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">=</span> <span style="color:#ae81ff">1</span> arg) <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#e6db74">&#34;s&#34;</span>)))
<span style="color:#75715e">;; like P</span>
(defun vim-P ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (beginning-of-line)
  (yank)
  (beginning-of-line)
  (forward-line <span style="color:#ae81ff">-1</span>)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;yank !&#34;</span>))
<span style="color:#75715e">;; like p</span>
(defun vim-p ()
  (interactive)
  (view-mode <span style="color:#ae81ff">0</span>)
  (yank)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;yank !&#34;</span>))
<span style="color:#75715e">;; like w</span>
(defun forward-word+1 ()
  (interactive)
  (forward-word)
  (forward-char))
<span style="color:#75715e">;; like %</span>
(defun vim-jump-brace()
  <span style="color:#e6db74">&#34;Jump to correspondence parenthesis&#34;</span>
  (interactive)
  (<span style="color:#66d9ef">let</span> ((c (following-char))
				(p (preceding-char)))
		(<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">eq</span> (char-syntax c) <span style="color:#ae81ff">40</span>) (forward-list)
			(<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">eq</span> (char-syntax p) <span style="color:#ae81ff">41</span>) (backward-list)
				(backward-up-list)))))
<span style="color:#75715e">;; Delete from cursor position to beginning-of-line</span>
(defun vim-backward-kill-line (arg)
  <span style="color:#e6db74">&#34;Kill chars backward until encountering the beginning of line.&#34;</span>
  (interactive <span style="color:#e6db74">&#34;p&#34;</span>)
  (view-mode <span style="color:#ae81ff">0</span>)
  (kill-line <span style="color:#ae81ff">0</span>)
  (view-mode <span style="color:#ae81ff">1</span>)
  (message <span style="color:#e6db74">&#34;backward-kill-line&#34;</span>))

(<span style="color:#a6e22e">provide</span> <span style="color:#e6db74">&#39;keys-in-view-mode</span>)
<span style="color:#75715e">;;; keys-in-view-mode.el ends here</span>
</code></pre></div><h2 id="view-modeにもともと備わっているキーバインド">View-modeにもともと備わっているキーバインド</h2>
<ul>
<li>Backspace : 1ページ分前スクロールする</li>
<li>z : 1ページ分スクロールする</li>
<li>d : 半ページ分スクロールする(この設定では、dired-jumpに変更してます)</li>
<li>u : 半ページ分前スクロールする(この設定では、undoに変更してます)</li>
<li>&lt; : バッファー先頭へ移動する</li>
<li>
<blockquote>
<p>: バッファー末尾へ移動する</p>
</blockquote>
</li>
<li>RET : 1行スクロールする</li>
<li>y : 1行前スクロールする(この設定では、 copy-region-as-killに変更してます)</li>
<li>/ : 前方向検索をする</li>
<li>\ : 後方向検索をする</li>
<li>. : マーク</li>
<li>n : 次検索をする(この設定では、neotreeに変更してます)</li>
<li>p : 前検索をする(この設定では、yankに変更してます)</li>
<li>s : iserch-forward(この設定では、swiper-migemoに変更してます)</li>
<li>r : iserch-backward(この設定では、redoに変更してます)</li>
<li>q : Quit</li>
<li>? : ヘルプ</li>
<li>h : ヘルプ(この設定では、backward-charに変更してます)</li>
</ul>
<p>いづれも設定で上書きすれば変更できます。</p>
<h2 id="emacsにおけるview-mode環境の設定">Emacsにおけるview-mode環境の設定</h2>
<p>いろんな方のTipsを見ると、概ね下記の事例が多いです。</p>
<ul>
<li>view-modeで開きたいモードをadd-hookで定義する</li>
<li>find-fileコマンドをview-modeで開くように設定する</li>
</ul>
<p>わたしも試しましたが、いづれもいろいろと制約が生じて使いづらいです。
特にfind-fileをview-modeで開く設定にすると何かと不都合が生じるので、私の場合は、以下のようにしています。</p>
<pre><code>1. diredのRETキーをview-modeで開く設定にする。vキーの機能をRETに割り当てるだけです。
2. 編集モードで開く機能は、oキーに割当てます。
3. find-fileでファイルを開くときは、編集モードで開く（当然新規ファイルも編集モード）
</code></pre><h2 id="switchbuffer--neotreeからもview-modeでファイルを開きたい">Switch−buffer / Neotreeからもview-modeでファイルを開きたい</h2>
<p>switch-bufferや、neotreeは、find-fileでファイルを開きますので、このモードからのみview-modeで開くためにはカスタマイズが必要です。</p>
<p>現状、ivy-switch-bufferの場合は、ivy&ndash;switch-buffer-actionの関数、neotreeの場合は、neo-open-fileの関数の中にある、find-file コマンドをview-fileコマンドに書き換えて対応していますが、updateで変わってしまう可能性もあるので、もう少しスマートな方法を模索中です。</p>
<h2 id="evilではだめなの">Evilではだめなの?</h2>
<p>Evilも使ってみました。面白いとは思いましたが、Emacsモードとvimモードとの行き来が煩わしく使う気にはなりませんでした。
そこまでこだわるならvimそのものを使うほうが賢明だと思うからです。
EmacsとVimの比較論をするつもりはありませんが文章書きがメインなわたしの場合は、Emacsの方が遥かに使いやすいです。</p>
<p>ただ、ファイルの閲覧中に検索とかの作業をしていて、うっかりゴミを書き込んでしまうというようなことが多く、とくに設定ファイルの場合は致命傷になります。やむなくVimを起動して修正する…そんなシーンに何度も悩まされました。view-mode優先で使うことを思いついたのはそこが原点です。</p>
<p>メインはEmacs、非常用としてVimという住み分けが今のわたしの環境です。</p>
<h2 id="おまけの機能">おまけの機能</h2>
<h4 id="view-modeのときだけ有効になる機能を幾つか付加しています">※view-modeのときだけ有効になる機能を幾つか付加しています。</h4>
<ul>
<li>mode-lineの色を変える</li>
<li>hl-line-modeを有効にする</li>
<li>neotreeを使えるようにする</li>
<li>印刷できるようにする(環境によって設定は変わります。わたしの場合はMac)</li>
</ul>
<h4 id="あるとかえって紛らわしいキーに自分用の機能を割り当てています">※あるとかえって紛らわしいキーに自分用の機能を割り当てています。</h4>
<ul>
<li>&ldquo;s&rdquo; iserchは使わないので、swiperを使えるようにする。</li>
<li>&ldquo;d&rdquo; vim likeな &ldquo;d&rdquo; は先ず使うことがないので、よく使うdired-jumpにしている。</li>
<li>&ldquo;m&rdquo; 運よく空いてたのでよく使うmagit-statusを割り当てる。</li>
<li>&ldquo;n&rdquo; iserch付属の機能(次検索をする)も使わないので、neotreeに割り当てる。</li>
<li>&quot; : &quot; view-modeで編集するとauto-saveされないこともあるので、&quot; : &quot; にsave-bufferを割り当てました。</li>
</ul>
<p>これらはみな好みの問題だと思うのであくまで参考です。</p>]]></content>
        </item>
        
        <item>
            <title>easy-hugoでマルチブログライフを愉しむ</title>
            <link>http://minorugh.github.io/posts/easy-hugo-for-multi-blog/</link>
            <pubDate>Wed, 22 Nov 2017 17:12:36 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/easy-hugo-for-multi-blog/</guid>
            <description>&lt;p&gt;easy-hugo の作者 masasam さんが、我儘な私のリクエストに応えて数々のアップデートをしてくださいましたので、感謝の気持ちをこめて紹介させていただきます。
easy-hugo は、package-install できますが、頻繁に更新されているので、&lt;a href=&#34;https://github.com/masasam/emacs-easy-hugo&#34;&gt;作者のページ&lt;/a&gt; で最新情報をチェックされるといいです。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>easy-hugo の作者 masasam さんが、我儘な私のリクエストに応えて数々のアップデートをしてくださいましたので、感謝の気持ちをこめて紹介させていただきます。
easy-hugo は、package-install できますが、頻繁に更新されているので、<a href="https://github.com/masasam/emacs-easy-hugo">作者のページ</a> で最新情報をチェックされるといいです。</p>
<p><img src="https://c2.staticflickr.com/2/1857/42814510480_df6feb8a6e_b.jpg" alt="Alt Text"></p>
<h2 id="easy-hugo-の特徴">easy-hugo の特徴</h2>
<p>easy-hugo は、hugo によるブログ運用を限りなく自動化することに特化した Lisp です。</p>
<ul>
<li>マルチブログに対応</li>
<li>対話式の GUI メニューで、初心者にもわかりやすい</li>
<li>さまざまなユーザーニーズが配慮され
ているので、拡張性、Customize 性に富んでいる</li>
</ul>
<h2 id="hugo-によるマルチブログ環境">hugo によるマルチブログ環境</h2>
<p>公開を目的としたブログは一つ、多くても二つというのが一般的で、私の場合もそうでしたが、
wordpress から hugo へ移行してみて、あまりの快適さに書庫代わりのようなブログが次々と増えていったのです。</p>
<ul>
<li>Emacsな日々の備忘録（Clmemo）</li>
<li>俳句とエッセイの記録（essay blog)</li>
<li>撮りためた写真の記録（Photo Blog）</li>
</ul>
<p>私の場合は、全てのドメインとファイルを xserver で管理していますが、esay-hugo では、Github、Amazon S3、Google Cloud Storage などへの Deploy 設定も用意されています。</p>
<p>esay-hugo は、Emacs の上でそれらを渡り歩き、いとも簡単にマルチブログを管理できるのです。</p>
<h2 id="拡張設定ファイル名とハイパーリンクを自動生成させる">拡張設定：ファイル名とハイパーリンクを自動生成させる</h2>
<p>version 0.25以降のhugoでは、default.mdに <code>title = &quot;{{ replace .TranslationBaseName &quot;-&quot; &quot; &quot; | title }}&quot;</code> と書いておくと拡張子を除外したファイル名がそのままタイトルになりますが、私の場合は、下記のように最初にpublishしたときのタイムスタンプを付すようにしました。</p>
<pre><code>201805021200.日本語ファイル名.md
</code></pre><p>また、hugoの場合、公開されるページのurlは、blogurl/post/failename というハイパーリンクになります。長いファイル名や日本語がハイパーリンクになるのは抵抗あるので、私の場合、blogurl/publishしたときのタイムスタンプになるようにしています。</p>
<p>この二つを実現するためにカスタマイズした関数を設定に書きました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; easy-hugo-replace-key</span>
(defun easy-hugo-replace-key (key val)
  (save-excursion
    (goto-char (point-min))
    <span style="color:#75715e">;; quoted value</span>
    (<span style="color:#66d9ef">if</span> (and (re-search-forward (concat key <span style="color:#e6db74">&#34; = \&#34;&#34;</span>) <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>)
             (re-search-forward <span style="color:#e6db74">&#34;[^\&#34;]+&#34;</span> (line-end-position) <span style="color:#66d9ef">t</span>))
        (or (replace-match val) <span style="color:#66d9ef">t</span>) <span style="color:#75715e">;; ensure we return t</span>
      <span style="color:#75715e">;; unquoted value</span>
      (when (and (re-search-forward (concat key <span style="color:#e6db74">&#34; = &#34;</span>) <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>)
                 (re-search-forward <span style="color:#e6db74">&#34;.+&#34;</span> (line-end-position) <span style="color:#66d9ef">t</span>))
        (or (replace-match val) <span style="color:#66d9ef">t</span>)))))

<span style="color:#75715e">;; Customize the newpost function</span>
(defun my-easy-hugo-newpost (post-file)
  <span style="color:#e6db74">&#34;Customize the newpost function.
</span><span style="color:#e6db74">Automatically create file name with timestamp and embed timestamp in hyperlink&#34;</span>
  (interactive (<span style="color:#a6e22e">list</span> (read-from-minibuffer
                      <span style="color:#e6db74">&#34;Filename: &#34;</span>
                      <span style="color:#f92672">`</span>(<span style="color:#f92672">,</span>easy-hugo-default-ext <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">nil</span>)))
  <span style="color:#75715e">;; Add a time stamp to the beginning of post-file</span>
  (<span style="color:#66d9ef">let</span> ((filename (concat <span style="color:#e6db74">&#34;post/&#34;</span> (format-time-string <span style="color:#e6db74">&#34;%Y%m%d%H%M.&#34;</span>) post-file))
        (file-ext (file-name-extension post-file)))
    (easy-hugo-with-env
     (when (file-exists-p (file-truename (concat <span style="color:#e6db74">&#34;content/&#34;</span> filename)))
       (<span style="color:#66d9ef">error</span> <span style="color:#e6db74">&#34;%s already exists!&#34;</span> (concat easy-hugo-basedir <span style="color:#e6db74">&#34;content/&#34;</span> filename)))
     (call-process <span style="color:#e6db74">&#34;hugo&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#34;*hugo*&#34;</span> <span style="color:#66d9ef">t</span> <span style="color:#e6db74">&#34;new&#34;</span> filename)
     (find-file (concat <span style="color:#e6db74">&#34;content/&#34;</span> filename))
     <span style="color:#75715e">;; Automatically write title and url in file header</span>
     (easy-hugo-replace-key <span style="color:#e6db74">&#34;title&#34;</span> (file-name-sans-extension post-file))
     (easy-hugo-replace-key <span style="color:#e6db74">&#34;url&#34;</span> (format-time-string <span style="color:#e6db74">&#34;%Y%m%d%H%M&#34;</span>))
     (goto-char (point-max))
     (save-buffer))))

</code></pre></div><p>上記コマンドを実行することで新規投稿時にファイルのヘッダーに必要な情報が自動的に書き込まれます。</p>
<p>この機能に対応させるための default.md は以下の通りです。</p>
<h5 id="archetypesdefaultmd">archetypes/default.md</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml"><span style="color:#960050;background-color:#1e0010">+++</span>
 <span style="color:#a6e22e">date</span> = <span style="color:#e6db74">&#34;{{ .Date }}&#34;</span>
 <span style="color:#a6e22e">tags</span> = [<span style="color:#e6db74">&#34;&#34;</span>]
 <span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#34; &#34;</span>
 <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34; &#34;</span>
<span style="color:#960050;background-color:#1e0010">+++</span>
</code></pre></div><h2 id="設定ファイル">設定ファイル</h2>
<p>設定ファイルの全容は、以下のとおりです。</p>
<p>試行錯誤を繰り返し、今も日進月歩ですので、最新版は、<a href="https://goo.gl/UyzLJA">私の Github</a> に置いてあります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">(<span style="color:#a6e22e">use-package</span> easy-hugo
  <span style="color:#e6db74">:init</span>
  <span style="color:#75715e">;; Main blog (=blog1)</span>
  (<span style="color:#66d9ef">setq</span> easy-hugo-basedir <span style="color:#e6db74">&#34;~/Dropbox/Web/textgh/snap/&#34;</span>
        easy-hugo-url <span style="color:#e6db74">&#34;https://snap.textgh.org&#34;</span>
        easy-hugo-sshdomain <span style="color:#e6db74">&#34;xsrv&#34;</span>
        easy-hugo-root <span style="color:#e6db74">&#34;/home/minorugh/textgh.org/public_html/snap/&#34;</span>
        easy-hugo-previewtime <span style="color:#e6db74">&#34;300&#34;</span>)
  <span style="color:#75715e">;; Bloglist</span>
  (<span style="color:#66d9ef">setq</span> easy-hugo-bloglist
       <span style="color:#75715e">;; blog2 setting</span>
        <span style="color:#f92672">&#39;</span>(((easy-hugo-basedir <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;~/Dropbox/Web/textgh/essay/&#34;</span>)
          (easy-hugo-url <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;https://essay.textgh.org&#34;</span>)
          (easy-hugo-sshdomain <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;xsrv&#34;</span>)
          (easy-hugo-root <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;/home/minorugh/textgh.org/public_html/essay/&#34;</span>))
       <span style="color:#75715e">;; blog3 setting</span>
         ((easy-hugo-basedir <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;~/Dropbox/Web/textgh/hl/&#34;</span>)
          (easy-hugo-url <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;https://hl.textgh.org&#34;</span>)
          (easy-hugo-sshdomain <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;xsrv&#34;</span>)
          (easy-hugo-root <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;/home/minorugh/textgh.org/public_html/hl/&#34;</span>))
       <span style="color:#75715e">;; blog4 setting</span>
         ((easy-hugo-basedir <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;~/Dropbox/Web/textgh/ryo/&#34;</span>)
          (easy-hugo-url <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;https://ryo.textgh.org&#34;</span>)
          (easy-hugo-sshdomain <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;xsrv&#34;</span>)
          (easy-hugo-root <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;/home/minorugh/textgh.org/public_html/ryo/&#34;</span>))))

  <span style="color:#75715e">;; Sort-publishday on startup</span>
  (<span style="color:#66d9ef">setq</span> easy-hugo--sort-publishday-flg <span style="color:#ae81ff">1</span>)
  (<span style="color:#66d9ef">setq</span> easy-hugo--sort-char-flg <span style="color:#66d9ef">nil</span>)
  (<span style="color:#66d9ef">setq</span> easy-hugo--sort-time-flg <span style="color:#66d9ef">nil</span>)

  <span style="color:#75715e">;; Customize for my help menu</span>
  (<span style="color:#66d9ef">setq</span> easy-hugo-help-line <span style="color:#ae81ff">4</span>)
  (<span style="color:#66d9ef">setq</span> easy-hugo-help
  <span style="color:#e6db74">&#34;n .. New blog post    r .. Rename file     p .. Preview          g .. Refresh
</span><span style="color:#e6db74">d .. Delete post      a .. Seach blog ag   P .. Publish server   e .. Edit easy-hugo
</span><span style="color:#e6db74">S .. Sort char        s .. Sort time       &lt; .. Previous blog    &gt; .. Next blog
</span><span style="color:#e6db74">N .. No help [tab]    . .. Next postdir    o .. Open base dir    v .. View other window
</span><span style="color:#e6db74">&#34;</span>))
<span style="color:#75715e">;; end of use-package settings //////////////////////////////////////</span>

<span style="color:#75715e">;; Key-settings</span>
(bind-key [tab] <span style="color:#e6db74">&#39;easy-hugo-no-help</span> easy-hugo-mode-map)
(bind-key [?\r] <span style="color:#e6db74">&#39;easy-hugo-view</span> easy-hugo-mode-map) <span style="color:#75715e">;; enter key</span>
(bind-key <span style="color:#e6db74">&#34;v&#34;</span> <span style="color:#e6db74">&#39;easy-hugo-view-other-window</span> easy-hugo-mode-map)
(bind-key <span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#e6db74">&#39;easy-hugo-open-basedir</span> easy-hugo-mode-map)
(bind-key <span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#e6db74">&#39;easy-hugo-rename</span> easy-hugo-mode-map)
(bind-key <span style="color:#e6db74">&#34;n&#34;</span> <span style="color:#e6db74">&#39;my-easy-hugo-newpost</span> easy-hugo-mode-map)
(bind-key <span style="color:#e6db74">&#34;u&#34;</span> <span style="color:#e6db74">&#39;easy-hugo-sort-publishday</span> easy-hugo-mode-map)
(bind-key <span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#e6db74">&#39;my/edit-easy-hugo</span> easy-hugo-mode-map)
(bind-key <span style="color:#e6db74">&#34;C-c e&#34;</span> <span style="color:#e6db74">&#39;easy-hugo</span>)
(bind-key <span style="color:#e6db74">&#34;C-c p&#34;</span> <span style="color:#e6db74">&#39;easy-hugo-preview</span>)
(bind-key <span style="color:#e6db74">&#34;C-c P&#34;</span> <span style="color:#e6db74">&#39;easy-hugo-publish</span>)
(bind-key <span style="color:#e6db74">&#34;C-c t&#34;</span> <span style="color:#e6db74">&#39;easy-hugo-complete-tags</span>)

<span style="color:#75715e">;; Modified sort-char function</span>
(defun my-easy-hugo-sort-char ()
  <span style="color:#e6db74">&#34;Sort article by characters in descending order.&#34;</span>
  (interactive)
    (<span style="color:#66d9ef">setq</span> easy-hugo--sort-time-flg <span style="color:#66d9ef">nil</span>)
    (<span style="color:#66d9ef">setq</span> easy-hugo--sort-publishday-flg <span style="color:#66d9ef">nil</span>)
    (<span style="color:#66d9ef">setq</span> easy-hugo--sort-char-flg <span style="color:#ae81ff">2</span>)
    (easy-hugo))

<span style="color:#75715e">;; easy-hugo-replace-key</span>
(defun easy-hugo-replace-key (key val)
  (save-excursion
    (goto-char (point-min))
    <span style="color:#75715e">;; quoted value</span>
    (<span style="color:#66d9ef">if</span> (and (re-search-forward (concat key <span style="color:#e6db74">&#34; = \&#34;&#34;</span>) <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>)
             (re-search-forward <span style="color:#e6db74">&#34;[^\&#34;]+&#34;</span> (line-end-position) <span style="color:#66d9ef">t</span>))
        (or (replace-match val) <span style="color:#66d9ef">t</span>) <span style="color:#75715e">;; ensure we return t</span>
      <span style="color:#75715e">;; unquoted value</span>
      (when (and (re-search-forward (concat key <span style="color:#e6db74">&#34; = &#34;</span>) <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>)
                 (re-search-forward <span style="color:#e6db74">&#34;.+&#34;</span> (line-end-position) <span style="color:#66d9ef">t</span>))
        (or (replace-match val) <span style="color:#66d9ef">t</span>)))))

<span style="color:#75715e">;; Modified hugo-newpost function</span>
(defun my-easy-hugo-newpost (post-file)
  <span style="color:#e6db74">&#34;Customize the newpost function.
</span><span style="color:#e6db74">Automatically create file name with timestamp and embed timestamp in hyperlink&#34;</span>
  (interactive (<span style="color:#a6e22e">list</span> (read-from-minibuffer
                      <span style="color:#e6db74">&#34;Filename: &#34;</span>
                      <span style="color:#f92672">`</span>(<span style="color:#f92672">,</span>easy-hugo-default-ext <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">nil</span>)))
  <span style="color:#75715e">;; Add a time stamp to the beginning of post-file</span>
  (<span style="color:#66d9ef">let</span> ((filename (concat <span style="color:#e6db74">&#34;post/&#34;</span> (format-time-string <span style="color:#e6db74">&#34;%Y%m%d%H%M.&#34;</span>) post-file))
        (file-ext (file-name-extension post-file)))
    (easy-hugo-with-env
     (when (file-exists-p (file-truename (concat <span style="color:#e6db74">&#34;content/&#34;</span> filename)))
       (<span style="color:#66d9ef">error</span> <span style="color:#e6db74">&#34;%s already exists!&#34;</span> (concat easy-hugo-basedir <span style="color:#e6db74">&#34;content/&#34;</span> filename)))
     (call-process <span style="color:#e6db74">&#34;hugo&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#34;*hugo*&#34;</span> <span style="color:#66d9ef">t</span> <span style="color:#e6db74">&#34;new&#34;</span> filename)
     (find-file (concat <span style="color:#e6db74">&#34;content/&#34;</span> filename))
     <span style="color:#75715e">;; Automatically write title and url in file header</span>
     (easy-hugo-replace-key <span style="color:#e6db74">&#34;title&#34;</span> (file-name-sans-extension post-file))
     (easy-hugo-replace-key <span style="color:#e6db74">&#34;url&#34;</span> (format-time-string <span style="color:#e6db74">&#34;%Y%m%d%H%M&#34;</span>))
     (goto-char (point-max))
     (save-buffer))))

<span style="color:#75715e">;; Required to use hugo-complete-tags</span>
(<span style="color:#a6e22e">use-package</span> popup)

<span style="color:#75715e">;; Edit this file</span>
(defun my/edit-easy-hugo ()
  (interactive)
  (find-file <span style="color:#e6db74">&#34;~/Dropbox/emacs.d/inits/80_easy-hugo.el&#34;</span>))

<span style="color:#75715e">;;; 80_easy-hugo.el ends here</span>
</code></pre></div><h2 id="最後に">最後に</h2>
<p>easy-hugo のファイル一覧は、デフォルトでは、記事のタイムスタンプ順に並びます。この設定の場合、記事の内容を修正、更新する度に、ファイルの並びが変わることになります。</p>
<p>私の場合は、ファイル一覧は、常に記事を作成した時系列順に並べておきたいので、デフォルトのファイルの並びを投稿日時順になるように設定しています。</p>
<p>デフォルトで投稿日時順でsortさせるための設定は以下のとおりです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;; Sort-publishday on startup</span>
  (<span style="color:#66d9ef">setq</span> easy-hugo--sort-publishday-flg <span style="color:#ae81ff">1</span>)
  (<span style="color:#66d9ef">setq</span> easy-hugo--sort-char-flg <span style="color:#66d9ef">nil</span>)
  (<span style="color:#66d9ef">setq</span> easy-hugo--sort-time-flg <span style="color:#66d9ef">nil</span>)
</code></pre></div><h3 id="masasam-さんに感謝">masasam さんに感謝</h3>
<p>ご紹介した設定の全ては、easy-hugo の作者、masasam さんのご指導によるものです。</p>
<p>Emacs-Lisp のイロハも知らなかった初心者の私ですが、easy-hugo と関わったお陰で、片言ながらも Lisp の読み書きができるようになり、パッチワークでカスタマイズできるまでになりました。</p>
<p>masasam さんに感謝、easy-hugo に感謝です。</p>]]></content>
        </item>
        
        <item>
            <title>RubyでWeb上からファイルをダウンロードする：openメソッドのお勉強</title>
            <link>http://minorugh.github.io/posts/ruby-open-method/</link>
            <pubDate>Sat, 18 Nov 2017 15:43:44 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/ruby-open-method/</guid>
            <description>&lt;p&gt;別サイトで運用しているLINEBLOGの記事をダウンロードし、そこから更新情報を抜き出して自分のホームページに表示したかったのでRubyのお勉強を兼ねて試してみた。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>別サイトで運用しているLINEBLOGの記事をダウンロードし、そこから更新情報を抜き出して自分のホームページに表示したかったのでRubyのお勉強を兼ねて試してみた。</p>
<p>わかりやすく解説してあるページを見つけたので &raquo;&gt; <a href="http://uxmilk.jp/22830">http://uxmilk.jp/22830</a></p>
<p>まずは、サンプル通りにコードを書いてquickrun</p>
<h2 id="openメソッドのサンプル">openメソッドのサンプル</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;open-uri&#39;</span>
url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://lineblog.me/minorugh&#39;</span>
open(url) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>file<span style="color:#f92672">|</span>
  puts file<span style="color:#f92672">.</span>read
<span style="color:#66d9ef">end</span>
</code></pre></div><ul>
<li>ブロック構文を使わないというサンプルも試してみる</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;open-uri&#39;</span>
url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://lineblog.me/minorugh&#39;</span>
file<span style="color:#f92672">=</span>open(url) 
  puts file<span style="color:#f92672">.</span>read
</code></pre></div><ul>
<li>なるほどね</li>
</ul>
<h2 id="メタデータの取得を試す">メタデータの取得を試す</h2>
<p>取得したファイルからメタデータを取得する関数が使えるとのことで試す</p>
<ul>
<li>puts file.base_uri</li>
<li>puts file.charset</li>
<li>puts file.content_type</li>
<li>puts file.last_modified</li>
<li>puts file.meta</li>
<li>puts file.status</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;open-uri&#39;</span>
url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://lineblog.me/minorugh&#39;</span>
file <span style="color:#f92672">=</span> open(url)
puts file<span style="color:#f92672">.</span>last_modified
</code></pre></div><ul>
<li>ほかはみな確認できたのに、last_modifiedは、なぜかうまくいかなかった</li>
</ul>
<h2 id="ファイルをダウンロードして保存する">ファイルをダウンロードして保存する</h2>
<ul>
<li>ファイルの読み込みはできているので、これを保存することにした</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;open-uri&#39;</span>
url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://lineblog.me/minorugh&#39;</span>

open(url) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>file<span style="color:#f92672">|</span>
 open(<span style="color:#e6db74">&#34;lineblog.html&#34;</span>, <span style="color:#e6db74">&#34;w+b&#34;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>out<span style="color:#f92672">|</span>
 out<span style="color:#f92672">.</span>write(file<span style="color:#f92672">.</span>read)  
 <span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><ul>
<li>せっかくお勉強したのでもう少し簡潔にしてみる</li>
<li>LINEBLOG側のサーバーのトラブルに備えて、念のためbackupも取るようにした</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#75715e">## getfile.rb</span>

require <span style="color:#e6db74">&#39;open-uri&#39;</span>
url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://lineblog.me/minorugh&#39;</span>

file <span style="color:#f92672">=</span> open(url)
open(<span style="color:#e6db74">&#34;lineblog.html&#34;</span>, <span style="color:#e6db74">&#34;w+b&#34;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>out<span style="color:#f92672">|</span>
out<span style="color:#f92672">.</span>write(file<span style="color:#f92672">.</span>read)
<span style="color:#66d9ef">end</span>

<span style="color:#75715e"># backup</span>
require <span style="color:#e6db74">&#34;date&#34;</span>
d <span style="color:#f92672">=</span> <span style="color:#66d9ef">Date</span><span style="color:#f92672">.</span>today
str <span style="color:#f92672">=</span> d<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;backup/%Y%m%d_lineblog.html&#34;</span>)

require <span style="color:#e6db74">&#34;fileutils&#34;</span>
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>cp(<span style="color:#e6db74">&#34;lineblog.html&#34;</span>, str)    <span style="color:#75715e"># コピー</span>
</code></pre></div><h2 id="更新情報に反映させる">更新情報に反映させる</h2>
<ul>
<li>ダウンロードしたlineblog.htmlを自分のWEBサーバーにアップロードする</li>
<li>サーバにあげたファイルは、他のファイルと同様にlast_updateが取得できて表示させることが出来る</li>
<li>通常、更新情報からは、当該ファイルにジャンプするようにリンクされているが、lineblogの場合は、本物のLINEBLOGページにジャンプさせないといけない</li>
<li>つまりWEBから取得したファイルは更新情報の判定フラッグとして使うだけ、表示用には使わない</li>
<li>ファイルのダウンロードからサーバーへのアップロードするまでの作業は、makefileで自動化している</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#75715e">## maikefile
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">a.out</span><span style="color:#f92672">:</span>getfile upftp

<span style="color:#a6e22e">getfile</span><span style="color:#f92672">:</span>
	ruby getfile.rb
<span style="color:#a6e22e">upftp</span><span style="color:#f92672">:</span>
	perl ~/Dropbox/Web/GH/upftp/upftp.pl
</code></pre></div><h2 id="参考サイト">参考サイト</h2>
<p><a href="http://uxmilk.jp/22830">RubyでWeb上からファイルをダウンロードする：open-uri</a></p>
<p><a href="http://www.hyuki.com/upftp/">UpFtp-結城浩</a></p>]]></content>
        </item>
        
        <item>
            <title>Makefile の Suspicious line XXX. Save anyway を抑制する</title>
            <link>http://minorugh.github.io/posts/makefile-error/</link>
            <pubDate>Fri, 17 Nov 2017 15:22:25 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/makefile-error/</guid>
            <description>&lt;p&gt;Emacsのmakefile-modeで行頭のtabを挿入するたびに &amp;ldquo;Suspicious line XXX. Save anyway?&amp;rdquo; というポップアップ・プロンプトが出る。
この現象は、auto-save-buers との関係らしく、以下のおまじないを設定することででなくなった。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Emacsのmakefile-modeで行頭のtabを挿入するたびに &ldquo;Suspicious line XXX. Save anyway?&rdquo; というポップアップ・プロンプトが出る。
この現象は、auto-save-buers との関係らしく、以下のおまじないを設定することででなくなった。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;;; Makefile の Suspicious line XXX. Save anyway を抑制する</span>
(add-hook <span style="color:#e6db74">&#39;makefile-mode-hook</span>
    (<span style="color:#a6e22e">function</span>
        (lambda ()
            (fset <span style="color:#e6db74">&#39;makefile-warn-suspicious-lines</span> <span style="color:#e6db74">&#39;ignore</span>))))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Emacsのスタート画面をイケメンにする</title>
            <link>http://minorugh.github.io/posts/dashboard/</link>
            <pubDate>Mon, 16 Oct 2017 15:09:06 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/dashboard/</guid>
            <description>&lt;p&gt;100分の1秒でもemacsの起動を早くしようと試行錯誤している一方、起動のたびに真黒なScratch画面と向きあっていると気分も暗くなってくる。せめて初期画面くらいは、ホットするようなものにしたい…ということで、dashbord.elを導入してみた。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>100分の1秒でもemacsの起動を早くしようと試行錯誤している一方、起動のたびに真黒なScratch画面と向きあっていると気分も暗くなってくる。せめて初期画面くらいは、ホットするようなものにしたい…ということで、dashbord.elを導入してみた。</p>
<p><img src="https://c2.staticflickr.com/2/1869/43955677834_da8873c195_b.jpg" alt="Alt Text"></p>
<h2 id="dashbordelを入れる">dashbord.elを入れる</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">M-x package install dashbord.el
</code></pre></div><!-- raw HTML omitted -->
<p>設定は以下の通り</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#75715e">;; Set the title</span>
(when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;darwin</span>)
  (setq dashboard-banner-logo-title
        (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;GNU Emacs &#34;</span> emacs-version <span style="color:#e6db74">&#34; kernel &#34;</span>
                (<span style="color:#a6e22e">car</span> (split-string (shell-command-to-string <span style="color:#e6db74">&#34;uname -r&#34;</span>)))  <span style="color:#e6db74">&#34; x86_64 Mac OS X &#34;</span>
                (<span style="color:#a6e22e">car</span>(split-string (shell-command-to-string <span style="color:#e6db74">&#34;sw_vers -productVersion&#34;</span>) <span style="color:#e6db74">&#34;-&#34;</span>)))))
(when (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;gnu/linux</span>)
  (setq dashboard-banner-logo-title
        (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;GNU Emacs &#34;</span> emacs-version <span style="color:#e6db74">&#34; kernel &#34;</span>
                (<span style="color:#a6e22e">car</span> (split-string (shell-command-to-string <span style="color:#e6db74">&#34;uname -r&#34;</span>)))  <span style="color:#e6db74">&#34; x86_64 Debian GNU/Linux &#34;</span>
                (<span style="color:#a6e22e">car</span> (split-string (shell-command-to-string <span style="color:#e6db74">&#34;cat /etc/debian_version&#34;</span>) <span style="color:#e6db74">&#34;_&#34;</span>)))))

<span style="color:#75715e">;; Set the banner</span>
(setq dashboard-startup-banner <span style="color:#e6db74">&#34;~/Dropbox/emacs.d/emacs.png&#34;</span>)
(dashboard-setup-startup-hook)
(setq dashboard-page-separator <span style="color:#e6db74">&#34;\n\f\f\n&#34;</span>)
(setq dashboard-items <span style="color:#f92672">&#39;</span>((recents  <span style="color:#f92672">.</span> <span style="color:#ae81ff">15</span>)))
</code></pre></div><p>Recent listは、Tab(Shift+Tab)キーを押すことで選択できる。</p>]]></content>
        </item>
        
        <item>
            <title>DebianにEmacs25.3をInstallする</title>
            <link>http://minorugh.github.io/posts/emacs25.3-to-debian/</link>
            <pubDate>Mon, 25 Sep 2017 18:41:37 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/emacs25.3-to-debian/</guid>
            <description>私の場合は、ThinkpadのWindows10にVirtualBoxをInstallし、Vbox上でDebianを動かしています。 Inst</description>
            <content type="html"><![CDATA[<p>私の場合は、ThinkpadのWindows10にVirtualBoxをInstallし、Vbox上でDebianを動かしています。</p>
<h2 id="installの手順">Installの手順</h2>
<ul>
<li>apt-getでインストールできるのは、Emacs25.1までなので、dawnloadしたsourceを直接コンパイルしてインストールします。</li>
<li>幸い、もともとEmacs25.2がInstallしたあったので、すんなり成功しました。</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ wget http://public.p-knowledge.co.jp/gnu-mirror/emacs/emacs-25.3.tar.xz 
$ unar emacs-25.3.tar.xz
$ cd emacs-25.3
$ ./configure --with-x-toolkit<span style="color:#f92672">=</span>gtk3 --with-sound<span style="color:#f92672">=</span>no --with-x --with-xwidgets
$ make
$ sudo make install
$ sudo reboot 
$ emacs --version
$ GNU Emacs 25.3.1
…
</code></pre></div><ul>
<li>emacs25.2はインストールしたままで上書きしましたが、まったく問題ありませんでした。</li>
</ul>
<h2 id="xwidgetsが動いたov">xwidgetsが動いた(^o^)v</h2>
<ul>
<li>Emacs25で採用されたxwidgetsですが、Mac環境では動きませんでした。</li>
<li>Linuxでは動くとの情報だったので試しました。</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>macOS SierraでSIPを無効にする方法</title>
            <link>http://minorugh.github.io/posts/disable-sip-sierra/</link>
            <pubDate>Sun, 24 Sep 2017 20:28:52 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/disable-sip-sierra/</guid>
            <description>Sierraには、SIP（System Integrity Protecton）というセキュリティを強化機能が追加されていて、sudoを使ってもシステム用とされ</description>
            <content type="html"><![CDATA[<p>Sierraには、SIP（System Integrity Protecton）というセキュリティを強化機能が追加されていて、sudoを使ってもシステム用とされる/usr等のディレクトリに変更を加えられないようになっていて、開発環境の構築になにかと不都合です。</p>
<p>そこでSIPを無効にすることにしました。</p>
<h2 id="1リカバリーモードで起動する">1.リカバリーモードで起動する</h2>
<p>command + r を押したままMacを起動させます。</p>
<h2 id="2ターミナルを起動">2.ターミナルを起動</h2>
<p>再起動後いつもとは違う画面となっていますが、ビックリしないでください。</p>
<p>画面上の選択のユーティリティーからターミナルを起動します。</p>
<p><img src="https://c1.staticflickr.com/5/4461/36608131523_42793469ff_z.jpg" alt="Alt Text"></p>
<h2 id="3sipコマンドを打ち込む">3.SIPコマンドを打ち込む</h2>
<p>立ち上げたターミナルに以下を打ち込み、enterを押す。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">csrutil disable
</code></pre></div><p><img src="https://c1.staticflickr.com/5/4401/36608134733_f719cfd7ab_z.jpg" alt="Alt Text"></p>
<p>上図のように、</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Successfully disabled System Integrity Protection. Please restart the machine <span style="color:#66d9ef">for</span> the changes to take effect.
</code></pre></div><p>と返ってくれば成功です。Appleメニューから「再起動」を選んで再起動すると，SIPが無効化された状態で起動します。</p>
<h2 id="4sipを有効に戻す">4.SIPを有効に戻す</h2>
<p>SIPが無効の状態で行う必要な作業が終わったら、元に戻しておきましょう。</p>
<p>同じ手順でターミナルを立ち上げて、csrutil enable と打ち込むだけです。</p>
<p>ちなみに私は無効のままにしています。</p>
]]></content>
        </item>
        
        <item>
            <title>SierraでIllustrator(CS3~6)のエラーを回避する方法</title>
            <link>http://minorugh.github.io/posts/illustrator-error-on-sierra/</link>
            <pubDate>Sat, 23 Sep 2017 22:33:33 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/illustrator-error-on-sierra/</guid>
            <description>macOSをSierraにバージョンアップすると、せっかく構築した開発環境にいろいろ障害が出そうなので、ずっとMarvericsで頑張ってい</description>
            <content type="html"><![CDATA[<p>macOSをSierraにバージョンアップすると、せっかく構築した開発環境にいろいろ障害が出そうなので、ずっとMarvericsで頑張っていましたが、iTunesなどのバージョンアップについていけなくなったので、やむなくSierraに移行しました。</p>
<h2 id="javaランタイムエラーを回避する方法">Javaランタイムエラーを回避する方法</h2>
<p>Sierraにアップグレードした状態で、Illustrator(CS3~6)を起動させると、次のようなエラーメッセージが出ます。</p>
<p><img src="https://c1.staticflickr.com/5/4428/37248330042_8c1d6434d4_z.jpg" alt="Alt Text"></p>
<p>原因は、<a href="https://applech2.com/archives/45349646.html">Appleが、El Capitan以降でJava 6のサポートを終了する。</a></p>
<p>とのことで、Sierra(10.12)では、CSシリーズを起動することができなくなったというわけです。</p>
<h3 id="javaチェックの実態">Javaチェックの実態</h3>
<p>エラーがでるのは、起動時に以下のJava6の2つのディレクトリの有無をチェックしているからだとのことです。</p>
<ul>
<li><code>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk</code></li>
<li><code>/System/Library/Java/Support/Deploy.bundle</code></li>
</ul>
<p>ところが実際には、Java6は使っていないそうです。
ということは、Java6の2つのディレクトリさえ存在していれば、実際にJava6がインストールされてなくても、Adobe CSシリーズは動作するということになります。</p>
<h3 id="sierraにjava6のデレクトリを作成する方法">SierraにJava6のデレクトリを作成する方法</h3>
<p>実は、Sieeraの問題点はここからです。</p>
<p>EI Capitan以後に採用された、System Integrity Protection(SIP)による制約のために、管理者権限をもってしても、/System/Library 下に任意のデレクトリを新規作成することができません。</p>
<p>そこで、一時的にSIPを無効にし、当該ディレクトリを作成した後に、再びSIPを有効にする必要があります。</p>
<p><a href="https://snap.textgh.org/201709242028/">macOS SierraでSIPを無効にする方法</a></p>
<p>上記によりSIPを無効化して再起動し、改めてターミナルを起動します。ターミナルに以下のように入力して実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo mkdir -p /System/Library/Java/JavaVirtualMachines/1.6.0.jdk /System/Library/Java/Support/Deploy.bundle
</code></pre></div><p>非常に長いコマンドなので、右端の、Deploy.bundleまで確実にコピーしてください。</p>
<p>管理者パスワードを要求されるので入力します。</p>
<p>これで、Illustrator/Photoshop が起動できると思います。</p>
<h2 id="illustrator-cs4のプラグイン読み込みエラーを回避する方法">Illustrator CS4のプラグイン読み込みエラーを回避する方法</h2>
<p>私の場合、Illustrator CS4を起動したところ「プラグインの読み込みエラーです。PhotoshopImport.aip」とでます。</p>
<p>いろいろググって試しましたが解決せず、最終的に下記サイトにある、<code>Yosemite.AICS4.Fix.mpkg.zip</code>をDownloadし、インストールすることで解決しました。</p>
<p><a href="https://github.com/ralvarezt/aics4_yosemite_fix/releases">https://github.com/ralvarezt/aics4_yosemite_fix/releases</a></p>
<p>Yosemite対応のようですが、Sierra でも大丈夫でした。</p>
]]></content>
        </item>
        
        <item>
            <title>Perl:文字列前後のスペース＆タブを削除</title>
            <link>http://minorugh.github.io/posts/perl-delete-tab/</link>
            <pubDate>Sat, 23 Sep 2017 22:07:14 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/perl-delete-tab/</guid>
            <description>運営している俳句サイトで自動句会システムを作動させている。 ユーザーが自分が詠んだ俳句をテキストフォームを使って投稿するという仕組みなのですが</description>
            <content type="html"><![CDATA[<p>運営している俳句サイトで自動句会システムを作動させている。</p>
<p>ユーザーが自分が詠んだ俳句をテキストフォームを使って投稿するという仕組みなのですが、キーボードからの入力ではなくて、コピー貼付け操作をされる方も多く、意図しないスペースが入ったまま投稿されるケースが多いです。そのままですとシステムが正常に処理できないことがあるので、投稿受付時に不要なスペースやタブを自動的に削除するように対策を施すことにしました。</p>
<h2 id="文字列前後の半角スペースタブを削除">文字列前後の半角スペース＆タブを削除</h2>
<p>正規表現を使って文字列$valの末尾の半角スペース＆タブを削除するスクリプトは以下の通り。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl">$val <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/\s*(.*?)\s*$/$1/</span>;
</code></pre></div><p>テストスクリプトで確認してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e">## 文字列前後のスペース＆タブ削除</span>
$val <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is a pen.     &#34;</span>;
$val <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/\s*(.*?)\s*$/$1/</span>;
<span style="color:#66d9ef">print</span> $val;
</code></pre></div><h2 id="文字列前後の全角スペースを削除">文字列前後の全角スペースを削除</h2>
<p>全角スペースの削除は、少しやっかいです。使用する文字コードによって異なるからです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl">$val <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/\x81\x40//g</span>; <span style="color:#960050;background-color:#1e0010">…</span> SJIS
$val <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/\xa1\xa1//g</span>; <span style="color:#960050;background-color:#1e0010">…</span> EUC
$val <span style="color:#f92672">=~</span> <span style="color:#e6db74">s/\xE3\x80\x80//g</span>; <span style="color:#960050;background-color:#1e0010">…</span> utf<span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UpFtpをMacとLinuxとで共用する方法</title>
            <link>http://minorugh.github.io/posts/upftp-between-mac-linux/</link>
            <pubDate>Mon, 17 Jul 2017 17:19:35 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/upftp-between-mac-linux/</guid>
            <description>UpFtpと言うのは、結城浩さんの作られたMakeWebと併せて使うためのFTP自動化ツールのことです。 Makeweb:テキストをXHTML</description>
            <content type="html"><![CDATA[<p>UpFtpと言うのは、結城浩さんの作られたMakeWebと併せて使うためのFTP自動化ツールのことです。</p>
<ul>
<li><a href="http://www.hyuki.com/makeweb/">Makeweb</a>:テキストをXHTMLに変換するPerlスクリプト</li>
<li><a href="http://www.hyuki.com/upftp/">UpFtp</a>:ホームページ更新用Perlスクリプト</li>
</ul>
<p>これらのツールを使えば、MakeWeb記法(Markdown記法のような書式)で書いた、index.txtをMakeWebでコンパイルしてindex.htmlを生成させ、UpFtpでサーバーに送って更新する…という手順を下記のように makefileに書き、<code>make -k</code> するだけで自動処理されます。</p>
<h3 id="makefile">makefile</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile">target <span style="color:#f92672">=</span> index.html
<span style="color:#a6e22e">a.out</span><span style="color:#f92672">:</span>all
<span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">$(</span>target<span style="color:#66d9ef">)</span>

<span style="color:#a6e22e">.SUFFIXES</span><span style="color:#f92672">:</span> .txt .html
<span style="color:#a6e22e">.txt.html</span><span style="color:#f92672">:</span>
	perl ~/Dropbox/Web/GH/mw/makeweb.pl $&lt; $@ <span style="color:#75715e"># index.txt to index.html</span>
	perl ~/Dropbox/Web/GH/upftp/upftp.pl 
</code></pre></div><h2 id="異なる環境でデータを共有するのはdropboxが便利">異なる環境でデータを共有するのはDropboxが便利</h2>
<p>Dropboxは、Windows/Linux/macOSとマルチ環境で使えるので、WEB構築の元データを複数端末で共有するのには一番適している。同期速度などの点でも他のクラウドと比較して一番早い。</p>
<p>ぼくの場合は、どの環境もユーザーフォルダの直下にDropboxをインストールしているので、以下のようPATH構成になる。</p>
<ul>
<li>Windows <code>C:\Users/minoru/Dropbox</code></li>
<li>Lnux <code>/home/minoru/Dropbox</code></li>
<li>Mac <code>/Users/minoru/Dropbox</code></li>
</ul>
<p>Makefileの場合は、~/Dropboxと書くことで認識してくれるので容易に共用設定が書けるが、UpFtpの設定ファイルの場合は、以下のようにフルパスを書く必要があるので工夫が必要となる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e"># Local root directory (in fullpath)</span>
<span style="color:#66d9ef">my</span> $localrootdir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
<span style="color:#75715e"># File list (in fullpath)</span>
<span style="color:#66d9ef">my</span> $filelist <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</code></pre></div><h2 id="ユーザフォルダーを変数で取得">ユーザフォルダーを変数で取得</h2>
<p>フルパスを直書きするとマルチ環境で共用できないので、変数を取得してそれを共通で使えるようにします。</p>
<h3 id="maclinuxの場合">Mac/Linuxの場合</h3>
<p>MacもLinuxも同じUNIXなので以下の方法でユーザーフォルダのPATHを取得できる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl">$home <span style="color:#f92672">=</span> $ENV{<span style="color:#e6db74">&#34;HOME&#34;</span>}
</code></pre></div><p><!-- raw HTML omitted --></p>
<h3 id="windowsの場合">Windowsの場合</h3>
<p>試してないので自信ないのですが、以下の方法でユーザフォルダーのPATHを取得出来る。（らしい）</p>
<pre><code>$home = %USERPROFILE%
</code></pre><h2 id="maclinux共用の設定">Mac/Linux共用の設定</h2>
<p>私の場合は、以下のように書くことでうまく動いている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e"># Get HOME directory from environment variables</span>
<span style="color:#66d9ef">my</span> $home <span style="color:#f92672">=</span> $ENV{<span style="color:#e6db74">&#34;HOME&#34;</span>};
<span style="color:#75715e"># Local root directory (in fullpath)</span>
<span style="color:#66d9ef">my</span> $localrootdir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;$home/Dropbox/Web/GH&#34;</span>;
<span style="color:#75715e"># File list (in fullpath)</span>
<span style="color:#66d9ef">my</span> $filelist <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;$home/Dropbox/Web/GH/upftp/filelist.txt&#34;</span>;
</code></pre></div><h2 id="windowsmaclinux共用の設定">Windows/Mac(Linux)共用の設定</h2>
<p>ここからは確認できていないので無責任になるけれども、OSを判別する特殊変数を使って分岐させる必要がある。</p>
<p>$^O</p>
<p>がその特殊変数です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;$^O\n&#34;</span>;
</code></pre></div><p>と書いたプログラムをそれぞれのOS環境で実行すると下記のようになるはずなので、これを使って条件分岐して$homeを定義すればいいと思います。</p>
<ul>
<li>Windows XPの場合「MSWin32」</li>
<li>Linux系OSの場合「linux」</li>
<li>macOSの場合「darwin」</li>
</ul>
<h2 id="windowsmac共用のお勧め環境">Windows/Mac共用のお勧め環境</h2>
<p>Windows環境で有名な秀丸エディタをどうしても使いたい…という場合は別ですが、どちらの環境でもEmacs/Vimといった同じ使い勝手のエディタを使うほうが便利です。その場合は、WindowsにVboxなどの仮想環境を導入してDebian/UbuntuといったLinux系のOSをインストールされる方が遥かに便利です。私の場合は、Windows10上のVboxにDebianをインストールして、Mac環境とほぼ同じ感覚でEmacsを使っています。</p>
]]></content>
        </item>
        
        <item>
            <title>open-junk-file&#43;howmでサンプルコードテスト環境を構築</title>
            <link>http://minorugh.github.io/posts/open-junk-file&#43;howm/</link>
            <pubDate>Mon, 17 Jul 2017 16:35:47 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/open-junk-file&#43;howm/</guid>
            <description>ぼくはプログラマーではないけど、作業の自動化などを図るためにときどきパッチワークコードを試すことがある。 この目的のために多くの人は、open</description>
            <content type="html"><![CDATA[<p>ぼくはプログラマーではないけど、作業の自動化などを図るためにときどきパッチワークコードを試すことがある。
この目的のために多くの人は、open-junk-file.elを使っているみたいなので素直に見習う。</p>
<p>サンプルコードの場合、うまく動くことが確認できたらあとは使い捨てになるので保存場所にはさほど神経質にならなくても良いが、あとからの検索を用意にするためにぼくの場合は、howmフォルダーに置いている。検索は、helm-agでもいいのだけどhowmの一覧機能や検索機能がとても使いやすく優れているからだ。</p>
<h2 id="open-junk-fileel">open-junk-file.el</h2>
<p>メモのファイル名は、[timestamp.拡張子]という使い方が多いみたいだけど、ちょっと判りにくいので、ぼくの場合は、20170717.hoghoge.plという感じにしてる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;;--------------------------------------------------------------------------------</span>
<span style="color:#75715e">;; open-junk-file.el                                      last updated: 2017/07/17</span>
<span style="color:#75715e">;;--------------------------------------------------------------------------------</span>
(<span style="color:#a6e22e">use-package</span> open-junk-file
  <span style="color:#e6db74">:bind</span> (<span style="color:#e6db74">&#34;C-c j&#34;</span> <span style="color:#f92672">.</span> open-junk-file)
  <span style="color:#e6db74">:config</span> (<span style="color:#66d9ef">setq</span> open-junk-file-format <span style="color:#e6db74">&#34;~/Dropbox/howm/junk/%Y/%Y%m%d.&#34;</span>))

<span style="color:#75715e">;; Automatically insert tags according to extension</span>
(defvar open-junk-ext-tags-alist
  <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;el&#34;</span> <span style="color:#e6db74">&#34;;;&#34;</span> <span style="color:#e6db74">&#34;ELISP&#34;</span>)
    (<span style="color:#e6db74">&#34;pl&#34;</span> <span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#e6db74">&#34;PERL&#34;</span>)
    (<span style="color:#e6db74">&#34;py&#34;</span> <span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#e6db74">&#34;PYTHON&#34;</span>)
    (<span style="color:#e6db74">&#34;rb&#34;</span> <span style="color:#e6db74">&#34;#&#34;</span> <span style="color:#e6db74">&#34;RUBY&#34;</span>)))
(defadvice open-junk-file
  (after open-junk-file-insert-howm-comment-advice activate)
  <span style="color:#e6db74">&#34;After open-junk-file, insert a tag into the opened buffer
</span><span style="color:#e6db74">to be searched by howm.&#34;</span>
  (<span style="color:#66d9ef">let*</span> ((ext (replace-regexp-in-string <span style="color:#e6db74">&#34;^.*\\.\\([^\\.]+\\)$&#34;</span> <span style="color:#e6db74">&#34;\\1&#34;</span> buffer-file-name))
         (asc (<span style="color:#a6e22e">assoc</span> ext open-junk-ext-tags-alist))
         (prefix (<span style="color:#a6e22e">cadr</span> asc))
         (tag (<span style="color:#a6e22e">caddr</span> asc)))
    (insert prefix)
    (insert <span style="color:#e6db74">&#34; %&#34;</span> tag)))
</code></pre></div><h2 id="quickrunel">quickrun.el</h2>
<p>コードを試運転したりデバッグするときに quickrun.el を入れて併用すると最強となる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;;-------------------------------------------------------------------------</span>
<span style="color:#75715e">;; 20_quicrun.el                                   last updated: 2017/07/05</span>
<span style="color:#75715e">;;-------------------------------------------------------------------------</span>
(<span style="color:#a6e22e">use-package</span> quickrun
  <span style="color:#e6db74">:bind</span> (<span style="color:#e6db74">&#34;C-c q&#34;</span> <span style="color:#f92672">.</span> quickrun) <span style="color:#75715e">;; ファイルを実行する</span>
        (<span style="color:#e6db74">&#34;C-c c&#34;</span> <span style="color:#f92672">.</span> quickrun-compile-only))
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>whitespace-modeでjaspace風に表示させる設定</title>
            <link>http://minorugh.github.io/posts/whitespace-like-jaspace/</link>
            <pubDate>Mon, 26 Jun 2017 22:50:39 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/whitespace-like-jaspace/</guid>
            <description>Emacs24以降は、内包されたWhitespaceで全角スペースなどを明示的に表示できることは知っていたけれど、長い間使い馴染んだjasp</description>
            <content type="html"><![CDATA[<p>Emacs24以降は、内包されたWhitespaceで全角スペースなどを明示的に表示できることは知っていたけれど、長い間使い馴染んだjaspaceのそれと同じような表示にするための設定がわからず挫折していた。</p>
<p>今回、emacs設定ファイルを全体的に見直すことになり、Tipsをググっていて表題のものを見つけたので試してみた。</p>
<ul>
<li><a href="http://piyolian.blogspot.jp/2011/12/emacs-whitespace-like-jaspace.html">参考にしたTips</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">(<span style="color:#a6e22e">use-package</span> whitespace
  <span style="color:#e6db74">:diminish</span> global-whitespace-mode
  <span style="color:#e6db74">:config</span>
  (<span style="color:#66d9ef">setq</span> whitespace-style
    <span style="color:#f92672">&#39;</span>(face
      tabs spaces newline space-mark tab-mark newline-mark))
  (<span style="color:#66d9ef">let</span> ((dark (<span style="color:#a6e22e">eq</span> <span style="color:#e6db74">&#39;dark</span> (frame-parameter <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#39;background-mode</span>))))
    (set-face-attribute <span style="color:#e6db74">&#39;whitespace-space</span> <span style="color:#66d9ef">nil</span>
    		<span style="color:#e6db74">:foreground</span> (<span style="color:#66d9ef">if</span> dark <span style="color:#e6db74">&#34;pink4&#34;</span> <span style="color:#e6db74">&#34;azure3&#34;</span>)
    		<span style="color:#e6db74">:background</span> <span style="color:#e6db74">&#39;unspecified</span>)
    (set-face-attribute <span style="color:#e6db74">&#39;whitespace-tab</span> <span style="color:#66d9ef">nil</span>
    		<span style="color:#e6db74">:foreground</span> (<span style="color:#66d9ef">if</span> dark <span style="color:#e6db74">&#34;gray20&#34;</span> <span style="color:#e6db74">&#34;gray80&#34;</span>)
    		<span style="color:#e6db74">:background</span> <span style="color:#e6db74">&#39;unspecified</span>
    		<span style="color:#e6db74">:strike-through</span> <span style="color:#66d9ef">t</span>)
    (set-face-attribute <span style="color:#e6db74">&#39;whitespace-newline</span> <span style="color:#66d9ef">nil</span>
    		<span style="color:#e6db74">:foreground</span> (<span style="color:#66d9ef">if</span> dark <span style="color:#e6db74">&#34;darkcyan&#34;</span> <span style="color:#e6db74">&#34;darkseagreen&#34;</span>)))
  (<span style="color:#66d9ef">setq</span> whitespace-space-regexp <span style="color:#e6db74">&#34;\\(　+\\)&#34;</span>)
  (<span style="color:#66d9ef">setq</span> whitespace-display-mappings
        <span style="color:#f92672">&#39;</span>((space-mark   ?　    [?<span style="color:#960050;background-color:#1e0010">□</span>]    [?＿]) <span style="color:#75715e">; full-width space - square</span>
          (newline-mark ?\n    [?\xAB ?\n])))   <span style="color:#75715e">; eol - right quote mark</span>
  (<span style="color:#66d9ef">setq</span> whitespace-global-modes <span style="color:#f92672">&#39;</span>(<span style="color:#a6e22e">not</span> dired-mode tar-mode))
  (global-whitespace-mode <span style="color:#ae81ff">1</span>))


</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>メモ機能に特化した超シンプルなhowm&#43;Dropboxの設定</title>
            <link>http://minorugh.github.io/posts/howm&#43;dropbox/</link>
            <pubDate>Fri, 09 Jun 2017 20:40:03 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/howm&#43;dropbox/</guid>
            <description>メモ機能に特化したhowmの設定を紹介します。 GTDとしては使わないのでメニュー画面は使いません。 メニュー画面は使いませんが検索などの基本機</description>
            <content type="html"><![CDATA[<p>メモ機能に特化したhowmの設定を紹介します。</p>
<ul>
<li>GTDとしては使わないのでメニュー画面は使いません。</li>
<li>メニュー画面は使いませんが検索などの基本機能は全て使えます。</li>
<li>新規投稿と一覧表示のみ直接使えるようにkey-bindしています。</li>
<li>ファイルは、スマホや他の端末からも共有出来るようにDropboxで管理します。</li>
<li>メモは、markdown-mode で書きます。理由は後述します。</li>
</ul>
<h2 id="howm-memoの設定">howm-memoの設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp"><span style="color:#75715e">;*************************************************************************</span>
<span style="color:#75715e">;; howm-memo.el                       last updated: 2017/06/09</span>
<span style="color:#75715e">;*************************************************************************</span>
<span style="color:#75715e">;; M-x package-install howm</span>
<span style="color:#75715e">;; (use-package key-chord)</span>
<span style="color:#75715e">;; (use-package use-package-chords</span>
<span style="color:#75715e">;;   :config (key-chord-mode 1))</span>
<span style="color:#75715e">;;-----------------------------------------------------------------------</span>
(<span style="color:#a6e22e">use-package</span> howm
  <span style="color:#e6db74">:init</span>
  (<span style="color:#66d9ef">setq</span> howm-view-title-header <span style="color:#e6db74">&#34;#&#34;</span>
        howm-directory <span style="color:#e6db74">&#34;~/Dropbox/howm&#34;</span>
        howm-file-name-format <span style="color:#e6db74">&#34;%Y/%m/%Y-%m%d-%H%M.md&#34;</span>
  <span style="color:#e6db74">:config</span>
  (<span style="color:#66d9ef">setq</span> howm-view-split-horizontally <span style="color:#66d9ef">t</span>      <span style="color:#75715e">;; 一覧バッファと内容バッファを横に並べる</span>
        howm-view-summary-persistent <span style="color:#66d9ef">nil</span>    <span style="color:#75715e">;; RET でファイルを開く際一覧バッファを消す</span>
  <span style="color:#e6db74">:chords</span> ((<span style="color:#e6db74">&#34;,,&#34;</span> <span style="color:#f92672">.</span> howm-create)             <span style="color:#75715e">;; メモを書く</span>
           (<span style="color:#e6db74">&#34;@@&#34;</span> <span style="color:#f92672">.</span> howm-list-all)))         <span style="color:#75715e">;; メモ一覧を開く</span>

<span style="color:#75715e">;; 空になったファイルを尋ねずに自動削除：howm以外でも有効</span>
(defun my:delete-file-if-no-contents ()
  (when (and (buffer-file-name (current-buffer))
             (<span style="color:#a6e22e">=</span> (point-min) (point-max)))
    (<span style="color:#a6e22e">delete-file</span>
     (buffer-file-name (current-buffer)))))
(<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">not</span> (memq <span style="color:#e6db74">&#39;my:delete-file-if-no-contents</span> after-save-hook))
    (<span style="color:#66d9ef">setq</span> after-save-hook
          (<span style="color:#a6e22e">cons</span> <span style="color:#e6db74">&#39;my:delete-file-if-no-contents</span> after-save-hook)))

<span style="color:#75715e">;***********************************************************************</span>
<span style="color:#75715e">; end of file</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>mozc-tempを使ったモードレス日本語入力が快適</title>
            <link>http://minorugh.github.io/posts/mozc-temp/</link>
            <pubDate>Thu, 25 May 2017 19:48:12 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/mozc-temp/</guid>
            <description>モードレスに魅せられて、ac-mozcを導入して使っていたが、新しいモードレスのコードで、mozc-tempなるものがあることを知った。早速</description>
            <content type="html"><![CDATA[<p>モードレスに魅せられて、ac-mozcを導入して使っていたが、新しいモードレスのコードで、mozc-tempなるものがあることを知った。早速使って見た。</p>
<ul>
<li><a href="https://github.com/HKey/mozc-temp">https://github.com/HKey/mozc-temp</a></li>
</ul>
<p>mozc-tempのREADMEを見るとコンセプトがよく分かる。</p>
<blockquote>
</blockquote>
<p>mozc-tempはmozc.elによる入力をモードレス化するラッパーです。
ac-mozcをもとに作成されました。
基本的な挙動はac-mozcと同じになるように作られていて、全角文字と半角文字の混在する文章の入力を楽にすることを目的としています。
ac-mozcとの違いは、これがmozc.elのインターフェイスに対するラッパーであるということです。 そのため、変換時の候補選択はmozc.elのものと同じ操作が可能です。</p>
<p><img src="https://github.com/HKey/mozc-temp/raw/master/images/screencast.gif" alt="Alt Text"></p>
<!-- raw HTML omitted -->
<h2 id="導入">導入</h2>
<p>パッケージインストールで mozc-temp.elを入れて、init.elに以下を設定するだけ。</p>
<pre><code>(global-set-key (kbd &quot;s-j&quot;) #'toggle-input-method)
(global-set-key (kbd &quot;s-m&quot;) #'mozc-temp-convert)
</code></pre><p><!-- raw HTML omitted -->
キーバインドは何でもいいが、わたしの場合は「⌘英かな」というアプリで macbookの右commadキーにこれを割り当てて使っている。左commandキーには、mozc-modeのon/offが出来るように設定しておくと便利です。</p>
<p><img src="https://c1.staticflickr.com/5/4195/34664022620_7b83530565.jpg" alt="Alt Text"></p>
<h2 id="感想">感想</h2>
<p>ac-mozcを使ってモードレスの環境を試したことはあったが、拗音（っ)とかの変換がうまくできないので中途半端な印象でした。
その点mozc-tempはそうした問題もなくとても使いやすいです。</p>
<p>Emacsで快適にmozcを使うためには、Emacs使用時は、他の日本語入力メソッドが同時に機能しないようにコントロールすることがとても大切です。それぞれの環境によって工夫が必要ですが、わたしの場合（MaC）について、別Tipsで紹介していますので参考にしてください。</p>
<p><a href="https://snap.textgh.org/201710031643/">Mac+Emacs で emacs-mozc をかなキーで ON/OFF させる裏技</a></p>
]]></content>
        </item>
        
        <item>
            <title>iterm2とvimのカラーテーマをhybridにする</title>
            <link>http://minorugh.github.io/posts/iterm2-color-theme/</link>
            <pubDate>Wed, 17 May 2017 23:43:18 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/iterm2-color-theme/</guid>
            <description>iterm Link Text これを保存して、 iTerm -&amp;gt; Preferences... -&amp;gt; Profiles -&amp;gt;Colors -&amp;gt; Load Presets... -&amp;gt; Import... で読み込む。 vim Hybrid iTerm Colors: https://github.com/w0ng/vim-hybrid これを保存して、下記に置く ~/.vim/colors/hybrid.vim</description>
            <content type="html"><![CDATA[<h2 id="iterm">iterm</h2>
<ul>
<li><a href="https://raw.githubusercontent.com/w0ng/dotfiles/master/iterm2/hybrid.itermcolors">Link Text</a></li>
</ul>
<p>これを保存して、</p>
<pre><code>iTerm -&gt; Preferences... -&gt; Profiles -&gt;Colors -&gt; Load Presets... -&gt; Import...
</code></pre><p>で読み込む。</p>
<h2 id="vim">vim</h2>
<ul>
<li>Hybrid iTerm Colors: <a href="https://github.com/w0ng/vim-hybrid">https://github.com/w0ng/vim-hybrid</a></li>
</ul>
<p>これを保存して、下記に置く</p>
<pre><code>~/.vim/colors/hybrid.vim
</code></pre>]]></content>
        </item>
        
        <item>
            <title>mozc_emacs_helper on macOS Sierra</title>
            <link>http://minorugh.github.io/posts/mozc_emacs_helper-on-sierra/</link>
            <pubDate>Wed, 17 May 2017 21:15:12 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/mozc_emacs_helper-on-sierra/</guid>
            <description>macOS Sierra をクリーンインストールしたので mozc_emacs_helper を使えるようにした。google日本語入力と連携できるようにビルドできるという以下のサイトの Tips を参考にし</description>
            <content type="html"><![CDATA[<p>macOS Sierra をクリーンインストールしたので mozc_emacs_helper を使えるようにした。google日本語入力と連携できるようにビルドできるという以下のサイトの Tips を参考にしたが、ちょっと解りにくかったので備忘録として整理しておく。</p>
<ul>
<li><a href="https://gist.github.com/ynkjm/7d6f22bb4338f84b1b287bf9abe79001">emacs with mozc on macos sierra</a></li>
</ul>
<h2 id="準備">準備</h2>
<p>Xcodeが必要と言うことだけどコマンドラインツールのみで大丈夫だった。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">xcode-select --install
</code></pre></div><p>ninja が要るらしいので homebrew でインストールしておく。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">brew install ninja
</code></pre></div><h2 id="mozc-をダウンロードする">mozc をダウンロードする</h2>
<p>作業ディレクトリはどこでもいいが、僕は基本的にdesktopで作業することが多い。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd desktop
git clone https://github.com/google/mozc.git -b master --single-branch --recursive
</code></pre></div><h2 id="mac-の-google日本語入力と連携させるためにソースを修正">Mac の google日本語入力と連携させるためにソースを修正</h2>
<p>以下のファイルを作ってパッチをかけてもいいが、簡単なのでぼくは直接修正した。</p>
<pre><code class="language-vc" data-lang="vc">diff --git a/src/build_mozc.py b/src/build_mozc.py
index a56aaaf..d419f49 100644
--- a/src/build_mozc.py
+++ b/src/build_mozc.py
@@ -167,6 +167,8 @@ def GetGypFileNames(options):
   # Include subdirectory of win32 and breakpad for Windows
   if options.target_platform == 'Windows':
     gyp_file_names.extend(glob.glob('%s/win32/*/*.gyp' % SRC_DIR))
+  elif options.target_platform == 'Mac':
+    gyp_file_names.extend(glob.glob('%s/unix/emacs/*.gyp' % SRC_DIR))
   elif options.target_platform == 'Linux':
     gyp_file_names.extend(glob.glob('%s/unix/*/*.gyp' % SRC_DIR))
     # Add ibus.gyp if ibus version is &gt;=1.4.1.
diff --git a/src/mac/mac.gyp b/src/mac/mac.gyp
index 76b540d..2ee4006 100644
--- a/src/mac/mac.gyp
+++ b/src/mac/mac.gyp
@@ -586,7 +586,6 @@
             ['branding==&quot;GoogleJapaneseInput&quot;', {
               'dependencies': [
                 'DevConfirmPane',
-                'codesign_client',
               ],
             }],
           ],
           
</code></pre><h2 id="コンパイル">コンパイル</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd mozc/src
GYP_DEFINES<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mac_sdk=10.12 mac_deployment_target=10.12&#34;</span> python build_mozc.py gyp --noqt --branding<span style="color:#f92672">=</span>GoogleJapaneseInput
$ python build_mozc.py build -c Release unix/emacs/emacs.gyp:mozc_emacs_helper
</code></pre></div><h2 id="動作確認">動作確認</h2>
<p>以下のように表示されれば成功！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">echo -e <span style="color:#e6db74">&#39;(0 CreateSession)\n(1 SendKey 1 hiragana)\n(2 SendKey 1 hiragana)\n(3 SendKey 1 97)&#39;</span> | out_mac/Release/mozc_emacs_helper
<span style="color:#f92672">((</span>mozc-emacs-helper . t<span style="color:#f92672">)(</span>version . <span style="color:#e6db74">&#34;2.19.2643.101&#34;</span><span style="color:#f92672">)(</span>config . <span style="color:#f92672">((</span>preedit-method . roman<span style="color:#f92672">))))</span>
<span style="color:#f92672">((</span>emacs-event-id . 0<span style="color:#f92672">)(</span>emacs-session-id . 1<span style="color:#f92672">)(</span>output . <span style="color:#f92672">()))</span>
<span style="color:#f92672">((</span>emacs-event-id . 1<span style="color:#f92672">)(</span>emacs-session-id . 1<span style="color:#f92672">)(</span>output . <span style="color:#f92672">((</span>id . <span style="color:#e6db74">&#34;4087100232139049092&#34;</span><span style="color:#f92672">)(</span>mode . hiragana<span style="color:#f92672">)(</span>consumed . nil<span style="color:#f92672">)(</span>key . <span style="color:#f92672">((</span>special-key . kana<span style="color:#f92672">)))(</span>status . <span style="color:#f92672">((</span>activated . t<span style="color:#f92672">)(</span>mode . hiragana<span style="color:#f92672">)(</span>comeback-mode . hiragana<span style="color:#f92672">))))))</span>
<span style="color:#f92672">((</span>emacs-event-id . 2<span style="color:#f92672">)(</span>emacs-session-id . 1<span style="color:#f92672">)(</span>output . <span style="color:#f92672">((</span>id . <span style="color:#e6db74">&#34;4087100232139049092&#34;</span><span style="color:#f92672">)(</span>mode . hiragana<span style="color:#f92672">)(</span>consumed . nil<span style="color:#f92672">)(</span>key . <span style="color:#f92672">((</span>special-key . kana<span style="color:#f92672">)))(</span>status . <span style="color:#f92672">((</span>activated . t<span style="color:#f92672">)(</span>mode . hiragana<span style="color:#f92672">)(</span>comeback-mode . hiragana<span style="color:#f92672">))))))</span>
</code></pre></div><h2 id="インストールする">インストールする</h2>
<p>パスの通ったところにコピーするだけ。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo cp out_mac/Release/mozc_emacs_helper /usr/local/bin
</code></pre></div><h2 id="emacs-で使えるようにする">Emacs で使えるようにする</h2>
<p>mozc.el をコピーするか Package install する。</p>
<pre><code class="language-basu" data-lang="basu">cp mozc/src/unix/emacs/mozc.el &quot;YOUR EMACS ELISP PATH&quot;
</code></pre><h2 id="initelに設定を書く">init.elに設定を書く</h2>
<ul>
<li>mozc-popup.el をパッケージインストールして変換候補を表示させる。</li>
<li>mozc の on/off でカーソルの色を変える（mozc-el-extensions）</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">(<span style="color:#a6e22e">require</span> <span style="color:#e6db74">&#39;mozc</span>)
(<span style="color:#66d9ef">setq</span> default-input-method <span style="color:#e6db74">&#34;japanese-mozc&#34;</span>)
(<span style="color:#66d9ef">setq</span> mozc-helper-program-name <span style="color:#e6db74">&#34;mozc_emacs_helper&#34;</span>)

(<span style="color:#a6e22e">require</span> <span style="color:#e6db74">&#39;mozc-popup</span>)
(<span style="color:#66d9ef">setq</span> mozc-candidate-style <span style="color:#e6db74">&#39;popup</span>) <span style="color:#75715e">; select popup style.</span>

<span style="color:#75715e">;; Changing the color of the cursor with on/off</span>
(<span style="color:#a6e22e">require</span> <span style="color:#e6db74">&#39;mozc-cursor-color</span>)

</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">M-x mozc-mode
</code></pre></div><p>で使える。toggle-input-method をキーバインドしてもよい。</p>
<h2 id="使用感">使用感</h2>
<p>google日本語の辞書、ユーザ辞書ともに完全に連携できるのでとても便利。</p>
]]></content>
        </item>
        
        <item>
            <title>livedown：markdownリアルタイムビューアーの導入</title>
            <link>http://minorugh.github.io/posts/livedown/</link>
            <pubDate>Sat, 25 Feb 2017 22:27:27 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/livedown/</guid>
            <description>EmacsのMarkdown-modeビューアーは、multimarkdownが定番のようですが、プレビュー機能は専用エディタほどではありま</description>
            <content type="html"><![CDATA[<p>EmacsのMarkdown-modeビューアーは、multimarkdownが定番のようですが、プレビュー機能は専用エディタほどではありません。そこでお勧めしたいのがLivedownです。Livedownはオートリロード機能が備わっていますので、編集して保存するたびにプレビューが更新されます。できあがりが分かりやすく確認できるのでどんどん書き進められます。ぼくの場合、ちょこっとしたメモもMarkdownで書いているので、そのメモを印刷したい時にビューアーの表示をそのままプリントアウト出来るので便利です。</p>
<h2 id="導入">導入</h2>
<p>導入は下記リンクに詳しく書かれているけど、README.mdの内容を転載しておこう。</p>
<ul>
<li><a href="https://github.com/shime/emacs-livedown">https://github.com/shime/emacs-livedown</a></li>
</ul>
<h3 id="installation">Installation</h3>
<p>First make sure you have node with npm installed.</p>
<p>Then install livedown with</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npm install -g livedown
</code></pre></div><p>Then install this plugin with</p>
<pre><code>git clone https://github.com/shime/emacs-livedown.git ~/.emacs.d/emacs-livedown
cat &lt;&lt;EOF &gt;&gt; ~/.emacs.d/init.el
(add-to-list 'load-path (expand-file-name &quot;~/.emacs.d/emacs-livedown&quot;))
(require 'livedown)
EOF
</code></pre><h3 id="configuration">Configuration</h3>
<p>This plugin uses some configurable variables, with the following defaults</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">(custom-set-variables
 <span style="color:#f92672">&#39;</span>(livedown-autostart <span style="color:#66d9ef">nil</span>) <span style="color:#75715e">; automatically open preview when opening markdown files</span>
 <span style="color:#f92672">&#39;</span>(livedown-open <span style="color:#66d9ef">t</span>)        <span style="color:#75715e">; automatically open the browser window</span>
 <span style="color:#f92672">&#39;</span>(livedown-port <span style="color:#ae81ff">1337</span>)     <span style="color:#75715e">; port for livedown server</span>
 <span style="color:#f92672">&#39;</span>(livedown-browser <span style="color:#66d9ef">nil</span>))  <span style="color:#75715e">; browser to use</span>
</code></pre></div><p>Make sure to place them before the require line in your init.el.</p>
<p>You can also call the functions manually with</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-lisp" data-lang="lisp">M-x livedown-preview
M-x livedown-kill
</code></pre></div><h2 id="使用感活用法など">使用感、活用法など</h2>
<ul>
<li>Mac unix Windowsなどマルチ環境で使えるのが good!</li>
<li>Emacsの Markdown-modeで書いていれば、リアルタイムビューアーの必要性はさほど感じない。</li>
<li>A4一枚ぐらいのメモ書きをササッと印刷したい時に livedownのプレビュー画面をそのままプリントできるのが超便利。</li>
<li>Pandocとか使って自動化すれば簡単にPDFにもできそうだけどそれも面倒くさい…</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>PDFJモジュールをサーバーに置いてPerlでPDFを自動生成させる</title>
            <link>http://minorugh.github.io/posts/use-pdfj-in-server/</link>
            <pubDate>Sat, 25 Feb 2017 21:52:14 +0900</pubDate>
            
            <guid>http://minorugh.github.io/posts/use-pdfj-in-server/</guid>
            <description>目的 全自動で稼働させているインターネット句会の中で全員の投句が済んだあと、ランダムに並べ替えて清記表を作成する作業工程がある。 参加者はそれを</description>
            <content type="html"><![CDATA[<h2 id="目的">目的</h2>
<p>全自動で稼働させているインターネット句会の中で全員の投句が済んだあと、ランダムに並べ替えて清記表を作成する作業工程がある。</p>
<p>参加者はそれをプリントアウトして選句するのだけれど、俳句なので縦書き且つ美しくアウトプットさせたい。</p>
<p>手作業なら簡単にできるが、ネット上のシステムに自動的に作業させたい。</p>
<h2 id="pdfjモジュールを使う">PDFJモジュールを使う</h2>
<p>PDFJが使えそうだと睨んだのでググってみた。</p>
<ul>
<li><a href="http://blog.mukairiku.net/2010/01/pdfj">http://blog.mukairiku.net/2010/01/pdfj</a>モジュールを使ってperlから直接pdfファイルを出力しよう.html</li>
</ul>
<p>レンタルサーバーに PDFJをインストールするわけにはいかないけど、モジュールをアップロードしてそれを呼び出す形でも上手く動きました。</p>
<pre><code class="language-{bash}" data-lang="{bash}">#!/usr/local/bin/perl

# 句会場リセット用の日付ファイルを開いて読み込む
open(FILE,&quot;../_datefrag.dat&quot;) or die &quot;$!&quot;;
my $ctoday = &lt;FILE&gt;;
close(FILE);

# 今日のPDFファイルの有無チェック（重複作成させない）
my $filename = &quot;./pdf/$ctoday\.pdf&quot;;
unless( -f $filename ) {
   &amp;main; # なければ生成する（１日１回だけ）
}

# PDF生成サブルーチン
sub main {
# 清記データの抽出
use Encode;

my $entryfile = &quot;../data/entry.dat&quot;; # 清記元データ（作者名が入ってる）
my @sjisdata = (); # 抽出したデータを格納する配列（文字コードは shiftjis）

open(IN,&quot;$entryfile&quot;); # 前日の投句データを開く
my @log = &lt;IN&gt;;
close (IN);

foreach my $log (@log){
	($no,$name,$date,$mail,$comment,$pass)=split(/,/,$log);
	chomp;
	push @sjisdata, &quot;$no $comment\n&quot;; # 番号と俳句のみを抽出
}

# PDFJ で処理するためにデータの文字コードを変換する（shiftjis &gt;&gt; euc-jp）
# Encode::decode 関数で行う。
# 文字コードは、uft8 以外に、shiftjis や euc-jp が指定できる。  

my @eucdata = (); # eucデータを格納する配列
foreach my $line1 (@sjisdata){
        $line1  =   decode('shiftjis', $line1); # shiftjisで読み込み
        $line1  =   encode('euc-jp', $line1);   # euc-jpで書き出す
        push @eucdata, $line1; # 格納する
}

# PDFJ
use lib './pdfj'; # アップロードしたPDFJモジュール
use strict;
use warnings;
use utf8;
use Encode;
use PDFJ 'EUC';

# 用紙の設定( 1pt = 0.35278mm て計算)
my $PaperW  = 842;  #A4の横
my $PaperH  = 595;  #A4の縦
my $PaperSU =  72;  #上余白(20mm)
my $PaperSD =  72;  #下余白(20mm)
my $PaperSR =  72;  #右余白(20mm)
my $PaperSL =  72;  #左余白(20mm)
my $iWidth  = $PaperW - $PaperSR - $PaperSL; #印刷可能幅
my $iHeight = $PaperH - $PaperSU - $PaperSD; #印刷可能高

# フォントサイズとラインフィートの設定
my $fSize    = 12;     #フォントサイズ
my $linefeed ='170%'; #ラインフィート

# pdfオブジェクトを作成
my $pdfDoc = PDFJ::Doc-&gt;new( 1.3, $PaperW, $PaperH); # PDF ver1.3

# フォントオブジェクトを作成
my $oFont = $pdfDoc-&gt;new_font('Ryumin-Light', 'EUC-V', 'Times-Roman');
# my $oFont = $pdfDoc-&gt;new_font('Hiragino Maru Gothic ProN', 'EUC-V', 'Monaco');

# テキストスタイルオブジェクトを作成
my $oTextStyle = TStyle(font =&gt; $oFont, fontsize =&gt; $fSize, vh =&gt; 1);

# 段落スタイルのオフシェクトを作成
my $oPStyle  = PStyle(size=&gt;$iHeight, linefeed=&gt;$linefeed, align=&gt;'b', postskip=&gt;0);

# 文ことに段落の配列を作成
my @Paragraphes = ();
for my $line (@eucdata){
  chomp($line);
  $line = encode('eucjp', '　') unless $line;
  my $oTexe = Text($line, $oTextStyle);
  push @Paragraphes, Paragraph($oTexe, $oPStyle);
}

# 段落の配列をフロックにまとめる
my $oBlock = Block('R', \@Paragraphes, BStyle());

# フロックをヘーシ毎に分割してヘーシに割り付ける
for my $oB ($oBlock-&gt;break($iWidth)) {
  my $oPage = $pdfDoc-&gt;new_page();
  $oB-&gt;show($oPage, $iWidth+$PaperSL, $iHeight+$PaperSD, 'rt');
}

# PDFを出力
$pdfDoc-&gt;print(&quot;./pdf/$ctoday\.pdf&quot;);

} # sub main 終わり

# PDFファイルへのリンクをHTMLに表示させる
print &quot;Content-type: text/html\n\n&quot;;
print &quot;&lt;html&gt;&lt;meta charset=\&quot;utf-8\&quot;&gt;\n&quot;;
print &quot;&lt;body&gt;\n&quot;;
print &quot;&lt;a class=\&quot;NAVLINK\&quot; title=\&quot;縦書清記\&quot; href=\&quot;/d_kukai/seiki/pdf/$ctoday.pdf\&quot;&gt;&lt;i class=\&quot;fa fa-leaf\&quot; aria-hidden=\&quot;true\&quot;&gt;&lt;/i&gt;&lt;/a&gt;\n&quot;;
print &quot;&lt;/body&gt;\n&quot;;
print &quot;&lt;/html&gt;\n&quot;;

exit(1);

</code></pre><h2 id="課題">課題</h2>
<ul>
<li>上下揃えの均等にしたい</li>
<li>A4たて二段組にしたい(将来投句数が増えた時のために)</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
